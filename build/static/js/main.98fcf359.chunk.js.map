{"version":3,"sources":["globals.js","components/viewerSlice.js","components/Header.js","components/initializeViewer.js","components/Viewer.js","components/ExportModal.js","components/OptionChoiceModal.js","components/ColorPanel.js","components/TogglePanel.js","components/ElementCategoryPanel.js","components/SurfaceConfigurationPanel.js","components/AnimationPanel.js","components/OptionPanel.js","components/NodePanel.js","components/ControlMenu.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["window","onclick","event","modal","document","getElementById","target","style","display","initialState","modelId","materials","animations","sceneGraph","controls","disableButtons","latestControlId","sketchfabAPI","sceneGraphIsVisible","viewMode","surfaceOptionMap","surfaceConfigurationMode","materialNameSegmentMap","surfaceAttributeNameMap","groupingOptions","viewerSlice","createSlice","name","reducers","resetState","state","setSketchfabAPI","action","payload","setModelId","setMaterials","setAnimations","setSceneGraph","buildSceneGraph","children","setSceneGraphIsVisible","id","value","createControl","defaultConfiguration","animationUID","startTime","endTime","isPrimary","designations","allowsAnimation","unshift","type","entityIndex","entity","instanceID","configuration","isExpanded","setViewMode","setControls","toggleDisableButtons","updateControl","key","console","log","i","length","setSurfaceOptionMap","setSurfaceConfigurationMode","setMaterialNameSegmentMap","setSurfaceAttributeNameMap","setGroupingOptions","setAllNodesVisible","Object","keys","show","hide","actions","selectModelId","viewer","selectMaterials","selectAnimations","selectControls","selectDisableButtons","selectSceneGraph","selectSketchfabAPI","selectSceneGraphIsVisible","selectViewMode","selectSurfaceOptionMap","selectSurfaceConfigurationMode","selectMaterialNameSegmentMap","selectSurfaceAttributeNameMap","selectGroupingOptions","toggleModalDisplay","dispatch","currentStyle","toggleOptionChoiceModalDisplay","depth","undefined","push","materialID","useSelector","useDispatch","className","onChange","e","onClick","isSeeking","current_anim","apiSkfb","pollTime","duration","timeSlider","iframe","animationsList","getCurrentTime","err","time","percentage","innerHTML","toFixed","seekTo","requestAnimationFrame","api","config","options","init","this","Sketchfab","urlid","ui_controls","graph_optimizer","ui_animations","ui_watermark","ui_inspector","ui_stop","ui_infos","success","start","addEventListener","pause","getAnimations","play","setCurrentAnimationByUID","getSceneGraph","result","getMaterialList","match","geometryName","split","filter","string","materialOptions","map","option","replace","primaryValue","j","currentAttributeOptions","indexOf","bind","error","prefix","initializeViewer","disabled","class","src","allowfullscreen","mozallowfullscreen","webkitallowfullscreen","configurationMaps","createJSExport","JSON","stringify","props","htmlFor","renderColorsOption","renderAdditionalColors","additionalColors","transferObject","color","colorRGB","newColors","index","array","newArray","newColor","hexRgb","format","num","materialsHtml","material","sceneGraphHtml","node","addDashes","number","dashes","uniqueStrings","categoryOptions","nodeNameArray","mainDesignation","capitalLetter","detailedTitle","designation","borderBottom","borderTop","checked","newConfiguration","groupingOption","flex","newDesignations","parse","a","newDisablesAnimation","includes","placeholder","renderAttributeName","surfaceName","newSurfaceAttributeNames","segment","newMaterialSegmentMap","animationOptions","animation","alignItems","flexDirection","renderPanel","ColorPanel","TogglePanel","AnimationPanel","ElementCategoryPanel","overflow","list","setList","title","control","fill","preserveAspectRatio","height","width","viewBox","verticalAlign","d","renderOptions","values","reduce","accum","curr","nodesButtonStyles","backgroundColor","optionsButtonStyles","OptionPanel","NodePanel","App","Header","Viewer","ControlMenu","ExportModal","OptionChoiceModal","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","viewerReducer","middleware","getDefaultMiddleware","concat","logger","Boolean","location","hostname","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98fcf359.chunk.js","sourcesContent":["// When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    var modal = document.getElementById(\"modal\");\r\n    if (event.target == modal) {\r\n      modal.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  modelId: '',\r\n  materials: [],\r\n  animations: [],\r\n  sceneGraph: [],\r\n  controls: [],\r\n  disableButtons: true,\r\n  latestControlId: 0,\r\n  sketchfabAPI: null,\r\n  sceneGraphIsVisible: {},\r\n  viewMode: \"options\",\r\n  surfaceOptionMap: {},\r\n  surfaceConfigurationMode: false,\r\n  materialNameSegmentMap: {},\r\n  surfaceAttributeNameMap: {},\r\n  groupingOptions: [],\r\n};\r\n\r\nexport const viewerSlice = createSlice({\r\n  name: 'viewer',\r\n  initialState,\r\n  reducers: {\r\n    resetState: state => {\r\n      state = initialState;\r\n    },\r\n    setSketchfabAPI: (state, action) => {\r\n      state.sketchfabAPI = action.payload;\r\n    },\r\n    setModelId: (state, action) => {\r\n      state.modelId = action.payload;\r\n    },\r\n    setMaterials: (state, action) => {\r\n      state.materials = action.payload;\r\n    },\r\n    setAnimations: (state, action) => {\r\n      state.animations = action.payload;\r\n    },\r\n    setSceneGraph: (state, action) => {\r\n      buildSceneGraph(state, action.payload.children, 0);\r\n    },\r\n    setSceneGraphIsVisible: (state, action) => {\r\n      const { id, value } = action.payload;\r\n      state.sceneGraphIsVisible[id] = value;\r\n    },\r\n    createControl: (state, action) => {\r\n      state.latestControlId = state.latestControlId += 1;\r\n      let id = state.latestControlId;\r\n      let defaultConfiguration = {}\r\n      if(action.payload === \"animation\") {\r\n        defaultConfiguration = {\r\n          animationUID: \"none\",\r\n          startTime: \"0\",\r\n          endTime: \"0\",\r\n        }\r\n      }\r\n\r\n      if(action.payload === \"category\") {\r\n        defaultConfiguration = {\r\n          isPrimary: false,\r\n          designations: {},\r\n          allowsAnimation: [],  \r\n        }\r\n      }\r\n      state.controls.unshift({\r\n        type: action.payload,\r\n        id: id,\r\n        name: action.payload,\r\n        entityIndex: \"none\",\r\n        entity: {instanceID: 0},\r\n        configuration: defaultConfiguration,\r\n        isExpanded: true,\r\n      });\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.viewMode = action.payload\r\n    },\r\n    setControls: (state, action) => {\r\n      state.controls = action.payload;\r\n    },\r\n    toggleDisableButtons: (state) => {\r\n      state.disableButtons = false;\r\n    },\r\n    updateControl: (state, action) => {\r\n      const { id, key, value } = action.payload;\r\n      console.log(action.payload)\r\n      for (let i=0; i<state.controls.length; ++i) {\r\n        if (state.controls[i].id == id) {\r\n          state.controls[i][key] = value;\r\n        }\r\n      }\r\n    },\r\n    setSurfaceOptionMap: (state, action) => {\r\n      console.log(\"setSurfaceOptionMap -> action.payload\")\r\n      console.log(action.payload)\r\n      state.surfaceOptionMap = action.payload;\r\n    },\r\n    setSurfaceConfigurationMode: (state, action) => {\r\n      state.surfaceConfigurationMode = action.payload;\r\n    },\r\n    setMaterialNameSegmentMap: (state, action) => {\r\n      console.log(\"setMaterialNameSegmentMap -> action.payload:\")\r\n      console.log(action.payload)\r\n      state.materialNameSegmentMap = action.payload;\r\n    },\r\n    setSurfaceAttributeNameMap: (state, action) => {\r\n      state.surfaceAttributeNameMap = action.payload;\r\n    },\r\n    setGroupingOptions: (state, action) => {\r\n      state.groupingOptions = action.payload;\r\n    },\r\n    setAllNodesVisible: (state, action) => {\r\n      for(let i=0; i<Object.keys(state.sceneGraphIsVisible).length; ++i) {\r\n        if(action.payload) {\r\n          state.sketchfabAPI.show(Object.keys(state.sceneGraphIsVisible)[i])\r\n        } else {\r\n          state.sketchfabAPI.hide(Object.keys(state.sceneGraphIsVisible)[i])\r\n        }\r\n        state.sceneGraphIsVisible[Object.keys(state.sceneGraphIsVisible)[i]] = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  resetState,\r\n  setModelId, \r\n  createControl, \r\n  toggleDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n  setSceneGraph,\r\n  setSceneGraphIsVisible,\r\n  setViewMode,\r\n  setGroupingOptions,\r\n  setSurfaceOptionMap,\r\n  setSurfaceConfigurationMode,\r\n  setMaterialNameSegmentMap,\r\n  setSurfaceAttributeNameMap,\r\n  setAllNodesVisible,\r\n  setAnimations,\r\n  setMaterials,\r\n  setSketchfabAPI,\r\n} = viewerSlice.actions;\r\n\r\nexport const selectModelId = state => state.viewer.modelId;\r\n\r\nexport const selectMaterials = state => state.viewer.materials;\r\n\r\nexport const selectAnimations = state => state.viewer.animations;\r\n\r\nexport const selectControls = state => state.viewer.controls;\r\n\r\nexport const selectDisableButtons = state => state.viewer.disableButtons;\r\n\r\nexport const selectSceneGraph = state => state.viewer.sceneGraph;\r\n\r\nexport const selectSketchfabAPI = state => state.viewer.sketchfabAPI;\r\n\r\nexport const selectSceneGraphIsVisible = state => state.viewer.sceneGraphIsVisible;\r\n\r\nexport const selectViewMode = state => state.viewer.viewMode;\r\n\r\nexport const selectSurfaceOptionMap = state => state.viewer.surfaceOptionMap;\r\n\r\nexport const selectSurfaceConfigurationMode = state => state.viewer.surfaceConfigurationMode;\r\n\r\nexport const selectMaterialNameSegmentMap = state => state.viewer.materialNameSegmentMap;\r\n\r\nexport const selectSurfaceAttributeNameMap = state => state.viewer.surfaceAttributeNameMap;\r\n\r\nexport const selectGroupingOptions = state => state.viewer.groupingOptions;\r\n\r\nexport const toggleModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const toggleOptionChoiceModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('control-choice-modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nvar buildSceneGraph = function(state, children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n    if (children[i].type != \"Group\" && children[i].name != \"RootNode\") {\r\n      if(children[i].name == undefined) {\r\n        state.sceneGraph.push({\r\n          name: children[i].type, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      } else {\r\n        state.sceneGraph.push({\r\n          name: children[i].name, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      }\r\n    }\r\n    state.sceneGraphIsVisible[children[i].instanceID] = true\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildSceneGraph(state, children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default viewerSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectModelId, \r\n  setModelId, \r\n  toggleModalDisplay,\r\n  selectDisableButtons,\r\n} from './viewerSlice';\r\nimport initializeViewer from './initializeViewer';\r\n\r\nexport default () => {\r\n  const modelId = useSelector(selectModelId);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n  \r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Configurator Studio</h1>\r\n      <div className=\"header__buttons\">\r\n        <input id=\"model-id-input\"\r\n          value={modelId}\r\n          onChange={e => dispatch(setModelId(e.target.value))}\r\n        />\r\n        <button \r\n          id=\"displayButton\"    \r\n          className=\"header__button\"      \r\n          onClick={() => dispatch(initializeViewer(modelId))}\r\n        >Load Model\r\n        </button>        \r\n        <button \r\n          id=\"export-javascript\"\r\n          className=\"header__button\"\r\n          disabled={disableButtons}\r\n          onClick={() => dispatch(toggleModalDisplay())}>Export</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import Sketchfab from '@sketchfab/viewer-api';\r\nimport {\r\n    setSketchfabAPI,\r\n    setAnimations,\r\n    setControls,\r\n    toggleDisableButtons,\r\n    setSceneGraph,\r\n    setMaterials,\r\n    setMaterialNameSegmentMap,\r\n    setSurfaceOptionMap,\r\n    setSurfaceAttributeNameMap,\r\n} from './viewerSlice';\r\n\r\nexport default modelId => dispatch => {\r\n\r\n    dispatch(setControls([]));\r\n  \r\n    var iframe = document.getElementById('api-frame');\r\n    var version = '1.8.2';\r\n    var DEFAULT_URLID = 'f373c5bab8e7489fa12db2071471fe4e';\r\n    var DEFAULT_PREFIX = 'seat ';\t\t\r\n    \r\n    var CONFIG = {\r\n        urlid: modelId !== '' ? modelId : DEFAULT_URLID,\r\n        prefix: DEFAULT_PREFIX\r\n    };\r\n    var isSeeking;\r\n    var animationsList = [];\r\n    var current_anim;\r\n    var apiSkfb;\r\n    var pollTime, duration;\r\n    var timeSlider;\r\n  \r\n    pollTime = function() {\r\n          apiSkfb.getCurrentTime(function(err, time) {\r\n                if (!isSeeking) {\r\n                    var percentage = (100 * time) / duration;\r\n                    timeSlider.value = percentage;\r\n                                        \r\n                    var timeDisplay = document.getElementById('timeDisplay');\r\n                    timeDisplay.innerHTML = time.toFixed(2);\r\n                    if (time == 2) {\r\n                      apiSkfb.seekTo(1);\r\n                    }\r\n                requestAnimationFrame(pollTime);\r\n              }\r\n          });\r\n    };\r\n  \r\n    var Configurator = {\r\n        api: null,\r\n        config: null,\r\n        options: [],\r\n  \r\n        init: function (config, iframe) {\r\n            this.config = config;\r\n            var client = new Sketchfab(version, iframe);\r\n            client.init(config.urlid, {\r\n                ui_controls: 0,\r\n                graph_optimizer: 0,\r\n                ui_animations: 0,\r\n                ui_watermark: 0,\r\n                ui_inspector: 0,\r\n                ui_stop: 0,\r\n                ui_infos: 0,\r\n  \r\n                success: function onSuccess(api) {\r\n                    var controls = document.getElementById('animationControls');\r\n                    var buttonsText = `\r\n                        <div style=\"display: flex; justify-content: center;\">\r\n                          <p id=\"timeDisplay\"></p>\r\n                          <p id=\"animationName\" style=\"margin-left: 50px;\"></p>\r\n                        </div>\r\n                        <button id=\"play\">Play</button>\r\n                        <button id=\"pause\">Pause</button>\r\n                        <button id=\"previous\">Previous</button>\r\n                        <button id=\"next\">Next</button>\r\n                        <input \r\n                          id=\"timeSlider\" \r\n                          class=\"slider timeSlider\" \r\n                          style=\"width:100%\" \r\n                          type=\"range\" \r\n                          min=\"0\" \r\n                          max=\"100\" \r\n                          step=\"0.1\" \r\n                          value=\"0\"\r\n                        />\r\n                    `;\r\n                \r\n                    controls.innerHTML = buttonsText;\r\n  \r\n                    apiSkfb = api;\r\n                    dispatch(setSketchfabAPI(api));\r\n                    api.start();\r\n                    api.addEventListener('viewerready', function () {\r\n                        this.api = api;\r\n                        api.pause();\r\n  \r\n                        api.getAnimations(function(err, animations) {\r\n                            animationsList = animations;\r\n  \r\n                            dispatch(setAnimations(animations));\r\n  \r\n                            if (animations.length == 0) {                            \r\n                                var controls = document.getElementById('animationControls');\r\n                                controls.innerHTML = \"\";\r\n                            } else {  \r\n                                document.getElementById('pause').addEventListener('click', function() {\r\n                                    api.pause();\r\n                                });\r\n      \r\n                                document.getElementById('play').addEventListener('click', function() {\r\n                                    api.play();\r\n                                });\r\n      \r\n                                document.getElementById('previous').addEventListener('click', function() {\r\n                                    if (current_anim === 0) current_anim = animationsList.length;\r\n                                    current_anim--;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n                    \r\n                                document.getElementById('next').addEventListener('click', function() {\r\n                                    current_anim++;\r\n                                    if (current_anim === animationsList.length) current_anim = 0;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n  \r\n                                var animationName = document.getElementById('animationName');\r\n                                animationName.innerHTML = animationsList[0][1];\r\n                                current_anim = 0;\r\n                                api.setCurrentAnimationByUID(animations[current_anim][0]);\r\n                                duration = animations[current_anim][2];\r\n                                isSeeking = false;\r\n                                timeSlider = document.getElementById('timeSlider');\r\n            \r\n                                timeSlider.addEventListener('change', function() {\r\n                                    isSeeking = false;\r\n  \r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                });\r\n            \r\n                                timeSlider.addEventListener('input', function() {\r\n                                    isSeeking = true;\r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                    api.pause();\r\n                                    api.seekTo(time);\r\n                                });\r\n                                \r\n                                pollTime();\r\n                            }\r\n                        });\r\n  \r\n                        \r\n                        dispatch(toggleDisableButtons());\r\n                        \r\n                        api.getSceneGraph(function(err, result) {\r\n                            if (err) {\r\n                                console.log('Error getting nodes');\r\n                                return;\r\n                            }                  \r\n                            dispatch(setSceneGraph(result))        \r\n                        });\r\n  \r\n                        api.getMaterialList(function(err, materials) {\r\n                            dispatch(setMaterials(materials));\r\n  \r\n                            let surfaceOptionMap = {};\r\n                            let materialNameSegmentMap = {};\r\n                            let surfaceAttributeNameMap = {};\r\n                            \r\n                            for (let i=0; i<materials.length; ++i) {\r\n                              var matches = materials[i].name.match(/[a-zA-Z]*-[A-Z]+-[a-zA-Z]+/g);\r\n                            \r\n                              if (matches !== null) {\r\n                                let materialNameArray = materials[i].name.split(\"-\").filter(string => string != \"\")\r\n                                let geometryName = materialNameArray[0];\r\n                                let materialOptions = materials[i].name.match(/[A-Z]+-/g).map(option => option.replace(\"-\", \"\"));\r\n                                let primaryValue = materialOptions[0];\r\n                                \r\n                                // generate material name segment map\r\n                                for (let j=0; j<materialOptions.length; ++j) {\r\n                                  materialNameSegmentMap[materialOptions[j]] = materialOptions[j];\r\n                                }\r\n                                console.log(\"\\n\\nmaterialNameSegmentMap\")\r\n                                console.log(materialNameSegmentMap)\r\n  \r\n                                // generate select display\r\n                                let isNewUniqueGeometry = surfaceOptionMap[geometryName] === undefined;\r\n                                if (isNewUniqueGeometry) {\r\n                                  surfaceOptionMap[geometryName] = {}\r\n  \r\n                                  surfaceAttributeNameMap[geometryName] = [\"Attribute Name\"]\r\n                                  surfaceOptionMap[geometryName][materialOptions[0]] = [];\r\n                                  for (let j=1; j<materialOptions.length; ++j) {\r\n                                    surfaceAttributeNameMap[geometryName].push(\"Attribute Name\")\r\n                                    surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n                                  }\r\n                                } else {\r\n                                  let isNewUniquePrimaryValue = surfaceOptionMap[geometryName][primaryValue] === undefined\r\n                                  if (isNewUniquePrimaryValue) {\r\n                                    surfaceOptionMap[geometryName][primaryValue] = [];\r\n                                    for (let j=1; j<materialOptions.length; ++j) {\r\n                                      surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n                                    }\r\n                                  } else {\r\n                                    for (let j=1; j<materialOptions.length; ++j) {\r\n                                      let currentAttributeOptions = surfaceOptionMap[geometryName][primaryValue][j-1];\r\n                                      let isNewUniqueValue = currentAttributeOptions.indexOf(materialOptions[j]) === -1;\r\n                                      if (isNewUniqueValue) {\r\n                                        currentAttributeOptions.push(materialOptions[j])\r\n                                      }\r\n                                    }                                  \r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                            \r\n                            dispatch(setMaterialNameSegmentMap(materialNameSegmentMap))\r\n                            dispatch(setSurfaceOptionMap(surfaceOptionMap))\r\n                            dispatch(setSurfaceAttributeNameMap(surfaceAttributeNameMap))\r\n                        });\r\n                    }.bind(this));\r\n                }.bind(this),\r\n                error: function onError() {\r\n                    console.log('Viewer error');\r\n                }\r\n            });\r\n        }\r\n    }\r\n  \r\n    Configurator.init(CONFIG, iframe);\r\n  };\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n\r\n    return (        \r\n        <div class=\"viewer\">\r\n            <iframe \r\n                src=\"\" \r\n                id=\"api-frame\" \r\n                allowfullscreen mozallowfullscreen=\"true\" \r\n                webkitallowfullscreen=\"true\"\r\n            ></iframe>\r\n            <div id=\"animationControls\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleModalDisplay, \r\n\tselectControls, \r\n\tselectSceneGraph, \r\n\tselectModelId,\r\n\tselectSurfaceOptionMap,\r\n\tselectSurfaceConfigurationMode,\r\n\tselectMaterialNameSegmentMap,\r\n\tselectSurfaceAttributeNameMap,\r\n\tselectGroupingOptions,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch();\r\n\tconst controls = useSelector(selectControls);\r\n\tconst modelId = useSelector(selectModelId);\r\n\tconst sceneGraph = useSelector(selectSceneGraph);\r\n\tconst surfaceOptionMap = useSelector(selectSurfaceOptionMap);\r\n\tconst surfaceConfigurationMode = useSelector(selectSurfaceConfigurationMode)\r\n\tconst materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap)\r\n\tconst surfaceAttributeNameMap = useSelector(selectSurfaceAttributeNameMap)\r\n\tconst groupingOptions = useSelector(selectGroupingOptions);\r\n\r\n\tconst configurationMaps = {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\tsurfaceAttributeNameMap,\r\n\t\tgroupingOptions,\t\t\r\n\t}\r\n\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Add This To Your Page</h1>\r\n                </div>\r\n                <textarea id=\"js-output\" value={createJSExport(configurationMaps)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst createJSExport = (configurationMaps) => {\r\n\tconst {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\tsurfaceAttributeNameMap,\r\n\t\tgroupingOptions,\t\r\n\t} = configurationMaps;\r\n\r\n\treturn (\r\n`\r\n// Sketchfab Viewer API: Change Texture/material\r\nvar version = '1.8.2';\r\nvar uid = '${modelId === '' ? 'f373c5bab8e7489fa12db2071471fe4e' : modelId}';\r\nvar iframe = document.getElementById('api-frame');\r\nvar client = new window.Sketchfab(version, iframe);\r\n\r\nvar myMaterials;\r\n\r\nvar error = function() {\r\n\tconsole.error('Sketchfab API error');\r\n};\r\n\r\nvar controls = ${JSON.stringify(controls)}\r\n\r\nvar sceneGraph = ${JSON.stringify(sceneGraph)}\r\n\r\nvar groupingOptions = ${JSON.stringify(groupingOptions)}\r\n\r\nvar surfaceConfigurationMode = ${surfaceConfigurationMode};\r\nvar surfaceOptionMap = ${JSON.stringify(surfaceOptionMap)};\r\nvar materialNameSegmentMap = ${JSON.stringify(materialNameSegmentMap)};\r\nvar surfaceAttributeNameMap = ${JSON.stringify(surfaceAttributeNameMap)};\r\n\r\nvar animationObjects = {};\r\n\r\nvar controlsContainer = document.getElementById('sketchfab-lower-controls');\r\nvar toggleableItems = {};\r\nvar toggleableGroups = {};\r\n\r\nvar nameArrays = [];\r\nvar currentAnimation = \"\";\r\nvar currentAnimationEndTime = 0;\r\nvar isElementCategoryControlled = false;\r\nvar firstGroupingControlIndex = -1;\r\nvar appContainer = document.querySelector(\"div.sketchfab__container\")\r\n\r\nvar appWidth = Number(appContainer.style.width.replace(\"px\",\"\"))\r\nappContainer.style.display = \"block\"\r\n\r\nvar apiSkfb, pollTime;\r\n\r\nvar buildNodeNameArray = function(children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n\t\tif(children[i].name == undefined) {\r\n\t\t\tnameArrays.push({name: children[i].type, depth: depth, instanceID: children[i].instanceID});\r\n\t\t} else {\r\n\t\t\tnameArrays.push({name: children[i].name, depth: depth, instanceID: children[i].instanceID});\r\n\t\t}\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildNodeNameArray(children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar apiSkfb, pollTime;\r\n\r\n\r\npollTime = function() {\r\n\tapiSkfb.getCurrentTime(function(err, time) {\r\n\t\t\r\n\t\tif (currentAnimationEndTime > 0 && time >= currentAnimationEndTime) {\r\n\t\t\tapiSkfb.pause();\r\n\t\t}\r\n\t\trequestAnimationFrame(pollTime);\r\n\t});\r\n};\r\n\r\nvar globalTestMaterialID = \"\";\r\nvar success = function(api) {\r\n    apiSkfb = api;\r\n\tapi.start(function() {\r\n\t\tapi.addEventListener('viewerready', function() {\r\n\t\t\tapi.pause();\r\n            api.getSceneGraph(function(err, result) {\r\n                if (err) {\r\n                    console.log('Error getting nodes');\r\n                    return;\r\n                }\r\n\t\t\t\tbuildNodeNameArray(result.children, 0);\r\n\t\t\t\tconsole.log(\"sceneGraph[0]:\")\r\n\t\t\t\tconsole.log(result);\r\n            });\r\n\t\t\t\r\n\t\t\tapi.getMaterialList(function(err, materials) {\r\n\t\t\t\tmyMaterials = materials;\r\n\t\t\t\tif (surfaceConfigurationMode) {\r\n\t\t\t\t\tconfigureInitialSurfaces(api)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar animations = [];\r\n\t\t\tfor (let i = 0; i < controls.length; ++i) {\t\r\n\t\t\t\tif (controls[i].type == \"animation\") {\r\n\t\t\t\t\tvar animationControls = document.getElementById(\"sketchfab-animation-controls\")\r\n\t\t\t\t\tanimationControls.style.display = \"block\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar animationButtonContainer = document.getElementById(\"sketchfab-animation-buttons\")\r\n\t\t\t\t\tvar animationButton = document.createElement(\"button\")\r\n\t\t\t\t\tanimationButton.id = \"animation-\" + controls[i].id\r\n\t\t\t\t\tanimationButton.textContent = controls[i].name;\r\n\t\t\t\t\tanimationButton.addEventListener('click', function(e) {\r\n\t\t\t\t\t\tvar animationId = e.target.id.split(\"-\")[1]\r\n\t\t\t\t\t\tconsole.log(\"animationId:\")\r\n\t\t\t\t\t\tconsole.log(animationId)\r\n\t\t\t\t\t\tvar startTime = animationObjects[animationId].startTime;\r\n\t\t\t\t\t\tvar endTime = animationObjects[animationId].endTime;\r\n\t\t\t\t\t\tvar animationUID = animationObjects[animationId].uid;\r\n\t\t\t\t\t\tconsole.log(\"startTime:\")\r\n\t\t\t\t\t\tconsole.log(startTime)\r\n\t\t\t\t\t\tconsole.log(\"endTime:\")\r\n\t\t\t\t\t\tconsole.log(endTime)\r\n\t\t\t\t\t\tconsole.log(\"animationUID:\")\r\n\t\t\t\t\t\tconsole.log(animationUID)\r\n\t\t\t\t\t\tcurrentAnimationEndTime = endTime;\r\n\t\t\t\t\t\tapi.setCurrentAnimationByUID(animationUID);\r\n\t\t\t\t\t\tapi.seekTo(startTime);\r\n\t\t\t\t\t\tapi.play();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tanimationButtonContainer.appendChild(animationButton)\r\n\t\t\t\t\t\r\n\t\t\t\t\tanimations.push(controls[i]);\r\n\t\t\t\t\tanimationObjects[controls[i].id] = {name: controls[i].name, startTime: Number(controls[i].configuration.startTime), endTime: Number(controls[i].configuration.endTime), uid: controls[i].configuration.animationUID}; \r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (controls[i].type == \"surfaceConfiguration\") {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\");\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\tif (controls[i].type == \"color\") {\r\n\t\t\t\t\tvar resetBut = document.createElement(\"button\");\r\n\t\t\t\t\tresetBut.innerHTML = \"Reset\";\r\n\t\t\t\t\tresetBut.onclick = function(e) {\t\r\n\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\tm = JSON.parse(JSON.stringify(controls[i].entity));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(resetBut);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let j = 0; j < controls[i].additionalColors.length; ++j) {\r\n\t\t\t\t\t\tvar colorBut = document.createElement(\"button\");\r\n\r\n\t\t\t\t\t\tcolorBut.innerHTML = controls[i].additionalColors[j].name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcolorBut.id = controls[i].id + \"-\" + controls[i].name\r\n\t\t\t\t\t\tcolorBut.onclick = function(e) {\t\r\n\t\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.enable = true;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.enable = true;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.enable = false;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.factor = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(colorBut);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if (controls[i].type == \"toggle\") {\r\n\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\tvar toggleBut = document.createElement(\"button\");\r\n\t\t\t\t\ttoggleBut.innerHTML = \"Toggle \" + controls[i].name;\r\n\t\t\t\t\ttoggleBut.id = controls[i].entity.instanceID;\r\n\t\t\t\t\ttoggleBut.onclick = function(e) {\r\n\t\t\t\t\t\tvar isVisible = toggleableItems[e.target.id];\r\n\t\t\t\t\t\tif (isVisible == \"visible\") {\r\n\t\t\t\t\t\t\tapi.hide(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"hidden\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tapi.show(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(toggleBut);\r\n\t\t\t\t} else if (controls[i].type === \"category\") {\t\r\n\t\t\t\t\tisElementCategoryControlled = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar wrapper = document.createElement(\"div\")\r\n\t\t\t\t\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\t\t\t\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\t\t\t\tvar select = document.createElement(\"div\")\r\n\t\t\t\t\tselect.classList.add(\"sketchfab-select\")\r\n\t\t\t\t\tvar selectTrigger = document.createElement(\"div\")\r\n\t\t\t\t\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\t\t\t\tvar triggerSpan = document.createElement(\"span\")\r\n\t\t\t\t\tif (controls[i].configuration.isPrimary == true) {\r\n\t\t\t\t\t\ttriggerSpan.id = \"primaryCategory\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttriggerSpan.textContent = Object.keys(controls[i].configuration.designations)[0]\r\n\t\t\t\t\ttriggerSpan.id = \"triggerSpan-\" + i;\r\n\t\t\t\t\tif(controls[i].configuration.isPrimary) {\r\n\t\t\t\t\t\ttriggerSpan.classList.add(\"sketchfab-category\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttriggerSpan.classList.add(\"sketchfab-category\")\r\n\t\t\t\t\tselectTrigger.appendChild(triggerSpan)\r\n\t\t\t\t\tvar arrow = document.createElement(\"div\")\r\n\t\t\t\t\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\t\t\t\t\tselectTrigger.appendChild(arrow)\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar customOptions = document.createElement(\"div\")\r\n\t\t\t\t\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\t\t\t\t\tvar selectTitle = document.createElement(\"h3\")\r\n\t\t\t\t\tselectTitle.classList.add(\"sketchfab-title\")\r\n\t\t\t\t\tselectTitle.textContent = controls[i].name;\r\n\t\t\t\t\tcustomOptions.appendChild(selectTitle)\r\n\t\t\t\t\t\r\n\t\t\t\t\tselect.appendChild(selectTrigger)\r\n\t\t\t\t\tselect.appendChild(customOptions)\r\n\t\t\t\t\twrapper.appendChild(select)\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var j=0; j<Object.keys(controls[i].configuration.designations).length; ++j) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\tif (j===0) {\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar name = Object.keys(controls[i].configuration.designations)[j];\r\n\t\t\t\t\t\tvar humanReadable = Object.values(controls[i].configuration.designations)[j]\r\n\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\tcustomOption.id = name + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\tcustomOption.addEventListener('click', function() {\r\n\t\t\t\t\t\t\tconsole.log(\"BEGIN: customOption.click\")\r\n\t\t\t\t\t\t\tvar nameCode = this.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\tif (!this.classList.contains('selected')) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\t\t\t\t\t\t\tthis.classList.add('selected');\r\n\t\t\t\t\t\t\t\tthis.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-select__trigger span.sketchfab-category\")\r\n\t\t\t\t\t\t\tvar allowAnimations = true;\r\n\t\t\t\t\t\t\tfor (var k=0; k<allCategorySelects.length; ++k) {\r\n\t\t\t\t\t\t\t\tvar controlIndex = allCategorySelects[k].id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\tvar nameCode = allCategorySelects[k].textContent;\r\n\t\t\t\t\t\t\t\tconsole.log(\"nameCode:\")\r\n\t\t\t\t\t\t\t\tconsole.log(nameCode)\r\n\t\t\t\t\t\t\t\tconsole.log(\"controls[controlIndex].configuration.allowsAnimation:\")\r\n\t\t\t\t\t\t\t\tconsole.log(controls[controlIndex].configuration.allowsAnimation)\r\n\t\t\t\t\t\t\t\tif (controls[controlIndex].configuration.allowsAnimation.indexOf(nameCode) == -1) {\r\n\t\t\t\t\t\t\t\t\tallowAnimations = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar animationButtons = document.querySelectorAll(\"#sketchfab-animation-buttons button\")\r\n\t\t\t\t\t\t\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\t\t\t\t\t\t\tanimationButtons[k].disabled = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (allowAnimations) {\r\n\t\t\t\t\t\t\t\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\t\t\t\t\t\t\t\tanimationButtons[k].disabled = false;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconsole.log(\"END: customOption.click\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twrapper.addEventListener('click', function() {\r\n\t\t\t\t\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-select__trigger span\")\r\n\t\t\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\t\t\tvar primaryLetterCode = \"\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var j=0; j<allCategorySelects.length; ++j) {\r\n\t\t\t\t\t\t\tselectedPrefixes.push(allCategorySelects[j].textContent);\r\n\t\t\t\t\t\t\tif(allCategorySelects[j].className.includes(\"sketchfab-category\")) {\r\n\t\t\t\t\t\t\t\tfor (var k=0; k<groupingOptions.length; ++k) {\r\n\t\t\t\t\t\t\t\t\tif (groupingOptions[k].designation === allCategorySelects[j].textContent) {\r\n\t\t\t\t\t\t\t\t\t\tprimaryLetterCode = groupingOptions[k].capitalLetter;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var j=0; j<sceneGraph.length; ++j) {\r\n\t\t\t\t\t\t\tvar indexContainingCodes = j;\r\n\t\t\t\t\t\t\tif (sceneGraph[j].name === \"MatrixTransform\") {\r\n\t\t\t\t\t\t\t\tindexContainingCodes = j - 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar nodeNameArray = sceneGraph[indexContainingCodes].name.split(\"-\")\r\n\t\t\t\t\t\t\tvar mainDesignation = nodeNameArray[0];\r\n\t\t\t\t\t\t\tvar letterCode = nodeNameArray[1];\r\n\t\t\t\t\t\t\tapi.hide(sceneGraph[indexContainingCodes].instanceID);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (selectedPrefixes.indexOf(mainDesignation) > -1 && \r\n\t\t\t\t\t\t\t\t\tletterCode.includes(primaryLetterCode)) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tapi.show(sceneGraph[indexContainingCodes].instanceID);\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\r\n\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//show/hide to OG specification\r\n\t\t\tif (isElementCategoryControlled) {\r\n\t\t\t\twindow.addEventListener('click', function(e) {\r\n\t\t\t\t\tfor (const select of document.querySelectorAll('.sketchfab-select')) {\r\n\t\t\t\t\t\tif (!select.contains(e.target)) {\r\n\t\t\t\t\t\t\tselect.classList.remove('sketchfab-select-open');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-select__trigger span.sketchfab-category\")\r\n\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i<allCategorySelects.length; ++i) {\r\n\t\t\t\t\tselectedPrefixes.push(allCategorySelects[i].textContent);\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar primaryLetterCode = \"\";\r\n\t\t\t\tvar allowAnimations = true;\r\n\t\t\t\tfor (var i=0; i<allCategorySelects.length; ++i) {\r\n\t\t\t\t\tselectedPrefixes.push(allCategorySelects[i].value);\r\n\t\t\t\t\tif(allCategorySelects[i].id === \"primaryCategory\") {\r\n\t\t\t\t\t\tprimaryLetterCode = groupingOptions[i].capitalLetter;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar controlIndex = allCategorySelects[i].id.split(\"-\")[1]\r\n\t\t\t\t\tvar nameCode = allCategorySelects[i].textContent;\r\n\t\t\t\t\tif (controls[controlIndex].configuration.allowsAnimation.indexOf(nameCode) == -1) {\r\n\t\t\t\t\t\tallowAnimations = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar animationButtons = document.querySelectorAll(\"#sketchfab-animation-buttons button\")\r\n\t\t\t\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\t\t\t\tanimationButtons[k].disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (allowAnimations) {\r\n\t\t\t\t\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\t\t\t\t\tanimationButtons[k].disabled = false;\r\n\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i<sceneGraph.length; ++i) {\r\n\t\t\t\t\tvar indexContainingCodes = i;\r\n\t\t\t\t\tif (sceneGraph[i].name === \"MatrixTransform\") {\r\n\t\t\t\t\t\tindexContainingCodes = i - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar nodeNameArray = sceneGraph[indexContainingCodes].name.split(\"-\")\r\n\t\t\t\t\tvar mainDesignation = nodeNameArray[0];\r\n\t\t\t\t\tvar letterCode = nodeNameArray[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tapi.hide(sceneGraph[indexContainingCodes].instanceID);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (selectedPrefixes.indexOf(mainDesignation) > -1 && \r\n\t\t\t\t\t\t\tletterCode.includes(primaryLetterCode)) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.show(sceneGraph[indexContainingCodes].instanceID);\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (animations.length > 0) {\r\n\t\t\t\tpollTime();\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (surfaceConfigurationMode) {\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i<Object.keys(surfaceOptionMap).length; ++i) {\r\n\t\t\t\t\tvar surfaceName = Object.keys(surfaceOptionMap)[i]\r\n\t\t\t\t\tvar primaryInitialValue = Object.keys(surfaceOptionMap[surfaceName])[0]\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (j=0; j<surfaceAttributeNameMap[surfaceName].length; ++j) {\r\n\t\t\t\t\t\tif(j === 0) {\r\n\t\t\t\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar wrapper = document.createElement(\"div\")\r\n\t\t\t\t\t\t\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\t\t\t\t\t\t/* set wrapper width */\r\n\t\t\t\t\t\t\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar select = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselect.classList.add(\"sketchfab-select\")\r\n\t\t\t\t\t\t\tvar selectTrigger = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\t\t\t\t\t\tvar triggerSpan = document.createElement(\"span\")\r\n\t\t\t\t\t\t\ttriggerSpan.id = \"primarySurfaceElement-\" + surfaceName;\r\n\t\t\t\t\t\t\ttriggerSpan.textContent = Object.keys(surfaceOptionMap[surfaceName])[0]\r\n\t\t\t\t\t\t\ttriggerSpan.id = \"triggerSpan-\" + i;\r\n\t\t\t\t\t\t\ttriggerSpan.classList.add(surfaceName + \"-triggerSpan\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(triggerSpan)\r\n\t\t\t\t\t\t\tvar arrow = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(arrow)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar customOptions = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\t\t\t\t\t\t\tvar selectTitle = document.createElement(\"h3\")\r\n\t\t\t\t\t\t\tselectTitle.classList.add(\"sketchfab-title\")\r\n\t\t\t\t\t\t\tselectTitle.textContent = surfaceName + \" - \" + surfaceAttributeNameMap[surfaceName][j];\r\n\t\t\t\t\t\t\tcustomOptions.appendChild(selectTitle)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tselect.appendChild(selectTrigger)\r\n\t\t\t\t\t\t\tselect.appendChild(customOptions)\r\n\t\t\t\t\t\t\twrapper.appendChild(select)\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<Object.keys(surfaceOptionMap[surfaceName]).length; ++k) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\tif (k===0) {\r\n\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar name = Object.keys(surfaceOptionMap[surfaceName])[k]\r\n\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + surfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\t\tvar nameCode = this.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\t\t\tvar currentSurfaceName = this.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\tvar surfaceElementIndex = this.id.split(\"-\")[2]\r\n\t\t\t\t\t\t\t\t\tif (!this.classList.contains('selected')) {\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tthis.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\t\t\t\t\t\t\t\t\tthis.classList.add('selected');\r\n\t\t\t\t\t\t\t\t\t\tthis.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar subPrimaryOptionArrays = document.getElementsByClassName(currentSurfaceName + \"-options\")\r\n\t\t\t\t\t\t\t\t\tvar primaryAttributeName = surfaceAttributeNameMap[currentSurfaceName][0]\r\n\t\t\t\t\t\t\t\t\tfor(var l=0; l<subPrimaryOptionArrays.length; ++l) {\r\n\t\t\t\t\t\t\t\t\t\tvar subPrimaryOptionElementName = subPrimaryOptionArrays[l].id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\t\tsubPrimaryOptionArrays[l].innerHTML = \"\";\r\n\t\t\t\t\t\t\t\t\t\tvar triggerSpan = document.getElementById(\"triggerSpan\" + \"-\" + currentSurfaceName + \"-\" + surfaceAttributeNameMap[currentSurfaceName][l+1] + \"-\" + (l+1))\r\n\t\t\t\t\t\t\t\t\t\ttriggerSpan.textContent = surfaceOptionMap[currentSurfaceName][nameCode][l][0]\r\n\t\t\t\t\t\t\t\t\t\tfor (var m=0; m<surfaceOptionMap[currentSurfaceName][nameCode][l].length; ++m) {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\t\t\t\tif (m===0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvar name = surfaceOptionMap[currentSurfaceName][nameCode][l][m]\r\n\t\t\t\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + surfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar nameCode = this.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (!this.classList.contains('selected')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.classList.add('selected');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar currentSurfaceName = this.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar attributeIndex = this.id.split(\"-\")[2]\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar attributeName = surfaceAttributeNameMap[currentSurfaceName][attributeIndex]\r\n\t\t\t\t\t\t\t\t\t\t\t\tconfigureMaterials(currentSurfaceName, attributeName, api)\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tsubPrimaryOptionArrays[l].appendChild(customOption)\r\n\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconfigureMaterials(currentSurfaceName, primaryAttributeName, api)\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\twrapper.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-select__trigger span\")\r\n\t\t\t\t\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\t\t\t\t\tvar primaryLetterCode = \"\";\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar wrapper = document.createElement(\"div\")\r\n\t\t\t\t\t\t\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\t\t\t\t\t\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\t\t\t\t\t\tvar select = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselect.classList.add(\"sketchfab-select\")\r\n\t\t\t\t\t\t\tvar selectTrigger = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\t\t\t\t\t\tvar triggerSpan = document.createElement(\"span\")\r\n\t\t\t\t\t\t\ttriggerSpan.textContent = surfaceOptionMap[surfaceName][primaryInitialValue][j-1][0]\r\n\t\t\t\t\t\t\ttriggerSpan.id = \"triggerSpan-\" + surfaceName + \"-\" + surfaceAttributeNameMap[surfaceName][j] + \"-\" + j;\r\n\t\t\t\t\t\t\ttriggerSpan.classList.add(surfaceName + \"-triggerSpan\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(triggerSpan)\r\n\t\t\t\t\t\t\tvar arrow = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(arrow)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar customOptions = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tcustomOptions.id = surfaceName + \"-\" + surfaceAttributeNameMap[surfaceName][j] + \"-options\";\r\n\t\t\t\t\t\t\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\t\t\t\t\t\t\tcustomOptions.classList.add(surfaceName + \"-options\")\r\n\t\t\t\t\t\t\tvar selectTitle = document.createElement(\"h3\")\r\n\t\t\t\t\t\t\tselectTitle.classList.add(\"sketchfab-title\")\r\n\t\t\t\t\t\t\tselectTitle.textContent = surfaceName + \" - \" + surfaceAttributeNameMap[surfaceName][j];\r\n\t\t\t\t\t\t\tcustomOptions.appendChild(selectTitle)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tselect.appendChild(selectTrigger)\r\n\t\t\t\t\t\t\tselect.appendChild(customOptions)\r\n\t\t\t\t\t\t\twrapper.appendChild(select)\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<surfaceOptionMap[surfaceName][primaryInitialValue][j-1].length; ++k) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\tif (k===0) {\r\n\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar name = surfaceOptionMap[surfaceName][primaryInitialValue][j-1][k]\r\n\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + surfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\t\tvar nameCode = this.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (!this.classList.contains('selected')) {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tthis.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\t\t\t\t\t\t\t\t\tthis.classList.add('selected');\r\n\t\t\t\t\t\t\t\t\t\tthis.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar currentSurfaceName = this.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\tvar attributeIndex = this.id.split(\"-\")[2]\r\n\t\t\t\t\t\t\t\t\tvar attributeName = surfaceAttributeNameMap[currentSurfaceName][attributeIndex]\r\n\t\t\t\t\t\t\t\t\tconfigureMaterials(currentSurfaceName, attributeName, api)\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\twrapper.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-select__trigger span\")\r\n\t\t\t\t\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\t\t\t\t\tvar primaryLetterCode = \"\";\t\t\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\nclient.init(uid, {\r\n\tsuccess: success,\r\n\terror: error,\r\n\tautostart: 1,\r\n\tpreload: 1,\r\n\tui_animations: 0,\r\n\tui_watermark: 0,\r\n\tui_inspector: 0,\r\n\tui_stop: 0,\r\n\tui_infos: 0,\r\n});\r\n\r\nvar configureMaterials = function(currentSurfaceName, currentElementName, api) {\r\n\t\t\t\t\t\t\t\r\n\t//get array of selected values\r\n\tvar relevantSelects = document.getElementsByClassName(currentSurfaceName + \"-triggerSpan\")\r\n\t\r\n\t//build name string via accessing selected values\r\n\tvar materialNameString = currentSurfaceName;\r\n\tfor (var k=0; k<relevantSelects.length; ++k) {\r\n\t\tmaterialNameString += \"-\" + relevantSelects[k].textContent;\r\n\t}\r\n\t\r\n\tvar newMaterial;\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name.startsWith(materialNameString)) {\r\n\t\t\tnewMaterial = JSON.parse(JSON.stringify(myMaterials[k]));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name === currentSurfaceName) {\r\n\t\t\tmyMaterials[k].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\tmyMaterials[k].reflection = newMaterial.reflection;\r\n\t\t\tmyMaterials[k].reflector = newMaterial.reflector;\r\n\t\t\tmyMaterials[k].shadeless = newMaterial.shadeless;\r\n\t\t\tapi.setMaterial(myMaterials[k], function() {console.log(\"material updated\")})\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar configureInitialSurfaces = function(api) {\r\n\t\r\n\tvar surfaceNames = Object.keys(surfaceOptionMap)\t\t\t\t\r\n\t\r\n\tfor (var i=0; i<surfaceNames.length; ++i) {\r\n\t\tvar currentSurfaceName = surfaceNames[i];\r\n\r\n\t\tvar firstPrimaryOption = Object.keys(surfaceOptionMap[currentSurfaceName])[0]\r\n\t\tvar optionsArray = surfaceOptionMap[currentSurfaceName][firstPrimaryOption]\r\n\t\tvar materialNameString = currentSurfaceName + \"-\" + firstPrimaryOption;\r\n\t\t\r\n\t\t\r\n\t\tfor (var k=0; k<optionsArray.length; ++k) {\r\n\t\t\tmaterialNameString += \"-\" + optionsArray[k][0];\r\n\t\t}\r\n\t\t\r\n\t\tvar newMaterial;\r\n\t\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\t\tif (myMaterials[k].name.startsWith(materialNameString)) {\r\n\t\t\t\tnewMaterial = JSON.parse(JSON.stringify(myMaterials[k]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\t\tif (myMaterials[k].name === currentSurfaceName) {\r\n\t\t\t\tmyMaterials[k].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\t\tmyMaterials[k].reflection = newMaterial.reflection;\r\n\t\t\t\tmyMaterials[k].reflector = newMaterial.reflector;\r\n\t\t\t\tmyMaterials[k].shadeless = newMaterial.shadeless;\r\n\t\t\t\tapi.setMaterial(myMaterials[k], function() {console.log(\"material updated\")})\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\t\t\r\n}\r\n\r\n\r\n\r\n\r\n`\r\n)\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createControl, toggleOptionChoiceModalDisplay } from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"control-choice-modal\">\r\n            <div className=\"control-choice-content\">\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"color\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}\r\n                >Color</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"toggle\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Toggle</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"category\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Element Category</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"surfaceConfiguration\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Surface Configuration</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"animation\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Animation</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectMaterials, \r\n  updateControl,\r\n} from './viewerSlice';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch(); \r\n    const { option } = props\r\n    const materials = useSelector(selectMaterials); \r\n\r\n    return (\r\n    <div>\r\n      <div className=\"input__container\">\r\n        <label htmlFor=\"materials\">Material:</label>\r\n        {renderColorsOption(option, materials, dispatch)}\r\n      </div>\r\n      <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n        {renderAdditionalColors(option.id, option.additionalColors, dispatch)}\r\n      </div>\r\n      <div className=\"input__container\">\r\n        <button \r\n          id=\"addColor\"\r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.additionalColors == undefined || option.additionalColors == null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"additionalColors\", \r\n                  value: [{color:\"#ffffff\", name: \"white\", colorRGB: [1,1,1]}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newColors = [];\r\n              for (let i = 0; i<option.additionalColors.length; ++i) {\r\n                newColors[i] = option.additionalColors[i];\r\n              }\r\n              newColors.push({color: \"#ffffff\", name: \"default\", colorRGB: [1,1,1]});\r\n              dispatch(updateControl({id: option.id, key: \"additionalColors\", value: newColors}));\r\n            }\r\n          }}\r\n        >+ Add Color</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst renderAdditionalColors = (id, additionalColors, dispatch) => {\r\n    if (additionalColors == null || additionalColors == undefined) {\r\n      return <div></div>\r\n    } else {\r\n      return additionalColors.map((color, index, array) => (\r\n        <div className=\"input__container\">\r\n          <label htmlFor=\"defaultColor\">Alternate Color:</label>\r\n          <input \r\n            type=\"color\" \r\n            name=\"additionalColor\" \r\n            id={`${id}-${index}-additionalColor`} \r\n            value={additionalColors[index].color}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = e.target.value;\r\n                  newColor.colorRGB = hexRgb(e.target.value, {format: 'array'}).map(num => num/255);\r\n                  newColor.name = array[i].name;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={additionalColors[index].name}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = e.target.value;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n        </div>\r\n      ))\r\n    }\r\n  }\r\n  \r\nconst renderColorsOption = (option, materials, dispatch) => {\r\n  \r\n    const materialsHtml = materials.map((material, index) => <option value={index}>{material.name}</option>)\r\n    materialsHtml.unshift(<option value=\"none\">Select a Material</option>)\r\n\r\n    return (\r\n      <select \r\n        name=\"materials\" \r\n        id=\"materials\"\r\n        onChange={(e) => {\r\n          dispatch(updateControl({id: option.id, key: \"entityIndex\", value: e.target.value }));\r\n          dispatch(updateControl({id: option.id, key: \"entity\", value: materials[e.target.value] }));\r\n        }}\r\n        value={option.entityIndex}\r\n      >\r\n        {materialsHtml}\r\n      </select>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => <option value={node.instanceID}>{addDashes(node.depth)}{node.name}</option>)\r\n    sceneGraphHtml.unshift(<option value={0}>Select a Node</option>)\r\n  \r\n    return (\r\n      <select \r\n        name=\"nodes\" \r\n        id=\"nodes\"\r\n        className=\"material__select\"\r\n        value={option.entity.instanceID}\r\n        onChange={e => dispatch(updateControl({id: option.id, key: \"entity\", value: {instanceID: e.target.value}}))}\r\n      >\r\n        {sceneGraphHtml}\r\n      </select>\r\n    )\r\n}\r\n  \r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n  setGroupingOptions,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    let uniqueStrings = [];\r\n    let categoryOptions = [];\r\n    for (let i=0; i<sceneGraph.length; ++i) {\r\n      let nodeNameArray = sceneGraph[i].name.split(\"-\").filter(string => string != \"\")\r\n      let mainDesignation = nodeNameArray[0];\r\n      let capitalLetter = nodeNameArray[1];\r\n      let detailedTitle = nodeNameArray[2];\r\n      for (let i=3; i<nodeNameArray.length; ++i) {\r\n        detailedTitle += nodeNameArray[i];\r\n      }\r\n\r\n      const irrelevantStrings = [\"Group\", \"RootNode\", \"MatrixTransform\"];\r\n      if (uniqueStrings.indexOf(mainDesignation) == -1 &&\r\n        irrelevantStrings.indexOf(mainDesignation) == -1) {\r\n        uniqueStrings.push(mainDesignation);\r\n        categoryOptions.push({\r\n          instanceID: sceneGraph[i].instanceID,\r\n          designation: mainDesignation,\r\n          capitalLetter: capitalLetter,\r\n          detailedTitle: detailedTitle,\r\n        })\r\n      }\r\n    }\r\n    dispatch(setGroupingOptions(categoryOptions))\r\n\r\n    const renderDesignationMultiselect = () => {\r\n      return categoryOptions.map((groupingOption, index) => {\r\n        \r\n        return (\r\n          <div key={`element-${option.id}-${index}`}>\r\n            <div style={{display: \"flex\"}}>\r\n              <div style={{display: \"flex\", flex: \"1 1 auto\"}}>\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={option.configuration.designations[groupingOption.designation] != undefined}\r\n                  onChange={() => {                 \r\n                    let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                    let newConfiguration = {};\r\n                    \r\n                    if (newDesignations[groupingOption.designation] != undefined) {\r\n                      delete newDesignations[groupingOption.designation];\r\n                      newConfiguration = {\r\n                        isPrimary: option.configuration.isPrimary,\r\n                        designations: newDesignations,\r\n                        allowsAnimation: option.configuration.allowsAnimation.filter(a => a != groupingOption.designation)\r\n                      }\r\n                    } else {\r\n                      newDesignations[groupingOption.designation] = \"\";\r\n                      let newDisablesAnimation = option.configuration.allowsAnimation.map(a => a)\r\n                      newDisablesAnimation.push(groupingOption.designation)\r\n                      newConfiguration = {\r\n                        isPrimary: option.configuration.isPrimary,\r\n                        designations: newDesignations,\r\n                        allowsAnimation: newDisablesAnimation,\r\n                      }\r\n                    }\r\n                    dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                  }}\r\n                />\r\n                <div>{groupingOption.designation}</div>\r\n              </div>\r\n              <div>Animation:</div>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={option.configuration.allowsAnimation.includes(groupingOption.designation)}\r\n                onChange={() => {\r\n                  let newConfiguration = {};                  \r\n                  let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                  if (option.configuration.allowsAnimation.includes(groupingOption.designation)) {\r\n                    newConfiguration = {\r\n                      isPrimary: option.configuration.isPrimary,\r\n                      designations: newDesignations,\r\n                      allowsAnimation: option.configuration.allowsAnimation.filter(a => a != groupingOption.designation)\r\n                    }\r\n                  } else {\r\n                    let newDisablesAnimation = option.configuration.allowsAnimation.map(a => a)\r\n                    newDisablesAnimation.push(groupingOption.designation)\r\n                    newConfiguration = {\r\n                      isPrimary: option.configuration.isPrimary,\r\n                      designations: newDesignations,\r\n                      allowsAnimation: newDisablesAnimation,\r\n                    }\r\n                  }\r\n                  dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{display: \"flex\"}}>\r\n              <div>Readable Name:</div>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter human readable name\"\r\n                disabled={option.configuration.designations[groupingOption.designation] == undefined}\r\n                value={option.configuration.designations[groupingOption.designation]}\r\n                onChange={e => {\r\n                  let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                  newDesignations[groupingOption.designation] = e.target.value;\r\n                  let newConfiguration = {\r\n                    isPrimary: option.configuration.isPrimary,\r\n                    designations: newDesignations,\r\n                    allowsAnimation: option.configuration.allowsAnimation.map(a => a),\r\n                  }\r\n                  dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))                  \r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <div style={{display: \"flex\", borderBottom: \"black 1px solid\", borderTop: \"black 1px solid\"}}>\r\n          <input \r\n            type=\"checkbox\" \r\n            checked={option.configuration.isPrimary}\r\n            onChange={(e) => {\r\n              console.log(\"\\n\\n\\n\\n\\ne.target.checked\")\r\n              console.log(e.target.checked)\r\n              console.log(e.target.value)\r\n              console.log(\"\\n\\n\\n\")\r\n              let newConfiguration = {...option.configuration, isPrimary: e.target.checked}\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          />\r\n          <div>Primary Category?</div>\r\n        </div>\r\n        <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n          {renderDesignationMultiselect()}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  setSurfaceConfigurationMode,\r\n  setSurfaceAttributeNameMap,\r\n  setMaterialNameSegmentMap,\r\n  selectMaterialNameSegmentMap,\r\n  selectSurfaceAttributeNameMap,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap);\r\n    const surfaceAttributeNameMap = useSelector(selectSurfaceAttributeNameMap);\r\n    dispatch(setSurfaceConfigurationMode(true))\r\n\r\n    const renderMaterialNameSegmentMap = () => Object.keys(materialNameSegmentMap).map(segment => (\r\n      <div>\r\n        {segment}\r\n        <input \r\n          value={materialNameSegmentMap[segment]} \r\n          onChange={(e) => {\r\n            let newMaterialSegmentMap = JSON.parse(JSON.stringify(materialNameSegmentMap))\r\n            newMaterialSegmentMap[segment] = e.target.value;\r\n            dispatch(setMaterialNameSegmentMap(newMaterialSegmentMap))\r\n          }}\r\n        />\r\n      </div>\r\n    ))\r\n\r\n    const renderAttributeName = surfaceName => surfaceAttributeNameMap[surfaceName].map((name, index) => (\r\n      <div>\r\n        Attribute {index}\r\n        <input\r\n          value={name}\r\n          onChange={(e) => {\r\n            let newSurfaceAttributeNames = JSON.parse(JSON.stringify(surfaceAttributeNameMap))\r\n            newSurfaceAttributeNames[surfaceName][index] = e.target.value;\r\n            dispatch(setSurfaceAttributeNameMap(newSurfaceAttributeNames))\r\n          }}\r\n        />\r\n      </div>\r\n    ))\r\n\r\n    const renderAttributeNames = () => Object.keys(surfaceAttributeNameMap).map(surfaceName => (\r\n      <div>\r\n        {surfaceName}\r\n        {renderAttributeName(surfaceName)}\r\n      </div>\r\n    ))\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n          <div>\r\n            <h4>Surfaces & Attributes</h4>\r\n            {renderAttributeNames()}\r\n          </div>\r\n          <div>\r\n            <h4>Code Name Map:</h4>\r\n            {renderMaterialNameSegmentMap()}\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectAnimations,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const animations = useSelector(selectAnimations);\r\n\r\n    const animationOptions = animations.map(animation => <option value={animation[0]}>{animation[1]}</option>)\r\n    animationOptions.unshift(<option value=\"none\">Select an Animation</option>)\r\n\r\n    return (\r\n      <div style={{display: \"flex\", alignItems: \"flex-start\", flexDirection: \"column\"}}>\r\n        <div>\r\n          <label>Animation:</label>\r\n          <select \r\n            name=\"animationSelect\"\r\n            value={option.configuration.animationUID}\r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                animationUID: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          >\r\n            {animationOptions}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"start\">Start Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"start\"\r\n            value={option.configuration.startTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                startTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end\">End Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"end\"\r\n            value={option.configuration.endTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                endTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleOptionChoiceModalDisplay, \r\n  selectControls, \r\n  selectDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n} from './viewerSlice';\r\nimport ColorPanel from './ColorPanel';\r\nimport TogglePanel from './TogglePanel';\r\nimport ElementCategoryPanel from './ElementCategoryPanel'\r\nimport SurfaceConfiguration from './SurfaceConfigurationPanel';\r\nimport AnimationPanel from './AnimationPanel';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nexport default () => {  \r\n  \r\n  const options = useSelector(selectControls);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n\r\n  const dispatch = useDispatch();\r\n\r\nconst renderPanel = (option) => {\r\n  if (option.type === \"color\") {\r\n    return <ColorPanel option={option} />;\r\n  } else if (option.type === \"toggle\") {\r\n    return <TogglePanel option={option} />;\r\n  } else if (option.type === \"animation\") {\r\n    return <AnimationPanel option={option} />;\r\n  } else if (option.type === \"category\") {\r\n    return <ElementCategoryPanel option ={option} />;\r\n  } else if (option.type === \"surfaceConfiguration\") {\r\n    return <SurfaceConfiguration />;\r\n  }\r\n}\r\n\r\nconst renderOptions = (options, dispatch) => {\r\n  \r\n  let optionsHtml = options.map((option, index, array) => (\r\n    <div className=\"single-option__panel\" key={`option-${index}`}>\r\n      <div className=\"single-option__header\">\r\n        <h3 className=\"single-option__title\">{option.id}. {option.type}</h3>\r\n        <button \r\n          id={`collapseButton${option.id}`}\r\n          className=\"collapse__button\"\r\n          onClick={(e) => dispatch(updateControl({\r\n            id: option.id,\r\n            key: \"isExpanded\",\r\n            value: !option.isExpanded\r\n          }))}\r\n        >\r\n          {option.isExpanded ? \"Collapse\" : \"Expand\"}\r\n        </button>\r\n        <button \r\n          title=\"Remove option\"\r\n          onClick={() => {\r\n            const newArray = array.filter(control => control.id !== option.id);\r\n            dispatch(setControls(newArray));\r\n          }}\r\n        >\r\n          <svg \r\n            fill=\"currentColor\" \r\n            preserveAspectRatio=\"xMidYMid meet\" \r\n            height=\"1em\" \r\n            width=\"1em\" \r\n            viewBox=\"0 0 40 40\" \r\n            style={{verticalAlign: \"middle\"}}\r\n          >\r\n            <g>\r\n              <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n              0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n              0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n              0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n              0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n              0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n              1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n              0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n              3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div style={{display: option.isExpanded ? \"block\" : \"none\"}}>\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Name:</p>\r\n          <input \r\n            type=\"text\" \r\n            name=\"colorName\" \r\n            id=\"colorName\" \r\n            value={option.name} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"name\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        {renderPanel(option)}\r\n      </div>\r\n    </div>\r\n  ))\r\n\r\n  return optionsHtml;\r\n}\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\", display: \"flex\", flexDirection: \"column\"}}>\r\n      <button \r\n        className=\"add-option add__button\" \r\n        disabled={disableButtons}\r\n        onClick={() => dispatch(toggleOptionChoiceModalDisplay())}\r\n      >+ Add Option</button>\r\n      <div className=\"single-option__panels__container\">\r\n        <ReactSortable list={options} setList={options => dispatch(setControls(options))}>\r\n          {renderOptions(options, dispatch)}\r\n        </ReactSortable>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  selectSketchfabAPI,\r\n  setSceneGraphIsVisible,\r\n  selectSceneGraphIsVisible,\r\n  setAllNodesVisible,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch()\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n    const sketchfabAPI = useSelector(selectSketchfabAPI);\r\n    const sceneGraphIsVisible = useSelector(selectSceneGraphIsVisible);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => {\r\n      return (\r\n        <div style={{display: \"flex\"}}>\r\n          <input \r\n            id={node.instanceID}\r\n            type=\"checkbox\" \r\n            checked={sceneGraphIsVisible[node.instanceID]}\r\n            onChange={(e) => {\r\n                if (e.target.checked) {\r\n                    sketchfabAPI.show(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: true}))\r\n                } else {\r\n                    sketchfabAPI.hide(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: false}))\r\n                }\r\n            }}\r\n          />\r\n          <div className=\"node-name\">{addDashes(node.depth)}{node.name}</div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    sceneGraphHtml.unshift(\r\n      <div style={{display: \"flex\",borderBottom: \"1px solid black\"}}>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={Object.values(sceneGraphIsVisible).reduce((accum, curr) => accum && curr)}\r\n          onChange={(e) => {\r\n            dispatch(setAllNodesVisible(e.target.checked))\r\n          }}\r\n        />\r\n        <div className=\"node-name\">All Nodes</div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n        <div id=\"nodeControls\">\r\n            {sceneGraphHtml}\r\n        </div>\r\n        <div id=\"animationControls\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    setViewMode,\r\n    selectViewMode,\r\n    selectDisableButtons,\r\n} from './viewerSlice';\r\nimport OptionPanel from './OptionPanel';\r\nimport NodePanel from './NodePanel';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const viewMode = useSelector(selectViewMode);\r\n    const disableButtons = useSelector(selectDisableButtons);\r\n\r\n    let nodesButtonStyles = {\r\n        backgroundColor: viewMode == \"nodes\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let optionsButtonStyles = {\r\n        backgroundColor: viewMode == \"options\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    const renderPanel = (viewMode) => {\r\n        if (viewMode === \"options\") {\r\n            return <OptionPanel />\r\n        } else if (viewMode === \"nodes\") {\r\n            return <NodePanel />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"control-menu\">\r\n            <div style={{display: \"flex\"}}>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={nodesButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"nodes\"))}\r\n                >Nodes</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={optionsButtonStyles}\r\n                    onClick={() => dispatch(setViewMode(\"options\"))}\r\n                >Options</button>\r\n            </div>\r\n            {renderPanel(viewMode)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Viewer from './components/Viewer'\r\nimport ExportModal from './components/ExportModal';\r\nimport OptionChoiceModal from './components/OptionChoiceModal';\r\nimport ControlMenu from './components/ControlMenu';\r\nimport './App.css';\r\nimport './globals';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <Viewer />\r\n        <ControlMenu />\r\n        <ExportModal />\r\n        <OptionChoiceModal />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport viewerReducer from '../components/viewerSlice';\r\nimport logger from 'redux-logger';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    viewer: viewerReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}