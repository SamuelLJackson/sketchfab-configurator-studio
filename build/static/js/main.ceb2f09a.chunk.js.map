{"version":3,"sources":["globals.js","components/viewerSlice.js","components/Header.js","components/Viewer.js","components/ExportModal.js","components/OptionChoiceModal.js","components/ColorPanel.js","components/TogglePanel.js","components/GroupingPanel.js","components/AnimationPanel.js","components/OptionPanel.js","components/NodePanel.js","components/ControlMenu.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["window","onclick","event","modal","document","getElementById","target","style","display","initialState","modelId","materials","animations","sceneGraph","controls","disableButtons","latestControlId","sketchfabAPI","sceneGraphIsVisible","viewMode","groupingOptions","viewerSlice","createSlice","name","reducers","resetState","state","setSketchfabAPI","action","payload","setModelId","setMaterials","setAnimations","setSceneGraph","buildSceneGraph","children","setSceneGraphIsVisible","id","value","createControl","unshift","type","entityIndex","entity","instanceID","animationUID","groupMembers","isExpanded","setViewMode","setControls","toggleDisableButtons","updateControl","key","console","log","i","length","setGroupingOptions","setAllNodesVisible","Object","keys","show","hide","actions","selectModelId","viewer","selectMaterials","selectAnimations","selectControls","selectDisableButtons","selectSceneGraph","selectSketchfabAPI","selectSceneGraphIsVisible","selectViewMode","selectGroupingOptions","toggleModalDisplay","dispatch","currentStyle","toggleOptionChoiceModalDisplay","depth","undefined","push","useSelector","useDispatch","className","onChange","e","onClick","isSeeking","current_anim","apiSkfb","pollTime","duration","timeSlider","iframe","animationsList","getCurrentTime","err","time","percentage","innerHTML","toFixed","seekTo","requestAnimationFrame","api","config","options","init","this","Sketchfab","urlid","ui_infos","ui_controls","graph_optimizer","success","start","addEventListener","pause","getAnimations","play","setCurrentAnimationByUID","getSceneGraph","result","getMaterialList","m","bind","error","prefix","initializeViewer","disabled","class","src","allowfullscreen","mozallowfullscreen","webkitallowfullscreen","createJSExport","JSON","stringify","props","option","htmlFor","renderColorsOption","renderAdditionalColors","additionalColors","transferObject","color","colorRGB","newColors","map","index","array","newArray","newColor","hexRgb","format","num","materialsHtml","material","sceneGraphHtml","node","addDashes","number","dashes","uniqueStrings","nodeNameArray","split","filter","string","mainDesignation","capitalLetter","detailedTitle","indexOf","designation","renderDesignationMultiselect","grouping","groupingOption","flex","checked","designations","includes","newGroupings","groupings","a","allowsAnimation","newDesignations","newDisablesAnimation","uuidv4","title","fill","preserveAspectRatio","height","width","viewBox","verticalAlign","d","renderAdditionalGroupings","replace","c","r","Math","random","toString","animationOptions","animation","alignItems","flexDirection","startTime","endTime","overflow","renderOptions","control","renderPanel","ColorPanel","TogglePanel","AnimationPanel","borderBottom","values","reduce","accum","curr","nodesButtonStyles","backgroundColor","optionsButtonStyles","OptionPanel","NodePanel","App","Header","Viewer","ControlMenu","ExportModal","OptionChoiceModal","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","viewerReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ceb2f09a.chunk.js","sourcesContent":["// When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    var modal = document.getElementById(\"modal\");\r\n    if (event.target == modal) {\r\n      modal.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport Sketchfab from '@sketchfab/viewer-api';\r\n\r\nconst initialState = {\r\n  modelId: '',\r\n  materials: [],\r\n  animations: [],\r\n  sceneGraph: [],\r\n  controls: [],\r\n  disableButtons: true,\r\n  latestControlId: 0,\r\n  sketchfabAPI: null,\r\n  sceneGraphIsVisible: {},\r\n  viewMode: \"options\",\r\n  groupingOptions: [],\r\n};\r\n\r\nexport const viewerSlice = createSlice({\r\n  name: 'viewer',\r\n  initialState,\r\n  reducers: {\r\n    resetState: state => {\r\n      state = initialState;\r\n    },\r\n    setSketchfabAPI: (state, action) => {\r\n      state.sketchfabAPI = action.payload;\r\n    },\r\n    setModelId: (state, action) => {\r\n      state.modelId = action.payload;\r\n    },\r\n    setMaterials: (state, action) => {\r\n      state.materials = action.payload;\r\n    },\r\n    setAnimations: (state, action) => {\r\n      state.animations = action.payload;\r\n    },\r\n    setSceneGraph: (state, action) => {\r\n      buildSceneGraph(state, action.payload.children, 0);\r\n    },\r\n    setSceneGraphIsVisible: (state, action) => {\r\n      const { id, value } = action.payload;\r\n      state.sceneGraphIsVisible[id] = value;\r\n    },\r\n    createControl: (state, action) => {\r\n      state.latestControlId = state.latestControlId += 1;\r\n      let id = state.latestControlId;\r\n      state.controls.unshift({\r\n        type: action.payload,\r\n        id: id,\r\n        name: action.payload,\r\n        entityIndex: \"none\",\r\n        entity: {instanceID: 0},\r\n        animationUID: \"none\",\r\n        groupMembers: [],\r\n        isExpanded: true,\r\n      });\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.viewMode = action.payload\r\n    },\r\n    setControls: (state, action) => {\r\n      state.controls = action.payload;\r\n    },\r\n    toggleDisableButtons: (state) => {\r\n      state.disableButtons = false;\r\n    },\r\n    updateControl: (state, action) => {\r\n      const { id, key, value } = action.payload;\r\n      console.log(action.payload)\r\n      for (let i=0; i<state.controls.length; ++i) {\r\n        if (state.controls[i].id == id) {\r\n          state.controls[i][key] = value;\r\n        }\r\n      }\r\n    },\r\n    setGroupingOptions: (state, action) => {\r\n      state.groupingOptions = action.payload;\r\n    },\r\n    setAllNodesVisible: (state, action) => {\r\n      for(let i=0; i<Object.keys(state.sceneGraphIsVisible).length; ++i) {\r\n        if(action.payload) {\r\n          state.sketchfabAPI.show(Object.keys(state.sceneGraphIsVisible)[i])\r\n        } else {\r\n          state.sketchfabAPI.hide(Object.keys(state.sceneGraphIsVisible)[i])\r\n        }\r\n        state.sceneGraphIsVisible[Object.keys(state.sceneGraphIsVisible)[i]] = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  resetState,\r\n  setModelId, \r\n  createControl, \r\n  toggleDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n  setSceneGraphIsVisible,\r\n  setViewMode,\r\n  setGroupingOptions,\r\n  setAllNodesVisible,\r\n} = viewerSlice.actions;\r\n\r\nexport const selectModelId = state => state.viewer.modelId;\r\n\r\nexport const selectMaterials = state => state.viewer.materials;\r\n\r\nexport const selectAnimations = state => state.viewer.animations;\r\n\r\nexport const selectControls = state => state.viewer.controls;\r\n\r\nexport const selectDisableButtons = state => state.viewer.disableButtons;\r\n\r\nexport const selectSceneGraph = state => state.viewer.sceneGraph;\r\n\r\nexport const selectSketchfabAPI = state => state.viewer.sketchfabAPI;\r\n\r\nexport const selectSceneGraphIsVisible = state => state.viewer.sceneGraphIsVisible;\r\n\r\nexport const selectViewMode = state => state.viewer.viewMode;\r\n\r\nexport const selectGroupingOptions = state => state.viewer.groupingOptions;\r\n\r\nexport const toggleModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const toggleOptionChoiceModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('control-choice-modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const initializeViewer = modelId => dispatch => {\r\n\r\n  dispatch(viewerSlice.actions.setControls([]));\r\n\r\n  var iframe = document.getElementById('api-frame');\r\n  var version = '1.8.2';\r\n  var DEFAULT_URLID = 'f373c5bab8e7489fa12db2071471fe4e';\r\n  var DEFAULT_PREFIX = 'seat ';\t\t\r\n  \r\n  var CONFIG = {\r\n      urlid: modelId !== '' ? modelId : DEFAULT_URLID,\r\n      prefix: DEFAULT_PREFIX\r\n  };\r\n  var isSeeking;\r\n  var animationsList = [];\r\n  var current_anim;\r\n  var apiSkfb;\r\n  var pollTime, duration;\r\n  var timeSlider;\r\n\r\n  pollTime = function() {\r\n        apiSkfb.getCurrentTime(function(err, time) {\r\n            if (!isSeeking) {\r\n                var percentage = (100 * time) / duration;\r\n                timeSlider.value = percentage;\r\n                                    \r\n                var timeDisplay = document.getElementById('timeDisplay');\r\n                timeDisplay.innerHTML = time.toFixed(2);\r\n                if (time == 2) {\r\n                  apiSkfb.seekTo(1);\r\n                }\r\n            }\r\n            requestAnimationFrame(pollTime);\r\n        });\r\n  };\r\n\r\n  var Configurator = {\r\n      api: null,\r\n      config: null,\r\n      options: [],\r\n\r\n      init: function (config, iframe) {\r\n          this.config = config;\r\n          var client = new Sketchfab(version, iframe);\r\n          client.init(config.urlid, {\r\n              ui_infos: 0,\r\n              ui_controls: 0,\r\n              graph_optimizer: 0,\r\n              success: function onSuccess(api) {\r\n                  var controls = document.getElementById('animationControls');\r\n                  var buttonsText = `\r\n                      <div style=\"display: flex; justify-content: center;\">\r\n                        <p id=\"timeDisplay\"></p>\r\n                        <p id=\"animationName\" style=\"margin-left: 50px;\"></p>\r\n                      </div>\r\n                      <button id=\"play\">Play</button>\r\n                      <button id=\"pause\">Pause</button>\r\n                      <button id=\"previous\">Previous</button>\r\n                      <button id=\"next\">Next</button>\r\n                      <input \r\n                        id=\"timeSlider\" \r\n                        class=\"slider timeSlider\" \r\n                        style=\"width:100%\" \r\n                        type=\"range\" \r\n                        min=\"0\" \r\n                        max=\"100\" \r\n                        step=\"0.1\" \r\n                        value=\"0\"\r\n                      />\r\n                  `;\r\n              \r\n                  controls.innerHTML = buttonsText;\r\n\r\n                  apiSkfb = api;\r\n                  dispatch(viewerSlice.actions.setSketchfabAPI(api));//JSON.parse(JSON.stringify(new A()))\r\n                  api.start();\r\n                  api.addEventListener('viewerready', function () {\r\n                      this.api = api;\r\n                      api.pause();\r\n\r\n                      api.getAnimations(function(err, animations) {\r\n                          console.log(animations);          \r\n                          animationsList = animations;\r\n\r\n                          dispatch(viewerSlice.actions.setAnimations(animations));\r\n\r\n                          if (animations.length == 0) {                            \r\n                              var controls = document.getElementById('animationControls');\r\n                              controls.innerHTML = \"\";\r\n                          } else {  \r\n                              document.getElementById('pause').addEventListener('click', function() {\r\n                                  api.pause();\r\n                              });\r\n    \r\n                              document.getElementById('play').addEventListener('click', function() {\r\n                                  api.play();\r\n                              });\r\n    \r\n                              document.getElementById('previous').addEventListener('click', function() {\r\n                                  if (current_anim === 0) current_anim = animationsList.length;\r\n                                  current_anim--;\r\n                  \r\n                                  api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                  api.seekTo(0);\r\n                                  duration = animationsList[current_anim][2];\r\n                                  var animationName = document.getElementById('animationName');\r\n                                  animationName.innerHTML = animationsList[current_anim][1];\r\n                  \r\n                                  console.log(duration);\r\n                              });\r\n                  \r\n                              document.getElementById('next').addEventListener('click', function() {\r\n                                  current_anim++;\r\n                                  if (current_anim === animationsList.length) current_anim = 0;\r\n                  \r\n                                  api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                  api.seekTo(0);\r\n                                  duration = animationsList[current_anim][2];\r\n                                  var animationName = document.getElementById('animationName');\r\n                                  animationName.innerHTML = animationsList[current_anim][1];\r\n                  \r\n                                  console.log(duration);\r\n                              });\r\n\r\n                              var animationName = document.getElementById('animationName');\r\n                              animationName.innerHTML = animationsList[0][1];\r\n                              current_anim = 0;\r\n                              api.setCurrentAnimationByUID(animations[current_anim][0]);\r\n                              duration = animations[current_anim][2];\r\n                              isSeeking = false;\r\n                              timeSlider = document.getElementById('timeSlider');\r\n                              pollTime();\r\n          \r\n                              timeSlider.addEventListener('change', function() {\r\n                                  isSeeking = false;\r\n\r\n                                  var time = (duration * timeSlider.value) / 100;\r\n                                  var timeDisplay = document.getElementById('timeDisplay');\r\n                                  timeDisplay.innerHTML = time.toFixed(2);\r\n                              });\r\n          \r\n                              timeSlider.addEventListener('input', function() {\r\n                                  isSeeking = true;\r\n                                  var time = (duration * timeSlider.value) / 100;\r\n                                  var timeDisplay = document.getElementById('timeDisplay');\r\n                                  timeDisplay.innerHTML = time.toFixed(2);\r\n                                  api.pause();\r\n                                  api.seekTo(time);\r\n                              });\r\n                          }\r\n                      });\r\n\r\n                      dispatch(viewerSlice.actions.toggleDisableButtons());\r\n                      api.getSceneGraph(function(err, result) {\r\n                          if (err) {\r\n                              console.log('Error getting nodes');\r\n                              return;\r\n                          }                  \r\n                          dispatch(viewerSlice.actions.setSceneGraph(result))        \r\n                      });\r\n\r\n                      api.getMaterialList(function(err, materials) {\r\n                          dispatch(viewerSlice.actions.setMaterials(materials));\r\n          \r\n                          for (var i = 0; i < materials.length; i++) {\r\n                              var m = materials[i];\r\n                              console.log(m.name, m);\r\n                          }\r\n                      });\r\n                  }.bind(this));\r\n              }.bind(this),\r\n              error: function onError() {\r\n                  console.log('Viewer error');\r\n              }\r\n          });\r\n      }\r\n  }\r\n\r\n  Configurator.init(CONFIG, iframe);\r\n};\r\n\r\nvar buildSceneGraph = function(state, children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n    if (children[i].type != \"Group\" && children[i].name != \"RootNode\") {\r\n      if(children[i].name == undefined) {\r\n        state.sceneGraph.push({\r\n          name: children[i].type, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID\r\n        });\r\n      } else {\r\n        state.sceneGraph.push({\r\n          name: children[i].name, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID\r\n        });\r\n      }\r\n    }\r\n    state.sceneGraphIsVisible[children[i].instanceID] = true\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildSceneGraph(state, children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default viewerSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  initializeViewer, \r\n  selectModelId, \r\n  setModelId, \r\n  toggleModalDisplay,\r\n  selectDisableButtons,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n  const modelId = useSelector(selectModelId);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n  \r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Configurator Studio</h1>\r\n      <div className=\"header__buttons\">\r\n        <input id=\"model-id-input\"\r\n          value={modelId}\r\n          onChange={e => dispatch(setModelId(e.target.value))}\r\n        />\r\n        <button \r\n          id=\"displayButton\"    \r\n          className=\"header__button\"      \r\n          onClick={() => dispatch(initializeViewer(modelId))}\r\n        >Load Model\r\n        </button>        \r\n        <button \r\n          id=\"export-javascript\"\r\n          className=\"header__button\"\r\n          disabled={disableButtons}\r\n          onClick={() => dispatch(toggleModalDisplay())}>Export</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n\r\n    return (        \r\n        <div class=\"viewer\">\r\n            <iframe \r\n                src=\"\" \r\n                id=\"api-frame\" \r\n                allowfullscreen mozallowfullscreen=\"true\" \r\n                webkitallowfullscreen=\"true\"\r\n            ></iframe>\r\n            <div id=\"animationControls\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleModalDisplay, \r\n\tselectControls, \r\n\tselectSceneGraph, \r\n\tselectModelId,\r\n\tselectGroupingOptions,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch();\r\n\tconst controls = useSelector(selectControls);\r\n\tconst modelId = useSelector(selectModelId);\r\n\tconst sceneGraph = useSelector(selectSceneGraph);\r\n\tconst groupingOptions = useSelector(selectGroupingOptions);\r\n\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Add This To Your Page</h1>\r\n                </div>\r\n                <textarea id=\"js-output\" value={createJSExport(controls, modelId, sceneGraph, groupingOptions)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst createJSExport = (controls, modelId, sceneGraph, groupingOptions) => (\r\n`\r\n// Sketchfab Viewer API: Change Texture/material\r\nvar version = '1.8.2';\r\nvar uid = '${modelId}';\r\nvar iframe = document.getElementById('api-frame');\r\nvar client = new window.Sketchfab(version, iframe);\r\n\r\nvar myMaterials;\r\n\r\nvar error = function() {\r\n\tconsole.error('Sketchfab API error');\r\n};\r\n\r\nvar controls = ${JSON.stringify(controls)}\r\n\r\nvar sceneGraph = ${JSON.stringify(sceneGraph)}\r\n\r\nvar groupingOptions = ${JSON.stringify(groupingOptions)}\r\n\r\nvar animationObjects = {};\r\n\r\nvar controlsContainer = document.getElementById('controls');\r\nvar toggleableItems = {};\r\nvar toggleableGroups = {};\r\n\r\nvar nameArrays = [];\r\nvar currentAnimation = \"\";\r\nvar currentAnimationEndTime = 0;\r\nvar groupingMode = false;\r\nvar firstGroupingControlIndex = -1;\r\n\r\nvar getName = function(children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n\t\tif(children[i].name == undefined) {\r\n\t\t\tnameArrays.push({name: children[i].type, depth: depth, instanceID: children[i].instanceID});\r\n\t\t} else {\r\n\t\t\tnameArrays.push({name: children[i].name, depth: depth, instanceID: children[i].instanceID});\r\n\t\t}\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tgetName(children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar apiSkfb, pollTime;\r\n\r\n\r\npollTime = function() {\r\n        apiSkfb.getCurrentTime(function(err, time) {\r\n\t\t\t\r\n\t\t\tif (currentAnimationEndTime > 0 && time >= currentAnimationEndTime) {\r\n\t\t\t\tapiSkfb.pause();\r\n\t\t\t}\r\n            requestAnimationFrame(pollTime);\r\n        });\r\n  };\r\n\r\nvar success = function(api) {\r\n    apiSkfb = api;\r\n\tapi.start(function() {\r\n\t\tapi.addEventListener('viewerready', function() {\r\n\t\t\tpollTime();\r\n\t\t\tapi.pause();\r\n            api.getSceneGraph(function(err, result) {\r\n                if (err) {\r\n                    console.log('Error getting nodes');\r\n                    return;\r\n                }\r\n\t\t\t\tvar sceneElements = [];\r\n\t\t\t\tgetName(result.children, 0);\r\n            });\r\n\t\t\t\r\n\t\t\tapi.getMaterialList(function(err, materials) {\r\n\t\t\t\tmyMaterials = materials;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar animations = [];\r\n\t\t\tfor (let i = 0; i < controls.length; ++i) {\t\r\n\t\t\t\tif (controls[i].type == \"animation\") {\r\n\t\t\t\t\tanimations.push(controls[i]);\r\n\t\t\t\t\tanimationObjects[controls[i].id] = {name: controls[i].name, startTime: Number(controls[i].startTime), endTime: Number(controls[i].endTime), uid: controls[i].animationUID}; \r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tvar controlTitle = document.createElement(\"h3\");\r\n\t\t\t\tcontrolTitle.innerHTML = controls[i].name;  \r\n\t\t\t\tsingleControlContainer.classList.add(\"single-control-container\");\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tsingleControlContainer.appendChild(controlTitle);\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\tif (controls[i].type == \"color\") {\r\n\t\t\t\t\tvar resetBut = document.createElement(\"button\");\r\n\t\t\t\t\tresetBut.innerHTML = \"Reset\";\r\n\t\t\t\t\tresetBut.onclick = function(e) {\t\r\n\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\tm = JSON.parse(JSON.stringify(controls[i].entity));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(resetBut);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let j = 0; j < controls[i].additionalColors.length; ++j) {\r\n\t\t\t\t\t\tvar colorBut = document.createElement(\"button\");\r\n\r\n\t\t\t\t\t\tcolorBut.innerHTML = controls[i].additionalColors[j].name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcolorBut.id = controls[i].id + \"-\" + controls[i].name\r\n\t\t\t\t\t\tcolorBut.onclick = function(e) {\t\r\n\t\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.enable = true;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.enable = true;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.enable = false;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.factor = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(colorBut);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if (controls[i].type == \"toggle\") {\r\n\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\tvar toggleBut = document.createElement(\"button\");\r\n\t\t\t\t\ttoggleBut.innerHTML = \"Toggle \" + controls[i].name;\r\n\t\t\t\t\ttoggleBut.id = controls[i].entity.instanceID;\r\n\t\t\t\t\ttoggleBut.onclick = function(e) {\r\n\t\t\t\t\t\tvar isVisible = toggleableItems[e.target.id];\r\n\t\t\t\t\t\tif (isVisible == \"visible\") {\r\n\t\t\t\t\t\t\tapi.hide(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"hidden\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tapi.show(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(toggleBut);\r\n\t\t\t\t} else if (controls[i].type == \"grouping\") {\t\t\t\r\n\t\t\t\t\tgroupingMode = true;\r\n\t\t\t\t\tif (firstGroupingControlIndex == -1) {\r\n\t\t\t\t\t\tfirstGroupingControlIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar groupingsContainer = document.createElement(\"div\");\r\n\t\t\t\t\tgroupingsContainer.style.display = \"flex\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var j=0; j<controls[i].groupings.length; ++j) {\r\n\t\t\t\t\t\tvar groupingDiv = document.createElement(\"div\");\r\n\t\t\t\t\t\tvar groupingTitle = document.createElement(\"label\");\r\n\t\t\t\t\t\tgroupingTitle.style.marginRight = \"10px\";\r\n\t\t\t\t\t\tgroupingTitle.style.marginLeft = \"10px\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgroupingTitle.innerHTML = controls[i].groupings[j].name + \":\";\r\n\t\t\t\t\t\tvar groupingSelect = document.createElement(\"select\");\r\n\t\t\t\t\t\tgroupingSelect.classList.add(\"grouping__select\");\r\n\t\t\t\t\t\tgroupingSelect.id = i + \"select\" + j;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgroupingSelect.addEventListener(\"change\", function(e) {\r\n\t\t\t\t\t\t\tvar startButton = document.getElementById(\"startButton\");\r\n\t\t\t\t\t\t\tvar pauseButton = document.getElementById(\"pauseButton\");\r\n\t\t\t\t\t\t\tvar animationSelect = document.getElementById(\"animationSelect\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar allGroupingSelects = document.getElementsByClassName(\"grouping__select\");\r\n\t\t\t\t\t\t\tvar allDesignationsSet = true;\r\n\t\t\t\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\t\t\t\tvar disableAnimation = false;\r\n\t\t\t\t\t\t\tfor (var k=0; k<allGroupingSelects.length; ++k) {\r\n\t\t\t\t\t\t\t\tif (allGroupingSelects[k].value == \"none\") {\r\n\t\t\t\t\t\t\t\t\tallDesignationsSet = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tselectedPrefixes.push(allGroupingSelects[k].value);\r\n\t\t\t\t\t\t\t\tvar indexes = allGroupingSelects[k].id.split(\"select\")\r\n\t\t\t\t\t\t\t\tvar indexI = indexes[0];\r\n\t\t\t\t\t\t\t\tvar indexJ = indexes[1];\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(controls[indexI].groupings[indexJ].allowsAnimation.indexOf(allGroupingSelects[k].value) == -1) {\r\n\t\t\t\t\t\t\t\t\tdisableAnimation = true;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstartButton.disabled = disableAnimation || animationSelect.value == \"none\";\r\n\t\t\t\t\t\t\tpauseButton.disabled = disableAnimation || animationSelect.value == \"none\";\r\n\t\t\t\t\t\t\tanimationSelect.disabled = disableAnimation;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (allDesignationsSet) {\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar primaryLetterCode = \"\";\r\n\t\t\t\t\t\t\t\tfor (var k=0; k<groupingOptions.length; ++k) {\r\n\t\t\t\t\t\t\t\t\tif (groupingOptions[k].designation == allGroupingSelects[0].value) {\r\n\t\t\t\t\t\t\t\t\t\tprimaryLetterCode = groupingOptions[k].capitalLetter;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (var k=0; k<allGroupingSelects.length; ++k) {\r\n\t\t\t\t\t\t\t\t\tselectedPrefixes.push(allGroupingSelects[k].value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (var k=0; k<sceneGraph.length; ++k) {\r\n\t\t\t\t\t\t\t\t\tvar nodeNameArray = sceneGraph[k].name.split(\"-\")\r\n\t\t\t\t\t\t\t\t\tvar mainDesignation = nodeNameArray[0];\r\n\t\t\t\t\t\t\t\t\tvar letterCode = nodeNameArray[1];\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tapi.hide(sceneGraph[k].instanceID);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (selectedPrefixes.indexOf(mainDesignation) > -1 && \r\n\t\t\t\t\t\t\t\t\t\t\tletterCode.includes(primaryLetterCode)) {\r\n\t\t\t\t\t\t\t\t\t\tapi.show(sceneGraph[k].instanceID);\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var k=0; k<controls[i].groupings[j].designations.length; ++k) {\r\n\t\t\t\t\t\t\tvar designationOption = document.createElement(\"option\");\r\n\t\t\t\t\t\t\tdesignationOption.value = controls[i].groupings[j].designations[k];\r\n\t\t\t\t\t\t\tdesignationOption.innerHTML = controls[i].groupings[j].designations[k];\r\n\t\t\t\t\t\t\tgroupingSelect.appendChild(designationOption);\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgroupingDiv.appendChild(groupingTitle);\r\n\t\t\t\t\t\tgroupingDiv.appendChild(groupingSelect);\r\n\t\t\t\t\t\tgroupingsContainer.appendChild(groupingDiv);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(groupingsContainer);\r\n\t\t\t\t}\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (animations.length > 0) {\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tvar controlTitle = document.createElement(\"h3\");\r\n\t\t\t\tcontrolTitle.innerHTML = \"Animations\";  \r\n\t\t\t\tsingleControlContainer.classList.add(\"single-control-container\");\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tsingleControlContainer.appendChild(controlTitle);\r\n\t\t\t\t\r\n\t\t\t\tvar startBut = document.createElement(\"button\");\r\n\t\t\t\tstartBut.id = \"startButton\";\r\n\t\t\t\tstartBut.innerHTML = \"Start\";\r\n\t\t\t\tstartBut.disabled = true;\r\n\t\t\t\tstartBut.onclick = function() {\r\n\t\t\t\t    var startTime = animationObjects[currentAnimation].startTime;\r\n\t\t\t\t\tapi.seekTo(startTime);\r\n\t\t\t\t\tapi.play();\r\n\t\t\t\t}\r\n\t\t\t\tvar pauseBut = document.createElement(\"button\");\r\n\t\t\t\tpauseBut.id = \"pauseButton\";\r\n\t\t\t\tpauseBut.innerHTML = \"Pause\";\r\n\t\t\t\tpauseBut.disabled = true;\r\n\t\t\t\tpauseBut.onclick = function() {    \r\n\t\t\t\t\tapi.pause();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsingleControlContainer.appendChild(startBut);\r\n\t\t\t\tsingleControlContainer.appendChild(pauseBut);\r\n\t\t\t\t\r\n\t\t\t\tvar animationSelect = document.createElement(\"select\");\r\n\t\t\t\tanimationSelect.id = \"animationSelect\";\r\n\t\t\t\t\r\n\t\t\t\tvar tempOption = document.createElement(\"option\");\r\n\t\t\t\ttempOption.value = \"none\";\r\n\t\t\t\ttempOption.innerHTML = \"Select An Animation\";\r\n\t\t\t\t\r\n\t\t\t\tanimationSelect.appendChild(tempOption);\r\n\t\t\t\tfor (let i=0; i<animations.length; ++i) {\r\n\t\t\t\t\tif (i==0) {\r\n\t\t\t\t\t\tcurrentAnimation = animations[i].id;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar tempOption = document.createElement(\"option\");\r\n\t\t\t\t\ttempOption.value = animations[i].id;\r\n\t\t\t\t\ttempOption.innerHTML = animations[i].name;\r\n\t\t\t\t\t\r\n\t\t\t\t\tanimationSelect.appendChild(tempOption);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tanimationSelect.addEventListener(\"change\", function(e) {    \r\n\t\t\t\t\tif (e.target.value != \"none\") {\r\n\t\t\t\t\t\tstartBut.disabled = false;\r\n\t\t\t\t\t\tpauseBut.disabled = false;     \r\n\t\t\t\t\t\tvar animationUID = animationObjects[e.target.value].uid;\r\n\t\t\t\t\t\tapi.setCurrentAnimationByUID(animationUID);\r\n\t\t\t\t\t\tvar startTime = animationObjects[e.target.value].startTime;\r\n\t\t\t\t\t\tcurrentAnimation = e.target.value;\r\n\t\t\t\t\t\tapi.seekTo(startTime);\r\n\t\t\t\t\t\tvar endTime = animationObjects[currentAnimation].endTime;\r\n\t\t\t\t\t\tcurrentAnimationEndTime = endTime;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\t\t\t\t\t\t\r\n\t\t\t\t\t\tstartBut.disabled = true;\r\n\t\t\t\t\t\tpauseBut.disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tsingleControlContainer.appendChild(animationSelect);\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//show/hide to OG specification\r\n\t\t\tif (groupingMode) {\r\n\t\t\t\tvar startButton = document.getElementById(\"startButton\");\r\n\t\t\t\tvar pauseButton = document.getElementById(\"pauseButton\");\r\n\t\t\t\tvar animationSelect = document.getElementById(\"animationSelect\");\r\n\t\t\t\t\r\n\t\t\t\tvar allGroupingSelects = document.getElementsByClassName(\"grouping__select\");\r\n\t\t\t\tvar allDesignationsSet = true;\r\n\t\t\t\tvar selectedPrefixes = [];\r\n\t\t\t\tvar disableAnimation = false;\t\t\r\n\t\t\t\tvar primaryLetterCode = \"\";\r\n\t\t\t\tfor (var k=0; k<groupingOptions.length; ++k) {\r\n\t\t\t\t\tif (groupingOptions[k].designation == allGroupingSelects[0].value) {\r\n\t\t\t\t\t\tprimaryLetterCode = groupingOptions[k].capitalLetter;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (var k=0; k<allGroupingSelects.length; ++k) {\r\n\t\t\t\t\tif (allGroupingSelects[k].value == \"none\") {\r\n\t\t\t\t\t\tallDesignationsSet = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tselectedPrefixes.push(allGroupingSelects[k].value);\r\n\t\t\t\t\tvar indexes = allGroupingSelects[k].id.split(\"select\")\r\n\t\t\t\t\tvar indexI = indexes[0];\r\n\t\t\t\t\tvar indexJ = indexes[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(controls[indexI].groupings[indexJ].allowsAnimation.indexOf(allGroupingSelects[k].value) == -1) {\r\n\t\t\t\t\t\tdisableAnimation = true;\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tstartButton.disabled = disableAnimation;\r\n\t\t\t\tpauseButton.disabled = disableAnimation;\r\n\t\t\t\tanimationSelect.disabled = disableAnimation;\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i<sceneGraph.length; ++i) {\r\n\t\t\t\t\tvar nodeNameArray = sceneGraph[i].name.split(\"-\")\r\n\t\t\t\t\tvar mainDesignation = nodeNameArray[0];\r\n\t\t\t\t\tvar letterCode = nodeNameArray[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tapi.hide(sceneGraph[i].instanceID);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (selectedPrefixes.indexOf(mainDesignation) > -1 && \r\n\t\t\t\t\t\t\tletterCode.includes(primaryLetterCode)) {\r\n\t\t\t\t\t\tapi.show(sceneGraph[i].instanceID);\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\t\t\t\r\n\t\t});\r\n\t});\r\n};\r\n\r\nclient.init(uid, {\r\n\tsuccess: success,\r\n\terror: error,\r\n\tautostart: 1,\r\n\tpreload: 1\r\n});\r\n  \r\n\r\n`\r\n)\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createControl, toggleOptionChoiceModalDisplay } from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"control-choice-modal\">\r\n            <div className=\"control-choice-content\">\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"color\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}\r\n                >Color</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"toggle\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Toggle</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"grouping\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Grouping</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"animation\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Animation</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectMaterials, \r\n  updateControl,\r\n} from './viewerSlice';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch(); \r\n    const { option } = props\r\n    const materials = useSelector(selectMaterials); \r\n\r\n    return (\r\n    <div>\r\n      <div className=\"input__container\">\r\n        <label htmlFor=\"materials\">Material:</label>\r\n        {renderColorsOption(option, materials, dispatch)}\r\n      </div>\r\n      <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n        {renderAdditionalColors(option.id, option.additionalColors, dispatch)}\r\n      </div>\r\n      <div className=\"input__container\">\r\n        <button \r\n          id=\"addColor\"\r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.additionalColors == undefined || option.additionalColors == null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"additionalColors\", \r\n                  value: [{color:\"#ffffff\", name: \"white\", colorRGB: [1,1,1]}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newColors = [];\r\n              for (let i = 0; i<option.additionalColors.length; ++i) {\r\n                newColors[i] = option.additionalColors[i];\r\n              }\r\n              newColors.push({color: \"#ffffff\", name: \"default\", colorRGB: [1,1,1]});\r\n              dispatch(updateControl({id: option.id, key: \"additionalColors\", value: newColors}));\r\n            }\r\n          }}\r\n        >+ Add Color</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst renderAdditionalColors = (id, additionalColors, dispatch) => {\r\n    if (additionalColors == null || additionalColors == undefined) {\r\n      return <div></div>\r\n    } else {\r\n      return additionalColors.map((color, index, array) => (\r\n        <div className=\"input__container\">\r\n          <label htmlFor=\"defaultColor\">Alternate Color:</label>\r\n          <input \r\n            type=\"color\" \r\n            name=\"additionalColor\" \r\n            id={`${id}-${index}-additionalColor`} \r\n            value={additionalColors[index].color}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = e.target.value;\r\n                  newColor.colorRGB = hexRgb(e.target.value, {format: 'array'}).map(num => num/255);\r\n                  newColor.name = array[i].name;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={additionalColors[index].name}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = e.target.value;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n        </div>\r\n      ))\r\n    }\r\n  }\r\n  \r\nconst renderColorsOption = (option, materials, dispatch) => {\r\n  \r\n    const materialsHtml = materials.map((material, index) => <option value={index}>{material.name}</option>)\r\n    materialsHtml.unshift(<option value=\"none\">Select a Material</option>)\r\n\r\n    return (\r\n      <select \r\n        name=\"materials\" \r\n        id=\"materials\"\r\n        onChange={(e) => {\r\n          dispatch(updateControl({id: option.id, key: \"entityIndex\", value: e.target.value }));\r\n          dispatch(updateControl({id: option.id, key: \"entity\", value: materials[e.target.value] }));\r\n        }}\r\n        value={option.entityIndex}\r\n      >\r\n        {materialsHtml}\r\n      </select>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => <option value={node.instanceID}>{addDashes(node.depth)}{node.name}</option>)\r\n    sceneGraphHtml.unshift(<option value={0}>Select a Node</option>)\r\n  \r\n    return (\r\n      <select \r\n        name=\"nodes\" \r\n        id=\"nodes\"\r\n        className=\"material__select\"\r\n        value={option.entity.instanceID}\r\n        onChange={e => dispatch(updateControl({id: option.id, key: \"entity\", value: {instanceID: e.target.value}}))}\r\n      >\r\n        {sceneGraphHtml}\r\n      </select>\r\n    )\r\n}\r\n  \r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n  setGroupingOptions,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    let uniqueStrings = [];\r\n    let groupingOptions = [];\r\n    for (let i=0; i<sceneGraph.length; ++i) {\r\n      let nodeNameArray = sceneGraph[i].name.split(\"-\").filter(string => string != \"\")\r\n      let mainDesignation = nodeNameArray[0];\r\n      let capitalLetter = nodeNameArray[1];\r\n      let detailedTitle = nodeNameArray[2];\r\n      for (let i=3; i<nodeNameArray.length; ++i) {\r\n        detailedTitle += nodeNameArray[i];\r\n      }\r\n\r\n      const irrelevantStrings = [\"Group\", \"RootNode\", \"MatrixTransform\"];\r\n      if (uniqueStrings.indexOf(mainDesignation) == -1 &&\r\n        irrelevantStrings.indexOf(mainDesignation) == -1) {\r\n        uniqueStrings.push(mainDesignation);\r\n        groupingOptions.push({\r\n          instanceID: sceneGraph[i].instanceID,\r\n          designation: mainDesignation,\r\n          capitalLetter: capitalLetter,\r\n          detailedTitle: detailedTitle,\r\n        })\r\n      }\r\n    }\r\n    dispatch(setGroupingOptions(groupingOptions))\r\n\r\n    const renderDesignationMultiselect = grouping => {\r\n      return groupingOptions.map(groupingOption => {\r\n        \r\n        return (\r\n          <div style={{display: \"flex\"}}>\r\n            <div style={{display: \"flex\", flex: \"1 1 auto\"}}>\r\n              <input \r\n                checked={grouping.designations.includes(groupingOption.designation)}\r\n                type=\"checkbox\" \r\n                onChange={() => {\r\n                  let newGroupings = [];\r\n                  for (let i=0; i<option.groupings.length; ++i) {\r\n                    if (grouping.id == option.groupings[i].id) {\r\n                      if (grouping.designations.includes(groupingOption.designation)) {\r\n                        newGroupings[i] = {\r\n                          id: option.groupings[i].id,\r\n                          name: option.groupings[i].name,\r\n                          designations: option.groupings[i].designations.filter(a => a != groupingOption.designation),\r\n                          allowsAnimation: option.groupings[i].allowsAnimation.filter(a => a != groupingOption.designation)\r\n                        }\r\n                      } else {\r\n                        let newDesignations = option.groupings[i].designations.map(a => a)\r\n                        newDesignations.push(groupingOption.designation)\r\n                        let newDisablesAnimation = option.groupings[i].allowsAnimation.map(a => a)\r\n                        newDisablesAnimation.push(groupingOption.designation)\r\n                        newGroupings[i] = {\r\n                          id: option.groupings[i].id,\r\n                          name: option.groupings[i].name,\r\n                          designations: newDesignations,\r\n                          allowsAnimation: newDisablesAnimation,\r\n                        }\r\n                      }\r\n                    } else {\r\n                      newGroupings[i] = { \r\n                        id: option.groupings[i].id,\r\n                        name: option.groupings[i].name,\r\n                        designations: option.groupings[i].designations,\r\n                        allowsAnimation: option.groupings[i].allowsAnimation,\r\n                      }\r\n                    }\r\n                  }\r\n                  console.log(newGroupings)\r\n                  dispatch(updateControl({id: option.id, key: \"groupings\", value: newGroupings}))\r\n                }}\r\n              />\r\n              <div>{groupingOption.designation}</div>\r\n            </div>\r\n            <div>Animation:</div>\r\n            <input \r\n              checked={grouping.allowsAnimation.includes(groupingOption.designation)}\r\n              disabled={!grouping.designations.includes(groupingOption.designation)}\r\n              type=\"checkbox\" \r\n              onChange={(e) => {\r\n                let newGroupings = [];\r\n                for (let i=0; i<option.groupings.length; ++i) {\r\n                  if (grouping.id == option.groupings[i].id) {\r\n                    if (grouping.allowsAnimation.includes(groupingOption.designation)) {\r\n                      newGroupings[i] = {\r\n                        id: option.groupings[i].id,\r\n                        name: option.groupings[i].name,\r\n                        designations: option.groupings[i].designations,\r\n                        allowsAnimation: option.groupings[i].allowsAnimation.filter(a => a != groupingOption.designation)\r\n                      }\r\n                    } else {\r\n                      let newDisablesAnimation = option.groupings[i].allowsAnimation.map(a => a)\r\n                      newDisablesAnimation.push(groupingOption.designation)\r\n                      newGroupings[i] = {\r\n                        id: option.groupings[i].id,\r\n                        name: option.groupings[i].name,\r\n                        designations: option.groupings[i].designations,\r\n                        allowsAnimation: newDisablesAnimation,\r\n                      }\r\n                    }\r\n                  } else {\r\n                    newGroupings[i] = { \r\n                      id: option.groupings[i].id,\r\n                      name: option.groupings[i].name,\r\n                      designations: option.groupings[i].designations,\r\n                      allowsAnimation: option.groupings[i].allowsAnimation,\r\n                    }\r\n                  }\r\n                }\r\n                console.log(newGroupings)\r\n                dispatch(updateControl({id: option.id, key: \"groupings\", value: newGroupings}))\r\n              }}\r\n            />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  \r\n    const renderAdditionalGroupings = (id, groupings, dispatch) => {\r\n        if (groupings == null || groupings == undefined) {\r\n          return <div></div>\r\n        } else {\r\n          return groupings.map((grouping, index, array) => (\r\n            <div>\r\n              <div className=\"input__container\">\r\n                <label>Grouping {index}:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={groupings[index].name}\r\n                  onChange={(e) => {\r\n                    let newGroupings = [];\r\n                    for (let i=0; i<option.groupings.length; ++i) {\r\n                      if (grouping.id == option.groupings[i].id) {\r\n                        newGroupings[i] = {\r\n                          id: option.groupings[i].id,\r\n                          name: e.target.value,\r\n                          designations: option.groupings[i].designations,\r\n                          allowsAnimation: option.groupings[i].allowsAnimation,\r\n                        }\r\n                      } else {\r\n                        newGroupings[i] = {\r\n                          id: option.groupings[i].id,\r\n                          name: option.groupings[i].name,\r\n                          designations: option.groupings[i].designations,\r\n                          allowsAnimation: option.groupings[i].allowsAnimation,\r\n                        }\r\n                      }\r\n                    }\r\n                    dispatch(updateControl({id: option.id, key: \"groupings\", value: newGroupings}))\r\n                  }}      \r\n                />\r\n                <button \r\n                  title=\"Remove option\"\r\n                  onClick={() => {\r\n                    const newArray = groupings.filter(grouping => {\r\n                      return grouping.name !== groupings[index].name\r\n                    });\r\n                    let transferObject = {id: option.id, key: \"groupings\", value: newArray};\r\n                    dispatch(updateControl(transferObject));\r\n                  }}\r\n                >\r\n                  <svg \r\n                    fill=\"currentColor\" \r\n                    preserveAspectRatio=\"xMidYMid meet\" \r\n                    height=\"1em\" \r\n                    width=\"1em\" \r\n                    viewBox=\"0 0 40 40\" \r\n                    style={{verticalAlign: \"middle\"}}\r\n                  >\r\n                    <g>\r\n                      <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n                      0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n                      0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n                      0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n                      0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n                      0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n                      1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n                      0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n                      3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n                    </g>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              <div>{renderDesignationMultiselect(grouping)}</div>\r\n            </div>\r\n          ))\r\n        }\r\n      }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <button \r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.groupings == undefined || option.groupings == null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"groupings\", \r\n                  value: [{id: uuidv4(), name: \"grouping\", designations: [], allowsAnimation: []}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newGroupings = [];\r\n              for (let i = 0; i<option.groupings.length; ++i) {\r\n                newGroupings[i] = option.groupings[i];\r\n              }\r\n              newGroupings.push({id: uuidv4(), name: \"default\", designations: [], allowsAnimation: []});\r\n              dispatch(updateControl({id: option.id, key: \"groupings\", value: newGroupings}));\r\n            }\r\n          }}\r\n        >+ Add Grouping</button>\r\n        <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n          {renderAdditionalGroupings(option.id, option.groupings, dispatch)}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nfunction uuidv4() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectAnimations,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const animations = useSelector(selectAnimations);\r\n\r\n    const animationOptions = animations.map(animation => <option value={animation[0]}>{animation[1]}</option>)\r\n    animationOptions.unshift(<option value=\"none\">Select an Animation</option>)\r\n\r\n    return (\r\n      <div style={{display: \"flex\", alignItems: \"flex-start\", flexDirection: \"column\"}}>\r\n        <div>\r\n          <label>Animation:</label>\r\n          <select \r\n            name=\"animationSelect\"\r\n            value={option.animationUID}\r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"animationUID\", value: e.target.value}))}\r\n          >\r\n            {animationOptions}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"start\">Start Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"start\"\r\n            value={option.startTime} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"startTime\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end\">End Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"end\"\r\n            value={option.endTime} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"endTime\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleOptionChoiceModalDisplay, \r\n  selectControls, \r\n  selectDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n} from './viewerSlice';\r\nimport ColorPanel from './ColorPanel';\r\nimport TogglePanel from './TogglePanel';\r\nimport Grouping from './GroupingPanel';\r\nimport AnimationPanel from './AnimationPanel';\r\n\r\nexport default () => {  \r\n  \r\n  const options = useSelector(selectControls);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n      <button \r\n        className=\"add-option add__button\" \r\n        disabled={disableButtons}\r\n        onClick={() => dispatch(toggleOptionChoiceModalDisplay())}\r\n      >+ Add Option</button>\r\n      <div className=\"single-option__panels__container\">\r\n        {renderOptions(options, dispatch)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst renderOptions = (options, dispatch) => {\r\n  \r\n  let optionsHtml = options.map((option, index, array) => (\r\n    <div className=\"single-option__panel\">\r\n      <div className=\"single-option__header\">\r\n        <h3 className=\"single-option__title\">{option.id}. {option.type}</h3>\r\n        <button \r\n          id={`collapseButton${option.id}`}\r\n          className=\"collapse__button\"\r\n          onClick={(e) => dispatch(updateControl({\r\n            id: option.id,\r\n            key: \"isExpanded\",\r\n            value: !option.isExpanded\r\n          }))}\r\n        >\r\n          {option.isExpanded ? \"Collapse\" : \"Expand\"}\r\n        </button>\r\n        <button \r\n          title=\"Remove option\"\r\n          onClick={() => {\r\n            const newArray = array.filter(control => control.id !== option.id);\r\n            dispatch(setControls(newArray));\r\n          }}\r\n        >\r\n          <svg \r\n            fill=\"currentColor\" \r\n            preserveAspectRatio=\"xMidYMid meet\" \r\n            height=\"1em\" \r\n            width=\"1em\" \r\n            viewBox=\"0 0 40 40\" \r\n            style={{verticalAlign: \"middle\"}}\r\n          >\r\n            <g>\r\n              <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n              0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n              0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n              0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n              0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n              0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n              1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n              0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n              3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div style={{display: option.isExpanded ? \"block\" : \"none\"}}>\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Name:</p>\r\n          <input \r\n            type=\"text\" \r\n            name=\"colorName\" \r\n            id=\"colorName\" \r\n            value={option.name} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"name\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        {renderPanel(option)}\r\n      </div>\r\n    </div>\r\n  ))\r\n\r\n  return optionsHtml;\r\n}\r\n\r\nconst renderPanel = (option) => {\r\n  if (option.type == \"color\") {\r\n    return <ColorPanel option={option} />;\r\n  } else if (option.type == \"toggle\") {\r\n    return <TogglePanel option={option} />;\r\n  } else if (option.type == \"animation\") {\r\n    return <AnimationPanel option={option} />;\r\n  } else if (option.type == \"grouping\") {\r\n    return <Grouping option={option} />;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  selectSketchfabAPI,\r\n  setSceneGraphIsVisible,\r\n  selectSceneGraphIsVisible,\r\n  setAllNodesVisible,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch()\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n    const sketchfabAPI = useSelector(selectSketchfabAPI);\r\n    const sceneGraphIsVisible = useSelector(selectSceneGraphIsVisible);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => {\r\n      return (\r\n        <div style={{display: \"flex\"}}>\r\n          <input \r\n            id={node.instanceID}\r\n            type=\"checkbox\" \r\n            checked={sceneGraphIsVisible[node.instanceID]}\r\n            onChange={(e) => {\r\n                if (e.target.checked) {\r\n                    sketchfabAPI.show(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: true}))\r\n                } else {\r\n                    sketchfabAPI.hide(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: false}))\r\n                }\r\n            }}\r\n          />\r\n          <div className=\"node-name\">{addDashes(node.depth)}{node.name}</div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    sceneGraphHtml.unshift(\r\n      <div style={{display: \"flex\",borderBottom: \"1px solid black\"}}>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={Object.values(sceneGraphIsVisible).reduce((accum, curr) => accum && curr)}\r\n          onChange={(e) => {\r\n            dispatch(setAllNodesVisible(e.target.checked))\r\n          }}\r\n        />\r\n        <div className=\"node-name\">All Nodes</div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n        <div id=\"nodeControls\">\r\n            {sceneGraphHtml}\r\n        </div>\r\n        <div id=\"animationControls\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    setViewMode,\r\n    selectViewMode,\r\n    selectDisableButtons,\r\n} from './viewerSlice';\r\nimport OptionPanel from './OptionPanel';\r\nimport NodePanel from './NodePanel';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const viewMode = useSelector(selectViewMode);\r\n    const disableButtons = useSelector(selectDisableButtons);\r\n\r\n    let nodesButtonStyles = {\r\n        backgroundColor: viewMode == \"nodes\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let optionsButtonStyles = {\r\n        backgroundColor: viewMode == \"options\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    const renderPanel = (viewMode) => {\r\n        if (viewMode === \"options\") {\r\n            return <OptionPanel />\r\n        } else if (viewMode === \"nodes\") {\r\n            return <NodePanel />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"control-menu\">\r\n            <div style={{display: \"flex\"}}>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={nodesButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"nodes\"))}\r\n                >Nodes</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={optionsButtonStyles}\r\n                    onClick={() => dispatch(setViewMode(\"options\"))}\r\n                >Options</button>\r\n            </div>\r\n            {renderPanel(viewMode)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Viewer from './components/Viewer'\r\nimport ExportModal from './components/ExportModal';\r\nimport OptionChoiceModal from './components/OptionChoiceModal';\r\nimport ControlMenu from './components/ControlMenu';\r\nimport './App.css';\r\nimport './globals';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <Viewer />\r\n        <ControlMenu />\r\n        <ExportModal />\r\n        <OptionChoiceModal />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport viewerReducer from '../components/viewerSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    viewer: viewerReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}