{"version":3,"sources":["globals.js","components/viewerSlice.js","components/initializeViewer.js","components/Header.js","components/Viewer.js","components/ExportModal.js","components/OptionChoiceModal.js","components/AnimationPanel.js","components/ColorPanel.js","components/ElementCategoryPanel.js","components/TextureCategoryPanel.js","components/TogglePanel.js","components/OptionPanel.js","components/NodePanel.js","components/ControlMenu.js","App.js","app/store.js","serviceWorker.js","index.js","components/utils.js"],"names":["window","onclick","event","exportModal","document","getElementById","target","style","display","initialState","modelId","materials","animations","sceneGraph","controls","textureControls","disableButtons","latestControlId","sketchfabAPI","sceneGraphIsVisible","viewMode","surfaceOptionMap","surfaceConfigurationMode","materialNameSegmentMap","surfaceAttributeNameMap","groupingOptions","hiddenCategoryConfigurations","viewerSlice","createSlice","name","reducers","resetState","state","setSketchfabAPI","action","payload","setModelId","setMaterials","setAnimations","setSceneGraph","buildSceneGraph","children","buildCategoryOptions","setSceneGraphIsVisible","id","value","createControl","defaultConfiguration","animationUID","startTime","endTime","designations","geometries","allowsAnimation","unshift","type","entityIndex","entity","instanceID","configuration","isExpanded","setViewMode","setControls","setTextureControls","i","length","addTextureControls","concat","toggleDisableButtons","updateControl","key","console","log","setSurfaceOptionMap","setSurfaceConfigurationMode","setMaterialNameSegmentMap","setSurfaceAttributeNameMap","setUnselectedGeometries","setHiddenCategoryConfigurations","setAllNodesVisible","Object","keys","show","hide","actions","selectModelId","selectMaterials","selectAnimations","selectControls","selectDisableButtons","selectSceneGraph","selectSketchfabAPI","selectSceneGraphIsVisible","selectViewMode","selectSurfaceOptionMap","selectSurfaceConfigurationMode","selectMaterialNameSegmentMap","selectGroupingOptions","selectHiddenCategoryConfigurations","toggleModalDisplay","dispatch","modal","currentStyle","toggleOptionChoiceModalDisplay","initializeViewer","isSeeking","current_anim","apiSkfb","pollTime","duration","timeSlider","iframe","animationsList","getCurrentTime","err","time","percentage","innerHTML","toFixed","seekTo","requestAnimationFrame","api","config","options","init","this","Sketchfab","urlid","ui_controls","graph_optimizer","ui_animations","ui_watermark","ui_inspector","ui_stop","ui_infos","success","start","addEventListener","pause","getAnimations","play","setCurrentAnimationByUID","getSceneGraph","result","getMaterialList","surfaceOptions","buildTextureOptions","surfaceControls","bind","error","prefix","Header","useSelector","useDispatch","className","onChange","e","onClick","disabled","Viewer","class","src","title","allowfullscreen","mozallowfullscreen","webkitallowfullscreen","createJSExport","configurationMaps","JSON","stringify","ExportModal","OptionChoiceModal","isSurfaceConfigurationMode","visibility","AnimationPanel","props","option","animationOptions","map","animation","alignItems","flexDirection","newConfiguration","htmlFor","renderAdditionalColors","additionalColors","undefined","color","index","array","newArray","newColor","colorRGB","hexRgb","format","num","renderColorsOption","materialsHtml","material","ColorPanel","transferObject","newColors","push","ElementCategoryPanel","unselectedGeometries","selectedGeometries","renderDisableMultiSelect","currentElementDesignation","multiSelects","multiSelect","element","showChecked","includes","designation","checked","newHiddenCategoryConfigurations","parse","filter","hiddenElementDesignation","marginLeft","textAlign","setSelectedGeometries","fontWeight","borderBottom","list","setList","geometry","flex","newGeometries","placeholder","humanReadable","newUnselectedGeometries","unSelectedGeometry","splice","fill","preserveAspectRatio","height","width","viewBox","verticalAlign","d","selectedGeometry","TextureConfigurationPanel","newOptions","updateOptions","addDashes","number","dashes","TogglePanel","sceneGraphHtml","node","depth","OptionPanel","renderPanel","overflow","control","renderOptions","NodePanel","values","reduce","accum","curr","ControlMenu","nodesButtonStyles","backgroundColor","optionsButtonStyles","App","configureStore","reducer","viewerReducer","middleware","getDefaultMiddleware","logger","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","module","exports","materialID","uniqueStrings","geometryCategoryOptions","nodeNameArray","split","string","mainDesignation","capitalLetter","detailedTitle","indexOf","sort","a","b","charCodeAt","geometryName","materialOptions","replace","primaryValue","j","isPrimary","ordering","optionExists","k","l","currentAttributeOptions"],"mappings":"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","file":"static/js/main.048887cb.chunk.js","sourcesContent":["// When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    var exportModal = document.getElementById(\"modal\");\r\n    if (event.target === exportModal) {\r\n      exportModal.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { buildSceneGraph, buildCategoryOptions } from './utils'\r\n\r\nconst initialState = {\r\n  modelId: '',\r\n  materials: [],\r\n  animations: [],\r\n  sceneGraph: [],\r\n  controls: [],\r\n  textureControls: [],\r\n  disableButtons: true,\r\n  latestControlId: 0,\r\n  sketchfabAPI: null,\r\n  sceneGraphIsVisible: {},\r\n  viewMode: \"options\",\r\n  surfaceOptionMap: {},\r\n  surfaceConfigurationMode: false,\r\n  materialNameSegmentMap: {},\r\n  surfaceAttributeNameMap: {},\r\n  groupingOptions: [],\r\n  hiddenCategoryConfigurations: {},\r\n};\r\n\r\nexport const viewerSlice = createSlice({\r\n  name: 'viewer',\r\n  initialState,\r\n  reducers: {\r\n    resetState: state => {\r\n      state = initialState;\r\n    },\r\n    setSketchfabAPI: (state, action) => {\r\n      state.sketchfabAPI = action.payload;\r\n    },\r\n    setModelId: (state, action) => {\r\n      state.modelId = action.payload;\r\n    },\r\n    setMaterials: (state, action) => {\r\n      state.materials = action.payload;\r\n    },\r\n    setAnimations: (state, action) => {\r\n      state.animations = action.payload;\r\n    },\r\n    setSceneGraph: (state, action) => {\r\n      buildSceneGraph(state, action.payload.children, 0);\r\n      buildCategoryOptions(state)\r\n    },\r\n    setSceneGraphIsVisible: (state, action) => {\r\n      const { id, value } = action.payload;\r\n      state.sceneGraphIsVisible[id] = value;\r\n    },\r\n    createControl: (state, action) => {\r\n      state.latestControlId = state.latestControlId += 1;\r\n      let id = state.latestControlId;\r\n      let defaultConfiguration = {}\r\n      if(action.payload === \"animation\") {\r\n        defaultConfiguration = {\r\n          animationUID: \"none\",\r\n          startTime: \"0\",\r\n          endTime: \"0\",\r\n        }\r\n      }\r\n\r\n      if(action.payload === \"geometryCategory\") {\r\n        defaultConfiguration = {\r\n          designations: [],\r\n          geometries: [],\r\n          allowsAnimation: [],  \r\n        }\r\n      }\r\n      state.controls.unshift({\r\n        type: action.payload,\r\n        id: id,\r\n        name: action.payload,\r\n        entityIndex: \"none\",\r\n        entity: {instanceID: 0},\r\n        configuration: defaultConfiguration,\r\n        isExpanded: true,\r\n      });\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.viewMode = action.payload\r\n    },\r\n    setControls: (state, action) => {\r\n      state.controls = action.payload;\r\n    },\r\n    setTextureControls: (state, action) => { \r\n      for (var i=0; i<action.payload.length; ++i) {\r\n        state.latestControlId = state.latestControlId += 1;\r\n        action.payload[i].id = state.latestControlId;\r\n      }     \r\n      state.textureControls = action.payload;\r\n    },\r\n    addTextureControls: (state) => {\r\n      state.controls = state.controls.concat(state.textureControls)\r\n    },\r\n    toggleDisableButtons: (state) => {\r\n      state.disableButtons = false;\r\n    },\r\n    updateControl: (state, action) => {\r\n      const { id, key, value } = action.payload;\r\n      console.log(action.payload)\r\n      for (let i=0; i<state.controls.length; ++i) {\r\n        if (state.controls[i].id == id) {\r\n          state.controls[i][key] = value;\r\n        }\r\n      }\r\n    },\r\n    setSurfaceOptionMap: (state, action) => {\r\n      console.log(\"setSurfaceOptionMap -> action.payload\")\r\n      console.log(action.payload)\r\n      state.surfaceOptionMap = action.payload;\r\n    },\r\n    setSurfaceConfigurationMode: (state, action) => {\r\n      state.surfaceConfigurationMode = action.payload;\r\n    },\r\n    setMaterialNameSegmentMap: (state, action) => {\r\n      console.log(\"setMaterialNameSegmentMap -> action.payload:\")\r\n      console.log(action.payload)\r\n      state.materialNameSegmentMap = action.payload;\r\n    },\r\n    setSurfaceAttributeNameMap: (state, action) => {\r\n      state.surfaceAttributeNameMap = action.payload;\r\n    },\r\n    setUnselectedGeometries: (state, action) => {\r\n      state.groupingOptions = action.payload;\r\n    },\r\n    setHiddenCategoryConfigurations: (state, action) => {\r\n      state.hiddenCategoryConfigurations = action.payload;\r\n    },\r\n    setAllNodesVisible: (state, action) => {\r\n      for(let i=0; i<Object.keys(state.sceneGraphIsVisible).length; ++i) {\r\n        if(action.payload) {\r\n          state.sketchfabAPI.show(Object.keys(state.sceneGraphIsVisible)[i])\r\n        } else {\r\n          state.sketchfabAPI.hide(Object.keys(state.sceneGraphIsVisible)[i])\r\n        }\r\n        state.sceneGraphIsVisible[Object.keys(state.sceneGraphIsVisible)[i]] = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  resetState,\r\n  setModelId, \r\n  createControl, \r\n  toggleDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n  setTextureControls,\r\n  addTextureControls,\r\n  setSceneGraph,\r\n  setSceneGraphIsVisible,\r\n  setViewMode,\r\n  setUnselectedGeometries,\r\n  setHiddenCategoryConfigurations,\r\n  setSurfaceOptionMap,\r\n  setSurfaceConfigurationMode,\r\n  setMaterialNameSegmentMap,\r\n  setSurfaceAttributeNameMap,\r\n  setAllNodesVisible,\r\n  setAnimations,\r\n  setMaterials,\r\n  setSketchfabAPI,\r\n} = viewerSlice.actions;\r\n\r\nexport const selectModelId = state => state.modelId;\r\n\r\nexport const selectMaterials = state => state.materials;\r\n\r\nexport const selectAnimations = state => state.animations;\r\n\r\nexport const selectControls = state => state.controls;\r\n\r\nexport const selectTextureControls = state => state.controls;\r\n\r\nexport const selectDisableButtons = state => state.disableButtons;\r\n\r\nexport const selectSceneGraph = state => state.sceneGraph;\r\n\r\nexport const selectSketchfabAPI = state => state.sketchfabAPI;\r\n\r\nexport const selectSceneGraphIsVisible = state => state.sceneGraphIsVisible;\r\n\r\nexport const selectViewMode = state => state.viewMode;\r\n\r\nexport const selectSurfaceOptionMap = state => state.surfaceOptionMap;\r\n\r\nexport const selectSurfaceConfigurationMode = state => state.surfaceConfigurationMode;\r\n\r\nexport const selectMaterialNameSegmentMap = state => state.materialNameSegmentMap;\r\n\r\nexport const selectSurfaceAttributeNameMap = state => state.surfaceAttributeNameMap;\r\n\r\nexport const selectGroupingOptions = state => state.groupingOptions;\r\n\r\nexport const selectHiddenCategoryConfigurations = state => state.hiddenCategoryConfigurations;\r\n\r\nexport const toggleModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const toggleOptionChoiceModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('control-choice-modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport default viewerSlice.reducer;\r\n","import Sketchfab from '@sketchfab/viewer-api';\r\nimport { buildTextureOptions } from './utils'\r\nimport {\r\n    setSketchfabAPI,\r\n    setAnimations,\r\n    setControls,\r\n    setTextureControls,\r\n    toggleDisableButtons,\r\n    setSceneGraph,\r\n    setMaterials,\r\n    setMaterialNameSegmentMap,\r\n    setSurfaceOptionMap,\r\n    setSurfaceAttributeNameMap,\r\n} from './viewerSlice';\r\n\r\nconst initializeViewer = modelId => dispatch => {\r\n\r\n    dispatch(setControls([]));\r\n  \r\n    var iframe = document.getElementById('api-frame');\r\n    var version = '1.8.2';\r\n    var DEFAULT_URLID = '66e17931c39e4042ac5aa8764bee7f5a';\r\n    var DEFAULT_PREFIX = 'seat ';\t\t\r\n    \r\n    var CONFIG = {\r\n        urlid: modelId !== '' ? modelId : DEFAULT_URLID,\r\n        prefix: DEFAULT_PREFIX\r\n    };\r\n    var isSeeking;\r\n    var animationsList = [];\r\n    var current_anim;\r\n    var apiSkfb;\r\n    var pollTime, duration;\r\n    var timeSlider;\r\n  \r\n    pollTime = function() {\r\n          apiSkfb.getCurrentTime(function(err, time) {\r\n                if (!isSeeking) {\r\n                    var percentage = (100 * time) / duration;\r\n                    timeSlider.value = percentage;\r\n                                        \r\n                    var timeDisplay = document.getElementById('timeDisplay');\r\n                    timeDisplay.innerHTML = time.toFixed(2);\r\n                    if (time == 2) {\r\n                      apiSkfb.seekTo(1);\r\n                    }\r\n                requestAnimationFrame(pollTime);\r\n              }\r\n          });\r\n    };\r\n  \r\n    var Configurator = {\r\n        api: null,\r\n        config: null,\r\n        options: [],\r\n  \r\n        init: function (config, iframe) {\r\n            this.config = config;\r\n            var client = new Sketchfab(version, iframe);\r\n            client.init(config.urlid, {\r\n                ui_controls: 0,\r\n                graph_optimizer: 0,\r\n                ui_animations: 0,\r\n                ui_watermark: 0,\r\n                ui_inspector: 0,\r\n                ui_stop: 0,\r\n                ui_infos: 0,\r\n  \r\n                success: function onSuccess(api) {\r\n                    var controls = document.getElementById('animationControls');\r\n                    var buttonsText = `\r\n                        <div style=\"display: flex; justify-content: center;\">\r\n                          <p id=\"timeDisplay\"></p>\r\n                          <p id=\"animationName\" style=\"margin-left: 50px;\"></p>\r\n                        </div>\r\n                        <button id=\"play\">Play</button>\r\n                        <button id=\"pause\">Pause</button>\r\n                        <button id=\"previous\">Previous</button>\r\n                        <button id=\"next\">Next</button>\r\n                        <input \r\n                          id=\"timeSlider\" \r\n                          class=\"slider timeSlider\" \r\n                          style=\"width:100%\" \r\n                          type=\"range\" \r\n                          min=\"0\" \r\n                          max=\"100\" \r\n                          step=\"0.1\" \r\n                          value=\"0\"\r\n                        />\r\n                    `;\r\n                \r\n                    controls.innerHTML = buttonsText;\r\n  \r\n                    apiSkfb = api;\r\n                    dispatch(setSketchfabAPI(api));\r\n                    api.start();\r\n                    api.addEventListener('viewerready', function () {\r\n                        this.api = api;\r\n                        api.pause();\r\n  \r\n                        api.getAnimations(function(err, animations) {\r\n                            animationsList = animations;\r\n  \r\n                            dispatch(setAnimations(animations));\r\n  \r\n                            if (animations.length == 0) {                            \r\n                                var controls = document.getElementById('animationControls');\r\n                                controls.innerHTML = \"\";\r\n                            } else {  \r\n                                document.getElementById('pause').addEventListener('click', function() {\r\n                                    api.pause();\r\n                                });\r\n      \r\n                                document.getElementById('play').addEventListener('click', function() {\r\n                                    api.play();\r\n                                });\r\n      \r\n                                document.getElementById('previous').addEventListener('click', function() {\r\n                                    if (current_anim === 0) current_anim = animationsList.length;\r\n                                    current_anim--;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n                    \r\n                                document.getElementById('next').addEventListener('click', function() {\r\n                                    current_anim++;\r\n                                    if (current_anim === animationsList.length) current_anim = 0;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n  \r\n                                var animationName = document.getElementById('animationName');\r\n                                animationName.innerHTML = animationsList[0][1];\r\n                                current_anim = 0;\r\n                                api.setCurrentAnimationByUID(animations[current_anim][0]);\r\n                                duration = animations[current_anim][2];\r\n                                isSeeking = false;\r\n                                timeSlider = document.getElementById('timeSlider');\r\n            \r\n                                timeSlider.addEventListener('change', function() {\r\n                                    isSeeking = false;\r\n  \r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                });\r\n            \r\n                                timeSlider.addEventListener('input', function() {\r\n                                    isSeeking = true;\r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                    api.pause();\r\n                                    api.seekTo(time);\r\n                                });\r\n                                \r\n                                pollTime();\r\n                            }\r\n                        });\r\n  \r\n                        \r\n                        dispatch(toggleDisableButtons());\r\n                        \r\n                        api.getSceneGraph(function(err, result) {\r\n                            if (err) {\r\n                                console.log('Error getting nodes');\r\n                                return;\r\n                            }                  \r\n                            dispatch(setSceneGraph(result))        \r\n                        });\r\n  \r\n                        api.getMaterialList(function(err, materials) {\r\n                            dispatch(setMaterials(materials));\r\n                            \r\n                            let surfaceOptions = buildTextureOptions(materials)\r\n                            \r\n                            dispatch(setMaterialNameSegmentMap(surfaceOptions.materialNameSegmentMap))\r\n                            dispatch(setSurfaceOptionMap(surfaceOptions.surfaceOptionMap))\r\n                            dispatch(setSurfaceAttributeNameMap(surfaceOptions.surfaceAttributeNameMap))\r\n                            dispatch(setTextureControls(surfaceOptions.surfaceControls))\r\n                        });\r\n                    }.bind(this));\r\n                }.bind(this),\r\n                error: function onError() {\r\n                    console.log('Viewer error');\r\n                }\r\n            });\r\n        }\r\n    }\r\n  \r\n    Configurator.init(CONFIG, iframe);\r\n  };\r\n\r\nexport default initializeViewer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectModelId, \r\n  setModelId, \r\n  toggleModalDisplay,\r\n  selectDisableButtons,\r\n} from './viewerSlice';\r\nimport initializeViewer from './initializeViewer';\r\n\r\nconst Header = () => {\r\n  const modelId = useSelector(selectModelId);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n  \r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Configurator Studio - v1.0.8</h1>\r\n\r\n      <div className=\"header__buttons\">\r\n        <input id=\"model-id-input\"\r\n          value={modelId}\r\n          onChange={e => dispatch(setModelId(e.target.value))}\r\n        />\r\n        <button \r\n          id=\"displayButton\"    \r\n          className=\"header__button\"      \r\n          onClick={() => dispatch(initializeViewer(modelId))}\r\n        >Load Model\r\n        </button>        \r\n        <button \r\n          id=\"export-javascript\"\r\n          className=\"header__button\"\r\n          disabled={disableButtons}\r\n          onClick={() => dispatch(toggleModalDisplay())}>Export</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Viewer = () => {\r\n\r\n    return (        \r\n        <div class=\"viewer\">\r\n            <iframe \r\n                src=\"\" \r\n                id=\"api-frame\" \r\n                title=\"sketchfab-viewer\"\r\n                allowfullscreen mozallowfullscreen=\"true\" \r\n                webkitallowfullscreen=\"true\"\r\n            ></iframe>\r\n            <div id=\"animationControls\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Viewer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleModalDisplay, \r\n\tselectControls, \r\n\tselectModelId,\r\n\tselectSceneGraph, \r\n\tselectMaterials,\r\n\tselectSurfaceOptionMap,\r\n\tselectSurfaceConfigurationMode,\r\n\tselectMaterialNameSegmentMap,\r\n\tselectHiddenCategoryConfigurations,\r\n} from './viewerSlice';\r\n\r\nconst ExportModal = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\tconst controls = useSelector(selectControls);\r\n\tconst modelId = useSelector(selectModelId);\r\n\tconst sceneGraph = useSelector(selectSceneGraph);\r\n\tconst materials = useSelector(selectMaterials);\r\n\tconst surfaceOptionMap = useSelector(selectSurfaceOptionMap);\r\n\tconst surfaceConfigurationMode = useSelector(selectSurfaceConfigurationMode)\r\n\tconst materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap)\r\n\tconst hiddenCategoryConfigurations = useSelector(selectHiddenCategoryConfigurations);\r\n\r\n\tconst configurationMaps = {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tmaterials,\r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\thiddenCategoryConfigurations,\r\n\t}\r\n\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Add This To Your Page</h1>\r\n                </div>\r\n                <textarea id=\"js-output\" value={createJSExport(configurationMaps)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst createJSExport = (configurationMaps) => {\r\n\tconst {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tmaterials,\r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\thiddenCategoryConfigurations,\r\n\t} = configurationMaps;\r\n\r\n\treturn (\r\n`\r\n// Sketchfab Viewer API: Change Texture/material\r\nvar version = '1.8.2';\r\nvar uid = '${modelId === '' ? '66e17931c39e4042ac5aa8764bee7f5a' : modelId}';\r\nvar iframe = document.getElementById('api-frame');\r\nvar client = new window.Sketchfab(version, iframe);\r\n\r\nvar myMaterials = ${JSON.stringify(materials)}\r\n\r\nvar error = function() {\r\n\tconsole.error('Sketchfab API error');\r\n};\r\n\r\nvar controls = ${JSON.stringify(controls)}\r\n\r\nvar sceneGraph = ${JSON.stringify(sceneGraph)}\r\n\r\nvar hiddenCategoryConfigurations = ${JSON.stringify(hiddenCategoryConfigurations)}\r\n\r\nvar surfaceConfigurationMode = ${surfaceConfigurationMode};\r\nvar surfaceOptionMap = ${JSON.stringify(surfaceOptionMap)};\r\nvar materialNameSegmentMap = ${JSON.stringify(materialNameSegmentMap)};\r\n\r\nvar animationObjects = {};\r\n\r\nvar controlsContainer = document.getElementById('sketchfab-lower-controls');\r\nvar toggleableItems = {};\r\nvar toggleableGroups = {};\r\n\r\nvar currentAnimation = \"\";\r\nvar currentAnimationEndTime = 0;\r\nvar isElementCategoryControlled = false;\r\nvar firstGroupingControlIndex = -1;\r\nvar appContainer = document.querySelector(\"div.sketchfab__container\")\r\n\r\nvar appWidth = Number(appContainer.style.width.replace(\"px\",\"\"))\r\nappContainer.style.display = \"block\"\r\n\r\nvar apiSkfb, pollTime;\r\n\r\nvar buildNodeNameArray = function(children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n\t\tif(children[i].name == undefined) {\r\n\t\t\tnameArrays.push({name: children[i].type, depth: depth, instanceID: children[i].instanceID});\r\n\t\t} else {\r\n\t\t\tnameArrays.push({name: children[i].name, depth: depth, instanceID: children[i].instanceID});\r\n\t\t}\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildNodeNameArray(children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\npollTime = function() {\r\n\tapiSkfb.getCurrentTime(function(err, time) {\r\n\t\t\r\n\t\tif (currentAnimationEndTime > 0 && time >= currentAnimationEndTime) {\r\n\t\t\tapiSkfb.pause();\r\n\t\t}\r\n\t\trequestAnimationFrame(pollTime);\r\n\t});\r\n};\r\n\r\nvar success = function(api) {\r\n    apiSkfb = api;\r\n\tapi.start(function() {\r\n\t\tapi.addEventListener('viewerready', function() {\r\n\t\t\tcategorySelectObserver = new MutationObserver(function(mutationsList, categorySelectObserver) {\r\n\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tapi.pause();\r\n\t\t\t\r\n\t\t\tvar animations = [];\r\n\t\t\tfor (let i = 0; i < controls.length; ++i) {\t\r\n\t\t\t\tif (controls[i].type == \"animation\") {\r\n\t\t\t\t\tvar animationControls = document.getElementById(\"sketchfab-animation-controls\")\r\n\t\t\t\t\tanimationControls.style.display = \"block\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar animationButtonContainer = document.getElementById(\"sketchfab-animation-buttons\")\r\n\t\t\t\t\tvar animationButton = document.createElement(\"button\")\r\n\t\t\t\t\tanimationButton.id = \"animation-\" + controls[i].id\r\n\t\t\t\t\tanimationButton.textContent = controls[i].name;\r\n\t\t\t\t\tanimationButton.addEventListener('click', function(e) {\r\n\t\t\t\t\t\tvar animationId = e.target.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar startTime = animationObjects[animationId].startTime;\r\n\t\t\t\t\t\tvar endTime = animationObjects[animationId].endTime;\r\n\t\t\t\t\t\tvar animationUID = animationObjects[animationId].uid;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcurrentAnimationEndTime = endTime;\r\n\t\t\t\t\t\tapi.setCurrentAnimationByUID(animationUID);\r\n\t\t\t\t\t\tapi.seekTo(startTime);\r\n\t\t\t\t\t\tapi.play();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tanimationButtonContainer.appendChild(animationButton)\r\n\t\t\t\t\t\r\n\t\t\t\t\tanimations.push(controls[i]);\r\n\t\t\t\t\tanimationObjects[controls[i].id] = {name: controls[i].name, startTime: Number(controls[i].configuration.startTime), endTime: Number(controls[i].configuration.endTime), uid: controls[i].configuration.animationUID}; \r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\");\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (controls[i].type == \"color\") {\r\n\t\t\t\t\tvar resetBut = document.createElement(\"button\");\r\n\t\t\t\t\tresetBut.innerHTML = \"Reset\";\r\n\t\t\t\t\tresetBut.onclick = function(e) {\t\r\n\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\tm = JSON.parse(JSON.stringify(controls[i].entity));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(resetBut);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let j = 0; j < controls[i].additionalColors.length; ++j) {\r\n\t\t\t\t\t\tvar colorBut = document.createElement(\"button\");\r\n\r\n\t\t\t\t\t\tcolorBut.innerHTML = controls[i].additionalColors[j].name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcolorBut.id = controls[i].id + \"-\" + controls[i].name\r\n\t\t\t\t\t\tcolorBut.onclick = function(e) {\t\r\n\t\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.enable = true;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.enable = true;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.enable = false;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.factor = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(colorBut);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if (controls[i].type === \"geometryCategory\") {\t\r\n\t\t\t\t\tisElementCategoryControlled = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar wrapper = initializeGeometrySelect(i);\r\n\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var j=0; j<controls[i].configuration.geometries.length; ++j) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\tif (j===0) {\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar name = controls[i].configuration.geometries[j].designation;\r\n\t\t\t\t\t\tvar humanReadable = controls[i].configuration.geometries[j].humanReadable;\r\n\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\tcustomOption.id = name + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\tcustomOption.addEventListener('click', function(e) {\r\n\t\t\t\t\t\t\thandleUpdateSelect(e);\r\n\t\t\t\t\t\t\tvar idArray = e.target.id.split(\"-\")\r\n\t\t\t\t\t\t\tvar optionName = idArray[0]\r\n\t\t\t\t\t\t\tvar allCategoryOptions = document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-option\")\r\n\t\t\t\t\t\t\tfor (var k=0; k<allCategoryOptions.length; ++k) {\r\n\t\t\t\t\t\t\t\tallCategoryOptions[k].style.visibility = \"visible\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar currentCategorySelections = Array.from(document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-select\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(select => !select.classList.contains(\"sketchfab-select-open\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(select => select.querySelector(\".sketchfab-select-value\").textContent)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcurrentCategorySelections.push(optionName)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<currentCategorySelections.length; ++k) {\r\n\t\t\t\t\t\t\t\tvar selectionName = currentCategorySelections[k];\r\n\t\t\t\t\t\t\t\tif (hiddenCategoryConfigurations[selectionName] !== undefined) {\r\n\t\t\t\t\t\t\t\t\tfor (var l=0; l<hiddenCategoryConfigurations[selectionName].length; ++l) {\r\n\t\t\t\t\t\t\t\t\t\tvar nameToHide = hiddenCategoryConfigurations[selectionName][l]\r\n\t\t\t\t\t\t\t\t\t\tvar optionToHide = document.querySelector(\"[data-value='\" + nameToHide + \"']\")\r\n\t\t\t\t\t\t\t\t\t\toptionToHide.style.visibility = \"hidden\"\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tdisableAnimations();\r\n\t\t\t\t\t\t\thandleHidingOptions(optionName);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t} else if (controls[i].type === \"textureCategory\") {\t\t\r\n\t\t\t\t\tconst { geometryName, options, isPrimary, ordering } = controls[i].configuration\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar initialValue = options[0].name;\r\n\t\t\t\t\tvar wrapper = initializeTextureSelect(geometryName, controls[i].name, initialValue)\r\n\t\t\t\t\twrapper.classList.add(\"sketchfab-texture-category\")\r\n\t\t\t\t\twrapper.id = geometryName + \"-\" + ordering;\r\n\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var j=0; j<options.length; ++j) {\r\n\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\tif (j===0) {\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconst { name, humanReadable } = options[j];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + geometryName + \"-\" + j + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\tcustomOption.addEventListener('click', e => {\r\n\t\t\t\t\t\t\t\thandleUpdateSelect(e);\t\t\t\r\n\t\t\t\t\t\t\t\thandleHidingTextureOptions(api)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\r\n\t\t\t\t\t\t\r\n\t\t\t\t} else if (controls[i].type == \"toggle\") {\r\n\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\tvar toggleBut = document.createElement(\"button\");\r\n\t\t\t\t\ttoggleBut.innerHTML = \"Toggle \" + controls[i].name;\r\n\t\t\t\t\ttoggleBut.id = controls[i].entity.instanceID;\r\n\t\t\t\t\ttoggleBut.onclick = function(e) {\r\n\t\t\t\t\t\tvar isVisible = toggleableItems[e.target.id];\r\n\t\t\t\t\t\tif (isVisible == \"visible\") {\r\n\t\t\t\t\t\t\tapi.hide(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"hidden\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tapi.show(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(toggleBut);\r\n\t\t\t\t}\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//show/hide to OG specification\r\n\t\t\tif (isElementCategoryControlled) {\r\n\t\t\t\twindow.addEventListener('click', function(e) {\r\n\t\t\t\t\tfor (const select of document.querySelectorAll('.sketchfab-select')) {\r\n\t\t\t\t\t\tif (!select.contains(e.target)) {\r\n\t\t\t\t\t\t\tselect.classList.remove('sketchfab-select-open');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t\thandleHidingOptions();\r\n\t\t\t\tdisableAnimations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (animations.length > 0) {\r\n\t\t\t\tpollTime();\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tif (surfaceConfigurationMode) {\r\n\t\t\t\thandleHidingTextureOptions(api)\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\nclient.init(uid, {\r\n\tsuccess: success,\r\n\terror: error,\r\n\tautostart: 0,\r\n\tpreload: 0,\r\n\tui_animations: 0,\r\n\tui_watermark: 0,\r\n\tui_inspector: 0,\r\n\tui_stop: 0,\r\n\tui_infos: 0,\r\n});\r\n\r\nvar handleHidingTextureOptions = function(api) {\r\n\tconsole.log(\"BEGIN: handleHidingTextureOptions\")\r\n\t\r\n\tvar textureSelects = document.getElementsByClassName(\"sketchfab-texture-category\")\t\r\n\tfor (var i=0; i<textureSelects.length; ++i) {\r\n\t\tvar options = textureSelects[i].getElementsByClassName(\"sketchfab-option\");\r\n\t\tvar geometryName = textureSelects[i].id.split(\"-\")[0]\r\n\t\tvar ordering = textureSelects[i].id.split(\"-\")[1]\r\n\t\tvar isPrimary = Number(ordering) === 0;\r\n\t\tif (!isPrimary) {\r\n\t\t\tvar currentInitialPrimarySelection = document.getElementById(geometryName + \"-0\").querySelector(\".sketchfab-select__trigger span\").textContent;\r\n\t\t\tvar availableOptions = surfaceOptionMap[geometryName][currentInitialPrimarySelection][ordering-1]\r\n\t\t\tvar previouslyAvailableOptions =  Array.from(options).filter(op => op.style.display === \"block\").map(op => op.getAttribute(\"data-value\"))\r\n\t\t\tlet equal = availableOptions.length == previouslyAvailableOptions.length && availableOptions.every((element, index)=> element === previouslyAvailableOptions[index] );\r\n\t\t\t\r\n\t\t\tvar triggerSpan = textureSelects[i].querySelector(\".sketchfab-select__trigger span\")\r\n\t\t\t\r\n\t\t\tif (!equal) {\r\n\t\t\t\tvar newValue = availableOptions[0];\r\n\t\t\t\ttriggerSpan.textContent = newValue;\r\n\t\t\t\tfor (var j=0; j<options.length; ++j) {\r\n\t\t\t\t\toptions[j].classList.remove(\"selected\")\r\n\t\t\t\t\tvar optionValue = options[j].getAttribute(\"data-value\")\r\n\t\t\t\t\tif (optionValue === newValue) {\r\n\t\t\t\t\t\toptions[j].classList.add(\"selected\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\toptions[j].style.display = \"none\"\r\n\t\t\t\t\tvar optionValue = options[j].getAttribute(\"data-value\")\r\n\t\t\t\t\tif (availableOptions.includes(optionValue)) {\r\n\t\t\t\t\t\toptions[j].style.display = \"block\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor (var i=0; i<textureSelects.length; ++i) {\r\n\t\tvar geometryName = textureSelects[i].id.split(\"-\")[0]\r\n\t\tconfigureMaterials(geometryName, api)\t\t\r\n\t}\r\n\r\n\tconsole.log(\"END: handleHidingTextureOptions\")\r\n}\r\n\r\nvar configureMaterials = function(geometryName, api) {\r\n\tconsole.log(\"BEGIN: configureMaterials\")\r\n\tconsole.log(arguments)\r\n\t//get array of selected values\r\n\tvar relevantSelects = document.getElementsByClassName(geometryName + \"-triggerSpan\")\r\n\tconsole.log(\"relevantSelects:\")\r\n\tconsole.log(relevantSelects)\r\n\t//build name string via accessing selected values\r\n\tvar materialNameString = geometryName + \"-\";\r\n\t\r\n\tfor (var k=0; k<relevantSelects.length; ++k) {\r\n\t\tmaterialNameString += relevantSelects[k].textContent + \"-\";\r\n\t}\r\n\tconsole.log(\"materialNameString:\")\r\n\tconsole.log(materialNameString)\r\n\tvar newMaterial;\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name.startsWith(materialNameString)) {\r\n\t\t\tnewMaterial = JSON.parse(JSON.stringify(myMaterials[k]));\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"newMaterial:\")\r\n\tconsole.log(newMaterial)\r\n\t\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name === geometryName) {\r\n\t\t\tmyMaterials[k].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\tmyMaterials[k].reflection = newMaterial.reflection;\r\n\t\t\tmyMaterials[k].reflector = newMaterial.reflector;\r\n\t\t\tmyMaterials[k].shadeless = newMaterial.shadeless;\r\n\t\t\tapi.setMaterial(myMaterials[k], function() {console.log(\"material updated\")})\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"END: configureMaterials\")\r\n}\r\n\r\nvar setVisibleNodes = function(api) {\r\n\t\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-geometry-category span.sketchfab-select-value\")\r\n\tvar selectedPrefixes = [];\r\n\t\r\n\tfor (var j=0; j<allCategorySelects.length; ++j) {\r\n\t\tselectedPrefixes.push(allCategorySelects[j].textContent);\r\n\t}\r\n\t\r\n\tvar allLetters = [];\r\n\tvar relevantNodes = [];\r\n\t\r\n\tfor (var j=0; j<sceneGraph.length; ++j) {\r\n\t\tvar indexContainingCodes = j;\r\n\t\tvar isMatrixTransform = false;\r\n\t\tif (sceneGraph[j].name === \"MatrixTransform\") {\r\n\t\t\tindexContainingCodes = j - 1;\r\n\t\t\tisMatrixTransform = true;\r\n\t\t}\r\n\t\t\r\n\t\tvar nodeNameArray = sceneGraph[indexContainingCodes].name.split(\"-\")\r\n\t\tvar currentNodeDesignation = nodeNameArray[0];\r\n\t\tvar currentNodeLetterCode = nodeNameArray[1];\r\n\t\tapi.hide(sceneGraph[indexContainingCodes].instanceID);\r\n\t\tif(selectedPrefixes.includes(\"SGBCC\")) {\r\n\t\t\tif (sceneGraph[indexContainingCodes].name == \"JBXCC-C-Housing\") {\r\n\t\t\t\tapi.show(sceneGraph[indexContainingCodes].instanceID)\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t}\t\t\r\n\t\t\r\n\t\tif (selectedPrefixes.includes(currentNodeDesignation)) {\r\n\t\t\tfor (var k=0; k<currentNodeLetterCode.length; ++k) {\r\n\t\t\t\tallLetters.push(currentNodeLetterCode[k]);\r\n\t\t\t\trelevantNodes.push({letterCode: currentNodeLetterCode[k], instanceID: sceneGraph[j].instanceID})\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\t\r\n\t\r\n\tvar commonLetter = mode(allLetters)[0]\r\n\t\r\n\tfor (var j=0; j<relevantNodes.length; ++j) {\r\n\t\tif (relevantNodes[j].letterCode.indexOf(commonLetter) != -1) {\r\n\t\t\tapi.show(relevantNodes[j].instanceID);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar mode = function(arr) { \r\n\tif(arr.filter((x,index) => arr.indexOf(x) == index).length == arr.length) {\r\n\t\treturn arr; \r\n\t} else {\r\n\t\treturn mode(arr.sort((x,index)=>x-index).map((x,index)=>arr.indexOf(x)!=index ? x : null ).filter(x=>x!=null))\r\n\t}\t\t\r\n}\r\n\r\nvar setNonPrimarySurfaceConfiguration = function(e, api) {\r\n\tconsole.log(\"BEGIN: setNonPrimarySurfaceConfiguration\")\r\n\thandleUpdateSelect(e);\r\n\tvar geometryName = e.target.id.split(\"-\")[1]\r\n\tvar attributeIndex = e.target.id.split(\"-\")[2]\r\n\tconfigureMaterials(geometryName, api)\r\n\t\r\n\tconsole.log(\"END: setNonPrimarySurfaceConfiguration\")\r\n}\r\n\r\nvar handleUpdateSelect = function(e) {\r\n\tconsole.log(\"BEGIN: handleUpdateSelect\")\r\n\tvar nameCode = e.target.id.split(\"-\")[0]\r\n\t\r\n\tif (!e.target.classList.contains('selected')) {\r\n\t\t\r\n\t\te.target.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\te.target.classList.add('selected');\r\n\t\te.target.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t}\r\n\tconsole.log(\"END: handleUpdateSelect\")\r\n}\r\n\r\n\r\nvar handleHidingOptions = function(optionName=\"\") {\r\n\tvar allCategoryOptions = document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-option\")\r\n\tfor (var k=0; k<allCategoryOptions.length; ++k) {\r\n\t\tallCategoryOptions[k].style.visibility = \"visible\";\r\n\t}\r\n\t\r\n\tvar currentCategorySelections = Array.from(document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-select\"))\r\n\t\t\t\t\t\t\t.filter(select => !select.classList.contains(\"sketchfab-select-open\"))\r\n\t\t\t\t\t\t\t.map(select => select.querySelector(\".sketchfab-select-value\").textContent)\r\n\t\t\t\t\t\t\t\r\n\tcurrentCategorySelections.push(optionName)\r\n\t\r\n\tfor (var k=0; k<currentCategorySelections.length; ++k) {\r\n\t\tvar selectionName = currentCategorySelections[k];\r\n\t\tif (hiddenCategoryConfigurations[selectionName] !== undefined) {\r\n\t\t\tfor (var l=0; l<hiddenCategoryConfigurations[selectionName].length; ++l) {\r\n\t\t\t\tvar nameToHide = hiddenCategoryConfigurations[selectionName][l]\r\n\t\t\t\tvar optionToHide = document.querySelector(\"[data-value='\" + nameToHide + \"']\")\r\n\t\t\t\toptionToHide.style.visibility = \"hidden\"\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar disableAnimations = function() {\t\t\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-geometry-category span.sketchfab-select-value\")\r\n\tvar allowAnimations = true;\r\n\tfor (var i=0; i<allCategorySelects.length; ++i) {\r\n\t\tvar controlIndex = allCategorySelects[i].id.split(\"-\")[1]\r\n\t\tvar currentNameCode = allCategorySelects[i].textContent;\r\n\t\tfor (var j=0; j<controls[controlIndex].configuration.geometries.length; ++j) {\r\n\t\t\tif (controls[controlIndex].configuration.geometries[j].designation === currentNameCode) {\r\n\t\t\t\tconsole.log(\"found matching geometry in control\")\r\n\t\t\t\tif (controls[controlIndex].configuration.geometries[j].allowsAnimation === false) {\r\n\t\t\t\t\tallowAnimations = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar animationButtons = document.querySelectorAll(\"#sketchfab-animation-buttons button\")\r\n\tfor (var i=0; i<animationButtons.length; ++i) {\r\n\t\tanimationButtons[i].disabled = true;\r\n\t}\r\n\tif (allowAnimations) {\r\n\t\tfor (var i=0; i<animationButtons.length; ++i) {\r\n\t\t\tanimationButtons[i].disabled = false;\r\n\t\t}\t\t\t\t\t\t\r\n\t}\r\n}\r\n\r\nvar initializeGeometrySelect = function(controlIndex) {\r\n\t\t\t\t\t\r\n\tvar wrapper = document.createElement(\"div\")\r\n\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\twrapper.classList.add(\"sketchfab-geometry-category\")\r\n\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\r\n\tvar select = document.createElement(\"div\")\r\n\tselect.classList.add(\"sketchfab-select\")\r\n\t\r\n\tvar selectTrigger = document.createElement(\"div\")\r\n\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\r\n\tvar triggerSpan = document.createElement(\"span\")\r\n\ttriggerSpan.textContent = controls[controlIndex].configuration.geometries[0].designation;\r\n\ttriggerSpan.id = \"triggerSpan-\" + controlIndex;\r\n\ttriggerSpan.classList.add(\"sketchfab-select-value\")\r\n\tselectTrigger.appendChild(triggerSpan)\r\n\t\r\n\tvar arrow = document.createElement(\"div\")\r\n\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\tselectTrigger.appendChild(arrow)\t\t\t\t\t\r\n\tselect.appendChild(selectTrigger)\r\n\t\r\n\tvar customOptions = document.createElement(\"div\")\r\n\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\tvar selectTitle = document.createElement(\"h3\")\r\n\tselectTitle.classList.add(\"sketchfab-title\")\r\n\tselectTitle.textContent = controls[controlIndex].name;\r\n\tcustomOptions.appendChild(selectTitle)\r\n\tselect.appendChild(customOptions)\r\n\twrapper.appendChild(select)\t\r\n\r\n\twrapper.addEventListener('click', function() {\r\n\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t})\r\n\r\n\tcategorySelectObserver.observe(triggerSpan, {characterData: false, childList: true, attributes: false});\r\n\t\r\n\treturn wrapper;\r\n}\r\n\r\nvar initializeTextureSelect = function(geometryName, selectName, initialValue) {\r\n\tvar wrapper = document.createElement(\"div\")\r\n\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\r\n\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\r\n\tvar select = document.createElement(\"div\")\r\n\tselect.classList.add(\"sketchfab-select\")\r\n\tvar selectTrigger = document.createElement(\"div\")\r\n\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\tvar triggerSpan = document.createElement(\"span\")\r\n\ttriggerSpan.textContent = initialValue;\r\n\ttriggerSpan.classList.add(geometryName + \"-triggerSpan\")\r\n\tselectTrigger.appendChild(triggerSpan)\r\n\tvar arrow = document.createElement(\"div\")\r\n\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\tselectTrigger.appendChild(arrow)\r\n\t\r\n\tvar customOptions = document.createElement(\"div\")\r\n\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\tvar selectTitle = document.createElement(\"h3\")\r\n\tselectTitle.classList.add(\"sketchfab-title\")\r\n\tselectTitle.textContent = selectName;\r\n\tcustomOptions.appendChild(selectTitle)\r\n\t\r\n\tselect.appendChild(selectTrigger)\r\n\tselect.appendChild(customOptions)\r\n\twrapper.appendChild(select)\t\r\n\r\n\twrapper.addEventListener('click', function() {\r\n\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t})\r\n\t\r\n\treturn wrapper;\r\n}\r\n\r\n\r\n\r\n\r\n`\r\n)\r\n}\r\n\r\nexport default ExportModal;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { \r\n    createControl, \r\n    toggleOptionChoiceModalDisplay,\r\n    selectSurfaceConfigurationMode,\r\n    setSurfaceConfigurationMode,\r\n    addTextureControls,\r\n} from './viewerSlice';\r\n\r\nconst OptionChoiceModal = () => {\r\n    const dispatch = useDispatch();\r\n    const isSurfaceConfigurationMode = useSelector(selectSurfaceConfigurationMode)\r\n\r\n    return (\r\n        <div id=\"control-choice-modal\">\r\n            <div className=\"control-choice-content\">\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"animation\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Animation</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"color\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}\r\n                >Color</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"geometryCategory\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Geometry Category</div>\r\n                <div className=\"control-choice\" style={{visibility: isSurfaceConfigurationMode ? \"hidden\" : \"visible\"}} onClick={() => {\r\n                    if (isSurfaceConfigurationMode === false) {\r\n                        dispatch(toggleOptionChoiceModalDisplay());\r\n                        dispatch(addTextureControls())\r\n                        dispatch(setSurfaceConfigurationMode(true))\r\n                    }\r\n                }}>Texture Configuration</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"toggle\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Toggle</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionChoiceModal;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectAnimations,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nconst AnimationPanel = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const animations = useSelector(selectAnimations);\r\n\r\n    const animationOptions = animations.map(animation => <option value={animation[0]}>{animation[1]}</option>)\r\n    animationOptions.unshift(<option value=\"none\">Select an Animation</option>)\r\n\r\n    return (\r\n      <div style={{display: \"flex\", alignItems: \"flex-start\", flexDirection: \"column\"}}>\r\n        <div>\r\n          <label>Animation:</label>\r\n          <select \r\n            name=\"animationSelect\"\r\n            value={option.configuration.animationUID}\r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                animationUID: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          >\r\n            {animationOptions}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"start\">Start Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"start\"\r\n            value={option.configuration.startTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                startTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end\">End Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"end\"\r\n            value={option.configuration.endTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                endTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AnimationPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectMaterials, \r\n  updateControl,\r\n} from './viewerSlice';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nconst ColorPanel = props => {\r\n\r\n    const dispatch = useDispatch(); \r\n    const { option } = props\r\n    const materials = useSelector(selectMaterials); \r\n\r\n    return (\r\n    <div>\r\n      <div className=\"input__container\">\r\n        <label htmlFor=\"materials\">Material:</label>\r\n        {renderColorsOption(option, materials, dispatch)}\r\n      </div>\r\n      <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n        {renderAdditionalColors(option.id, option.additionalColors, dispatch)}\r\n      </div>\r\n      <div className=\"input__container\">\r\n        <button \r\n          id=\"addColor\"\r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.additionalColors === undefined || option.additionalColors === null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"additionalColors\", \r\n                  value: [{color:\"#ffffff\", name: \"white\", colorRGB: [1,1,1]}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newColors = [];\r\n              for (let i = 0; i<option.additionalColors.length; ++i) {\r\n                newColors[i] = option.additionalColors[i];\r\n              }\r\n              newColors.push({color: \"#ffffff\", name: \"default\", colorRGB: [1,1,1]});\r\n              dispatch(updateControl({id: option.id, key: \"additionalColors\", value: newColors}));\r\n            }\r\n          }}\r\n        >+ Add Color</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst renderAdditionalColors = (id, additionalColors, dispatch) => {\r\n    if (additionalColors == null || additionalColors == undefined) {\r\n      return <div></div>\r\n    } else {\r\n      return additionalColors.map((color, index, array) => (\r\n        <div className=\"input__container\">\r\n          <label htmlFor=\"defaultColor\">Alternate Color:</label>\r\n          <input \r\n            type=\"color\" \r\n            name=\"additionalColor\" \r\n            id={`${id}-${index}-additionalColor`} \r\n            value={additionalColors[index].color}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = e.target.value;\r\n                  newColor.colorRGB = hexRgb(e.target.value, {format: 'array'}).map(num => num/255);\r\n                  newColor.name = array[i].name;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={additionalColors[index].name}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = e.target.value;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n        </div>\r\n      ))\r\n    }\r\n  }\r\n  \r\nconst renderColorsOption = (option, materials, dispatch) => {\r\n  \r\n    const materialsHtml = materials.map((material, index) => <option value={index}>{material.name}</option>)\r\n    materialsHtml.unshift(<option value=\"none\">Select a Material</option>)\r\n\r\n    return (\r\n      <select \r\n        name=\"materials\" \r\n        id=\"materials\"\r\n        onChange={(e) => {\r\n          dispatch(updateControl({id: option.id, key: \"entityIndex\", value: e.target.value }));\r\n          dispatch(updateControl({id: option.id, key: \"entity\", value: materials[e.target.value] }));\r\n        }}\r\n        value={option.entityIndex}\r\n      >\r\n        {materialsHtml}\r\n      </select>\r\n    )\r\n}\r\n\r\nexport default ColorPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectGroupingOptions,\r\n  selectHiddenCategoryConfigurations,\r\n  selectControls,\r\n  setUnselectedGeometries,\r\n  setHiddenCategoryConfigurations,\r\n  updateControl,\r\n} from './viewerSlice';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst ElementCategoryPanel = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const unselectedGeometries = useSelector(selectGroupingOptions);\r\n    const selectedGeometries = option.configuration.geometries;\r\n    const hiddenCategoryConfigurations = useSelector(selectHiddenCategoryConfigurations);\r\n    const controls = useSelector(selectControls)\r\n\r\n    const renderUnselectedGeometryMultiselect = () => unselectedGeometries.map((geometry, index) => (\r\n            <div \r\n              key={`element-${option.id}-${index}`} \r\n              className=\"geometry-option\"\r\n              style={{display: \"flex\"}} \r\n              onClick={() => {\r\n                let newUnselectedGeometries = JSON.parse(JSON.stringify(unselectedGeometries))\r\n                let selectedGeometry = newUnselectedGeometries.splice(index, 1)[0]\r\n                let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                newConfiguration.geometries.push(selectedGeometry)\r\n                dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n                dispatch(setUnselectedGeometries(newUnselectedGeometries))\r\n              }}\r\n            >\r\n              <div>{geometry.designation}</div>\r\n            </div>\r\n          ))\r\n\r\n    const renderSelectedGeometryMultiselect = () => {     \r\n\r\n      return selectedGeometries.map((geometry, index) => {\r\n        \r\n        return (\r\n          <div style={{display: \"flex\"}}>\r\n          <div key={`element-${option.id}-${index}`}>\r\n            <div style={{display: \"flex\"}}>\r\n              <div style={{display: \"flex\", flex: \"1 1 auto\", fontWeight: \"bold\"}}>\r\n                <div>{geometry.designation}</div>\r\n              </div>\r\n              <div>Animation:</div>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={geometry.allowsAnimation}\r\n                onChange={() => {\r\n                  let newGeometries = JSON.parse(JSON.stringify(selectedGeometries))\r\n                  newGeometries[index].allowsAnimation = !geometry.allowsAnimation;\r\n                  setSelectedGeometries(newGeometries)\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{display: \"flex\"}}>\r\n              <div>Name:</div>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter human readable name\"\r\n                value={geometry.humanReadable}\r\n                onChange={e => {\r\n                  let newGeometries = JSON.parse(JSON.stringify(selectedGeometries))\r\n                  newGeometries[index].humanReadable = e.target.value;\r\n                  setSelectedGeometries(newGeometries)\r\n                }}\r\n              />\r\n            </div>\r\n            {renderDisableMultiSelect(geometry.designation)}\r\n          </div>\r\n          <div style={{display: \"flex\", flex: \"1 1 auto\"}}>\r\n              <button \r\n                title=\"Remove option\"\r\n                onClick={() => {\r\n                  let newUnselectedGeometries = JSON.parse(JSON.stringify(unselectedGeometries))\r\n                  let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                  let unSelectedGeometry = newConfiguration.geometries.splice(index, 1)[0]\r\n                  newUnselectedGeometries.unshift(unSelectedGeometry)\r\n                  dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n                  dispatch(setUnselectedGeometries(newUnselectedGeometries))\r\n                }}\r\n              >\r\n                <svg \r\n                  fill=\"currentColor\" \r\n                  preserveAspectRatio=\"xMidYMid meet\" \r\n                  height=\"1em\" \r\n                  width=\"1em\" \r\n                  viewBox=\"0 0 40 40\" \r\n                  style={{verticalAlign: \"middle\"}}\r\n                >\r\n                  <g>\r\n                    <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n                    0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n                    0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n                    0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n                    0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n                    0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n                    1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n                    0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n                    3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n                  </g>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n\r\n    const renderDisableMultiSelect = (currentElementDesignation) => {\r\n    \r\n      var multiSelects = [];\r\n      for (let i=0; i<controls.length; ++i) {\r\n        if (controls[i].type === \"geometryCategory\" && controls[i].id !== option.id) {\r\n          \r\n          var multiSelect = controls[i].configuration.geometries.map(element => {\r\n            let showChecked = false;\r\n            \r\n            if (hiddenCategoryConfigurations[currentElementDesignation] !== undefined) {\r\n              if (hiddenCategoryConfigurations[currentElementDesignation].includes(element.designation)) {\r\n                showChecked = true;\r\n              }\r\n            }\r\n            return (\r\n            <div style={{display: \"flex\"}}>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={showChecked}\r\n                onChange={() => {        \r\n                  let newHiddenCategoryConfigurations = JSON.parse(JSON.stringify(hiddenCategoryConfigurations))\r\n                  if(showChecked) {\r\n                    newHiddenCategoryConfigurations[currentElementDesignation] = newHiddenCategoryConfigurations[currentElementDesignation].filter(hiddenElementDesignation => hiddenElementDesignation !== element.designation)\r\n                    newHiddenCategoryConfigurations[element.designation] = newHiddenCategoryConfigurations[element.designation].filter(hiddenElementDesignation => hiddenElementDesignation !== currentElementDesignation)\r\n                  } else {\r\n                    if (newHiddenCategoryConfigurations[currentElementDesignation] === undefined) {\r\n                      newHiddenCategoryConfigurations[currentElementDesignation] = [];\r\n                    }\r\n                    newHiddenCategoryConfigurations[currentElementDesignation].push(element.designation)\r\n                    if(newHiddenCategoryConfigurations[element.designation] === undefined) {\r\n                      newHiddenCategoryConfigurations[element.designation] = [];\r\n                    }\r\n                    newHiddenCategoryConfigurations[element.designation].push(currentElementDesignation);\r\n                  }\r\n\r\n                  dispatch(setHiddenCategoryConfigurations(newHiddenCategoryConfigurations))\r\n                }}\r\n              />\r\n              <div>{element.designation}</div>\r\n            </div>            \r\n            )\r\n          })\r\n          multiSelects.push(\r\n            <div>\r\n              <div style={{marginLeft: 4, color: \"blue\"}}>{controls[i].name}</div>\r\n              {multiSelect}\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n      return (\r\n        <div style={{textAlign: \"left\", marginLeft: 16}}>\r\n          <div style={{marginLeft: 4}}>Disable when selected:</div>\r\n          {multiSelects}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const renderDisableMultiSelectOld = (index) => {\r\n    \r\n      var multiSelects = [];\r\n      for (let i=0; i<controls.length; ++i) {\r\n        if (controls[i].type === \"geometryCategory\" && controls[i].id !== option.id) {\r\n          var multiSelect = controls[i].configuration.geometries.map(element => {\r\n            let showChecked = false;\r\n            var currentElementDesignation = element.designation;\r\n            if (hiddenCategoryConfigurations[currentElementDesignation] !== undefined) {\r\n              if (hiddenCategoryConfigurations[currentElementDesignation].includes(element.designation)) {\r\n                showChecked = true;\r\n              }\r\n            }\r\n            return (\r\n            <div style={{display: \"flex\"}}>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={showChecked}\r\n                onChange={() => {        \r\n                  let newHiddenCategoryConfigurations = JSON.parse(JSON.stringify(hiddenCategoryConfigurations))\r\n                  if(showChecked) {\r\n                    newHiddenCategoryConfigurations[currentElementDesignation] = newHiddenCategoryConfigurations[currentElementDesignation].filter(hiddenElementDesignation => hiddenElementDesignation !== element.designation)\r\n                    newHiddenCategoryConfigurations[element.designation] = newHiddenCategoryConfigurations[element.designation].filter(hiddenElementDesignation => hiddenElementDesignation !== currentElementDesignation)\r\n                  } else {\r\n                    if (newHiddenCategoryConfigurations[currentElementDesignation] === undefined) {\r\n                      newHiddenCategoryConfigurations[currentElementDesignation] = [];\r\n                    }\r\n                    newHiddenCategoryConfigurations[currentElementDesignation].push(element.designation)\r\n                    if(newHiddenCategoryConfigurations[element.designation] === undefined) {\r\n                      newHiddenCategoryConfigurations[element.designation] = [];\r\n                    }\r\n                    newHiddenCategoryConfigurations[element.designation].push(currentElementDesignation);\r\n                  }\r\n\r\n                  dispatch(setHiddenCategoryConfigurations(newHiddenCategoryConfigurations))\r\n                }}\r\n              />\r\n              <div>{element.designation}</div>\r\n            </div>            \r\n            )\r\n          })\r\n          multiSelects.push(\r\n            <div>\r\n              <div>{controls[i].name}</div>\r\n              {multiSelect}\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    const setSelectedGeometries = (selectedGeometries) => {\r\n      let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n      newConfiguration.geometries = selectedGeometries\r\n      dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n          <div style={{display: \"flex\", color: \"blue\", fontWeight: \"bold\"}}>Selected Geometries: {option.configuration.geometries.length}</div>\r\n          <div style={{borderBottom: \"1px solid black\"}}>\r\n            <ReactSortable list={selectedGeometries} setList={selectedGeometries => setSelectedGeometries(selectedGeometries)}>\r\n              {renderSelectedGeometryMultiselect()}     \r\n            </ReactSortable>\r\n          </div>\r\n          <div style={{display: \"flex\", color: \"blue\", fontWeight: \"bold\"}}>Select A Geometry:</div>\r\n          {renderUnselectedGeometryMultiselect()}          \r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ElementCategoryPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    updateControl,\r\n    setMaterialNameSegmentMap,\r\n    selectMaterialNameSegmentMap,\r\n} from './viewerSlice';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst TextureConfigurationPanel = props => {\r\n    const { option } = props;\r\n    const dispatch = useDispatch();\r\n    const materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap);\r\n\r\n\r\n    const renderMaterialNameSegmentMapOld = () => Object.keys(materialNameSegmentMap).map(segment => {\r\n\r\n        if (option.configuration.options.includes(segment)) {\r\n            return (\r\n                <div>\r\n                    {segment}\r\n                    <input \r\n                    value={materialNameSegmentMap[segment]} \r\n                    onChange={(e) => {\r\n                        let newMaterialSegmentMap = JSON.parse(JSON.stringify(materialNameSegmentMap))\r\n                        newMaterialSegmentMap[segment] = e.target.value;\r\n                        dispatch(setMaterialNameSegmentMap(newMaterialSegmentMap))\r\n                    }}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    })\r\n\r\n    const renderMaterialNameSegmentMap = () => option.configuration.options.map((designation, index) => (\r\n        <div>\r\n            {designation.name}\r\n            <input \r\n                value={designation.humanReadable} \r\n                onChange={(e) => {\r\n                    let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                    newConfiguration.options[index].humanReadable = e.target.value;\r\n                    dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                }}\r\n            />\r\n        </div>\r\n    ))\r\n\r\n    const updateOptions = (newOptions) => {\r\n        let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n        newConfiguration.options = newOptions;\r\n        dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n          <div>\r\n            <h4>Code Name Map:</h4>\r\n            <ReactSortable list={option.configuration.options} setList={newOptions => updateOptions(newOptions)}>\r\n                {renderMaterialNameSegmentMap()}\r\n            </ReactSortable>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default TextureConfigurationPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nconst TogglePanel = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => <option value={node.instanceID}>{addDashes(node.depth)}{node.name}</option>)\r\n    sceneGraphHtml.unshift(<option value={0}>Select a Node</option>)\r\n  \r\n    return (\r\n      <select \r\n        name=\"nodes\" \r\n        id=\"nodes\"\r\n        className=\"material__select\"\r\n        value={option.entity.instanceID}\r\n        onChange={e => dispatch(updateControl({id: option.id, key: \"entity\", value: {instanceID: e.target.value}}))}\r\n      >\r\n        {sceneGraphHtml}\r\n      </select>\r\n    )\r\n}\r\n  \r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n\r\nexport default TogglePanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleOptionChoiceModalDisplay, \r\n  selectControls, \r\n  selectDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n} from './viewerSlice';\r\nimport AnimationPanel from './AnimationPanel';\r\nimport ColorPanel from './ColorPanel';\r\nimport ElementCategoryPanel from './ElementCategoryPanel'\r\nimport TextureConfigurationPanel from './TextureCategoryPanel';\r\nimport TogglePanel from './TogglePanel';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst OptionPanel = () => {  \r\n  \r\n  const options = useSelector(selectControls);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n\r\n  const dispatch = useDispatch();\r\n\r\nconst renderPanel = (option) => {\r\n  if (option.type === \"animation\") {\r\n    return <AnimationPanel option={option} />;\r\n  } else if (option.type === \"color\") {\r\n    return <ColorPanel option={option} />;\r\n  } else if (option.type === \"geometryCategory\") {\r\n    return <ElementCategoryPanel option={option} />;\r\n  } else if (option.type === \"textureCategory\") {\r\n    return <TextureConfigurationPanel option={option} />;\r\n  } else if (option.type === \"toggle\") {\r\n    return <TogglePanel option={option} />;\r\n  }\r\n}\r\n\r\nconst renderOptions = (options, dispatch) => {\r\n  \r\n  let optionsHtml = options.map((option, index, array) => (\r\n    <div className=\"single-option__panel\" key={`option-${index}`}>\r\n      <div className=\"single-option__header\">\r\n        <h3 className=\"single-option__title\">{option.id}. {option.type}</h3>\r\n        <button \r\n          id={`collapseButton${option.id}`}\r\n          className=\"collapse__button\"\r\n          onClick={(e) => dispatch(updateControl({\r\n            id: option.id,\r\n            key: \"isExpanded\",\r\n            value: !option.isExpanded\r\n          }))}\r\n        >\r\n          {option.isExpanded ? \"Collapse\" : \"Expand\"}\r\n        </button>\r\n        <button \r\n          title=\"Remove option\"\r\n          onClick={() => {\r\n            const newArray = array.filter(control => control.id !== option.id);\r\n            dispatch(setControls(newArray));\r\n          }}\r\n        >\r\n          <svg \r\n            fill=\"currentColor\" \r\n            preserveAspectRatio=\"xMidYMid meet\" \r\n            height=\"1em\" \r\n            width=\"1em\" \r\n            viewBox=\"0 0 40 40\" \r\n            style={{verticalAlign: \"middle\"}}\r\n          >\r\n            <g>\r\n              <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n              0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n              0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n              0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n              0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n              0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n              1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n              0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n              3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div style={{display: option.isExpanded ? \"block\" : \"none\"}}>\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Name:</p>\r\n          <input \r\n            type=\"text\" \r\n            name=\"colorName\" \r\n            id=\"colorName\" \r\n            value={option.name} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"name\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        {renderPanel(option)}\r\n      </div>\r\n    </div>\r\n  ))\r\n\r\n  return optionsHtml;\r\n}\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\", display: \"flex\", flexDirection: \"column\"}}>\r\n      <button \r\n        className=\"add-option add__button\" \r\n        disabled={disableButtons}\r\n        onClick={() => dispatch(toggleOptionChoiceModalDisplay())}\r\n      >+ Add Option</button>\r\n      <div className=\"single-option__panels__container\">\r\n        <ReactSortable list={options} setList={options => dispatch(setControls(options))}>\r\n          {renderOptions(options, dispatch)}\r\n        </ReactSortable>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OptionPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  selectSketchfabAPI,\r\n  setSceneGraphIsVisible,\r\n  selectSceneGraphIsVisible,\r\n  setAllNodesVisible,\r\n} from './viewerSlice';\r\n\r\nconst NodePanel = () => {\r\n    const dispatch = useDispatch()\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n    const sketchfabAPI = useSelector(selectSketchfabAPI);\r\n    const sceneGraphIsVisible = useSelector(selectSceneGraphIsVisible);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => {\r\n      return (\r\n        <div style={{display: \"flex\"}}>\r\n          <input \r\n            id={node.instanceID}\r\n            type=\"checkbox\" \r\n            checked={sceneGraphIsVisible[node.instanceID]}\r\n            onChange={(e) => {\r\n                if (e.target.checked) {\r\n                    sketchfabAPI.show(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: true}))\r\n                } else {\r\n                    sketchfabAPI.hide(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: false}))\r\n                }\r\n            }}\r\n          />\r\n          <div className=\"node-name\">{addDashes(node.depth)}{node.name}</div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    sceneGraphHtml.unshift(\r\n      <div style={{display: \"flex\",borderBottom: \"1px solid black\"}}>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={Object.values(sceneGraphIsVisible).reduce((accum, curr) => accum && curr)}\r\n          onChange={(e) => {\r\n            dispatch(setAllNodesVisible(e.target.checked))\r\n          }}\r\n        />\r\n        <div className=\"node-name\">All Nodes</div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n        <div id=\"nodeControls\">\r\n            {sceneGraphHtml}\r\n        </div>\r\n        <div id=\"animationControls\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n\r\nexport default NodePanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    setViewMode,\r\n    selectViewMode,\r\n    selectDisableButtons,\r\n} from './viewerSlice';\r\nimport OptionPanel from './OptionPanel';\r\nimport NodePanel from './NodePanel';\r\n\r\nconst ControlMenu = () => {\r\n    const dispatch = useDispatch();\r\n    const viewMode = useSelector(selectViewMode);\r\n    const disableButtons = useSelector(selectDisableButtons);\r\n\r\n    let nodesButtonStyles = {\r\n        backgroundColor: viewMode === \"nodes\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let optionsButtonStyles = {\r\n        backgroundColor: viewMode === \"options\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    const renderPanel = (viewMode) => {\r\n        if (viewMode === \"options\") {\r\n            return <OptionPanel />\r\n        } else if (viewMode === \"nodes\") {\r\n            return <NodePanel />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"control-menu\">\r\n            <div style={{display: \"flex\"}}>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={nodesButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"nodes\"))}\r\n                >Nodes</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={optionsButtonStyles}\r\n                    onClick={() => dispatch(setViewMode(\"options\"))}\r\n                >Options</button>\r\n            </div>\r\n            {renderPanel(viewMode)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlMenu;\r\n","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Viewer from './components/Viewer'\r\nimport ExportModal from './components/ExportModal';\r\nimport OptionChoiceModal from './components/OptionChoiceModal';\r\nimport ControlMenu from './components/ControlMenu';\r\nimport './App.css';\r\nimport './globals';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <Viewer />\r\n        <ControlMenu />\r\n        <ExportModal />\r\n        <OptionChoiceModal />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport viewerReducer from '../components/viewerSlice';\r\nimport logger from 'redux-logger';\r\n\r\nexport default configureStore({\r\n  reducer: viewerReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","var buildSceneGraph = function(state, children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n    if (children[i].type != \"Group\" && children[i].name != \"RootNode\") {\r\n      if(children[i].name == undefined) {\r\n        state.sceneGraph.push({\r\n          name: children[i].type, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      } else {\r\n        state.sceneGraph.push({\r\n          name: children[i].name, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      }\r\n    }\r\n    state.sceneGraphIsVisible[children[i].instanceID] = true\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildSceneGraph(state, children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar buildCategoryOptions = (state) => {   \r\n\r\n  let uniqueStrings = [];\r\n  let geometryCategoryOptions = [];\r\n  for (let i=0; i<state.sceneGraph.length; ++i) {\r\n    let nodeNameArray = state.sceneGraph[i].name.split(\"-\").filter(string => string != \"\")\r\n    let mainDesignation = nodeNameArray[0];\r\n    let capitalLetter = nodeNameArray[1];\r\n    let detailedTitle = nodeNameArray[2];\r\n    for (let i=3; i<nodeNameArray.length; ++i) {\r\n      detailedTitle += nodeNameArray[i];\r\n    }\r\n\r\n    const irrelevantStrings = [\"Group\", \"RootNode\", \"MatrixTransform\"];\r\n    if (uniqueStrings.indexOf(mainDesignation) == -1 &&\r\n      irrelevantStrings.indexOf(mainDesignation) == -1) {\r\n      uniqueStrings.push(mainDesignation);\r\n      geometryCategoryOptions.push({\r\n        instanceID: state.sceneGraph[i].instanceID,\r\n        designation: mainDesignation,\r\n        capitalLetter: capitalLetter,\r\n        detailedTitle: detailedTitle,\r\n        humanReadable: mainDesignation,\r\n        allowsAnimation: true,\r\n      })\r\n    }\r\n  }\r\n  geometryCategoryOptions.sort(function(a,b){return a.designation.charCodeAt(0)-b.designation.charCodeAt(0)})\r\n  state.groupingOptions = geometryCategoryOptions;\r\n}\r\n\r\nvar buildTextureOptions = (materials) => {  \r\n    let surfaceOptionMap = {};\r\n    let materialNameSegmentMap = {};\r\n    let surfaceAttributeNameMap = {};\r\n\r\n    let surfaceControls = [];\r\n    \r\n    for (let i=0; i<materials.length; ++i) {\r\n      var matches = materials[i].name.match(/[a-zA-Z]*-[A-Z]+-[a-zA-Z]+/g);\r\n    \r\n      if (matches !== null) {\r\n        let materialNameArray = materials[i].name.split(\"-\").filter(string => string != \"\")\r\n        let geometryName = materialNameArray[0];\r\n        let materialOptions = materials[i].name.match(/[A-Z]+-/g).map(option => option.replace(\"-\", \"\"));\r\n        let primaryValue = materialOptions[0];\r\n        \r\n        // generate material name segment map\r\n        for (let j=0; j<materialOptions.length; ++j) {\r\n          materialNameSegmentMap[materialOptions[j]] = materialOptions[j];\r\n        }\r\n\r\n        // generate select display\r\n        let isNewUniqueGeometry = surfaceOptionMap[geometryName] === undefined;\r\n        if (isNewUniqueGeometry) {\r\n          surfaceOptionMap[geometryName] = {}\r\n\r\n\r\n          surfaceControls.push({\r\n            name: geometryName + \" - Attribute 1\", \r\n            configuration: {\r\n              isPrimary: true,\r\n              ordering: 0,\r\n              geometryName: geometryName, \r\n              options: [{name: materialOptions[0], humanReadable: materialOptions[0]}]\r\n            },\r\n            entity: {instanceID: 0},\r\n            entityIndex: \"none\",\r\n            isExpanded: true,\r\n            type: \"textureCategory\",            \r\n          })\r\n\r\n          surfaceAttributeNameMap[geometryName] = [\"Attribute Name\"]\r\n          surfaceOptionMap[geometryName][materialOptions[0]] = [];\r\n          for (let j=1; j<materialOptions.length; ++j) {\r\n            surfaceAttributeNameMap[geometryName].push(\"Attribute Name\")\r\n            surfaceControls.push({\r\n              name: `${geometryName} - Attribute ${j+1}`, \r\n              configuration: {\r\n                isPrimary: false,\r\n                ordering: j,\r\n                geometryName: geometryName, \r\n                options: [{name: materialOptions[j], humanReadable: materialOptions[j]}]\r\n              },\r\n              entity: {instanceID: 0},\r\n              entityIndex: \"none\",\r\n              isExpanded: true,\r\n              type: \"textureCategory\",        \r\n            })\r\n            surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n          }\r\n        } else {\r\n          for (var j=0; j<surfaceControls.length; ++j) {\r\n            if (surfaceControls[j].configuration.geometryName === geometryName) {\r\n\r\n              var optionExists = false;\r\n              for (var k=0; k<surfaceControls[j].configuration.options.length; ++k) {\r\n                if (surfaceControls[j].configuration.options[k].name === materialOptions[0]) {\r\n                  optionExists = true;\r\n                  break;\r\n                }\r\n              }\r\n              if(optionExists === false) {\r\n                surfaceControls[j].configuration.options.push({name: materialOptions[0], humanReadable: materialOptions[0]})\r\n              }\r\n              for (var k=1; k<materialOptions.length; ++k) {\r\n                var optionExists = false;\r\n                for (var l=0; l<surfaceControls[j+k].configuration.options.length; ++l) {\r\n                  if (surfaceControls[j+k].configuration.options[l].name === materialOptions[k]) {\r\n                    optionExists = true;\r\n                    break;\r\n                  }\r\n                }\r\n                if (optionExists === false) {\r\n                  surfaceControls[j+k].configuration.options.push({name: materialOptions[k], humanReadable: materialOptions[k]})\r\n                }\r\n              }\r\n              break;\r\n            }\r\n          }\r\n\r\n          let isNewUniquePrimaryValue = surfaceOptionMap[geometryName][primaryValue] === undefined\r\n          if (isNewUniquePrimaryValue) {\r\n            surfaceOptionMap[geometryName][primaryValue] = [];\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n            }\r\n          } else {\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              let currentAttributeOptions = surfaceOptionMap[geometryName][primaryValue][j-1];\r\n              let isNewUniqueValue = currentAttributeOptions.indexOf(materialOptions[j]) === -1;\r\n              if (isNewUniqueValue) {\r\n                currentAttributeOptions.push(materialOptions[j])\r\n              }\r\n            }                                  \r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n        surfaceOptionMap,\r\n        materialNameSegmentMap,\r\n        surfaceAttributeNameMap,\r\n        surfaceControls,\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    buildSceneGraph,\r\n    buildCategoryOptions,\r\n    buildTextureOptions,\r\n}\r\n"],"sourceRoot":""}