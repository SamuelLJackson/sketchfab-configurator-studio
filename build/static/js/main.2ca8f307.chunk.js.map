{"version":3,"sources":["globals.js","components/viewerSlice.js","components/Header.js","components/Viewer.js","components/ImportModal.js","components/ExportModal.js","components/OptionChoiceModal.js","components/AnimationPanel.js","components/ColorPanel.js","components/GeometryCategoryPanel.js","components/TextureCategoryPanel.js","components/TogglePanel.js","components/OptionPanel.js","components/NodePanel.js","components/initializeViewer.js","components/ModelPanel.js","components/ControlMenu.js","components/ModelList.js","App.js","app/store.js","serviceWorker.js","index.js","components/utils.js"],"names":["window","onclick","event","exportModal","document","getElementById","target","style","display","initialState","modelList","activeModelGUID","viewMode","sketchfabAPI","disableButtons","defaultModel","name","uid","guid","materials","animations","sceneGraph","controls","textureControls","latestControlId","sceneGraphIsVisible","surfaceOptionMap","surfaceConfigurationMode","geometryCategoryOptions","isInitial","viewerSlice","createSlice","reducers","resetState","state","setSketchfabAPI","action","payload","setModelId","i","length","setModelName","setMaterials","setAnimations","setSceneGraph","buildSceneGraph","children","buildGeometryCategoryOptions","setSceneGraphIsVisible","id","value","createControl","defaultConfiguration","animationUID","startTime","endTime","isDisabledInitially","designations","geometries","hiddenValues","allowsAnimation","unshift","type","entityIndex","entity","instanceID","configuration","initialValue","isExpanded","setViewMode","setControls","newControls","JSON","parse","stringify","setTextureControls","j","push","addTextureControls","concat","k","textureId","console","log","toggleDisableButtons","updateControl","key","setSurfaceOptionMap","setSurfaceConfigurationMode","setUnselectedGeometries","setAllNodesVisible","Object","keys","show","hide","setModelList","newModelList","animationName","undefined","setActiveModelGUID","createModel","newGuid","Math","floor","random","setIsInitialModel","actions","getAttributeFromModel","attribute","selectModelList","selectActiveModelGUID","selectMaterials","selectAnimations","selectControls","selectDisableButtons","selectSceneGraph","selectSketchfabAPI","selectSceneGraphIsVisible","selectViewMode","selectGeometryCategoryOptions","toggleImportModalDisplay","dispatch","modal","currentStyle","toggleModalDisplay","toggleOptionChoiceModalDisplay","Header","useSelector","useDispatch","className","onClick","disabled","Viewer","class","src","title","allowfullscreen","mozallowfullscreen","webkitallowfullscreen","ImportModal","importString","replace","createJSExport","ExportModal","OptionChoiceModal","color","visibility","AnimationPanel","props","option","animationOptions","map","animation","alignItems","flexDirection","onChange","e","newXConfiguration","newConfiguration","options","selectedIndex","textContent","htmlFor","renderAdditionalColors","additionalColors","index","array","newArray","newColor","colorRGB","hexRgb","format","num","renderColorsOption","materialsHtml","material","ColorPanel","transferObject","newColors","GeometryCategoryPanel","unselectedGeometries","selectedGeometries","renderDisableTextureControls","geometryIndex","filter","control","showChecked","disabledTextureControls","includes","checked","renderDisableMultiSelect","multiSelects","multiSelect","geometry","complimentGeometryIndex","designation","hiddenElementDesignation","marginLeft","textAlign","fontWeight","setSelectedGeometries","selected","borderBottom","list","setList","flex","newGeometries","placeholder","humanReadable","newUnselectedGeometries","unSelectedGeometry","splice","fill","preserveAspectRatio","height","width","viewBox","verticalAlign","d","selectedGeometry","TextureConfigurationPanel","newOptions","updateOptions","addDashes","number","dashes","TogglePanel","sceneGraphHtml","node","depth","panelColors","geometryCategory","textureCategory","toggle","OptionPanel","renderPanel","overflow","renderOptions","NodePanel","values","reduce","accum","curr","initializeViewer","modelId","isSeeking","current_anim","apiSkfb","pollTime","duration","timeSlider","iframe","animationsList","getCurrentTime","err","time","percentage","innerHTML","toFixed","seekTo","requestAnimationFrame","api","config","init","this","Sketchfab","urlid","ui_controls","graph_optimizer","ui_animations","ui_watermark","ui_inspector","ui_stop","ui_infos","success","start","addEventListener","pause","getAnimations","play","setCurrentAnimationByUID","getSceneGraph","result","getMaterialList","surfaceOptions","buildTextureOptions","surfaceControls","bind","error","ModelPanel","activeModel","model","marginBottom","ControlMenu","nodesButtonStyles","backgroundColor","optionsButtonStyles","modelButtonStyles","modelListStyles","minWidth","paddingLeft","paddingRight","borderRadius","border","inActiveStyles","borderColor","cursor","activeStyles","ModelList","activeModelGuid","justifyContent","modelGuid","Number","split","m","padding","App","configureStore","reducer","viewerReducer","middleware","getDefaultMiddleware","logger","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","module","exports","materialID","uniqueStrings","nodeNameArray","string","mainDesignation","capitalLetter","detailedTitle","indexOf","sort","a","b","charCodeAt","geometryName","materialOptions","primaryValue","isPrimary","ordering","optionExists","l","currentAttributeOptions"],"mappings":"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","file":"static/js/main.2ca8f307.chunk.js","sourcesContent":["// When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    var exportModal = document.getElementById(\"modal\");\r\n    if (event.target === exportModal) {\r\n      exportModal.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { buildSceneGraph, buildGeometryCategoryOptions } from './utils'\r\n\r\nconst initialState = {\r\n  modelList: [],\r\n  activeModelGUID: \"\",\r\n  viewMode: \"model\",\r\n  sketchfabAPI: null,\r\n  disableButtons: true,\r\n}\r\n\r\nconst defaultModel = {\r\n  name: \"\",\r\n  uid: \"\",\r\n  guid: \"\",\r\n  materials: [],\r\n  animations: [],\r\n  sceneGraph: [],\r\n  controls: [],\r\n  textureControls: [],\r\n  latestControlId: 0,\r\n  sceneGraphIsVisible: {},\r\n  surfaceOptionMap: {},\r\n  surfaceConfigurationMode: false,\r\n  geometryCategoryOptions: [],\r\n  isInitial: false,\r\n};\r\n\r\nexport const viewerSlice = createSlice({\r\n  name: 'viewer',\r\n  initialState,\r\n  reducers: {\r\n    resetState: state => {\r\n      state = initialState;\r\n    },\r\n    setSketchfabAPI: (state, action) => {\r\n      state.sketchfabAPI = action.payload;\r\n    },\r\n    setModelId: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].uid = action.payload\r\n        }\r\n      }\r\n    },\r\n    setModelName: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].name = action.payload\r\n        }\r\n      }\r\n    },\r\n    setMaterials: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].materials = action.payload\r\n        }\r\n      }\r\n    },\r\n    setAnimations: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].animations = action.payload\r\n        }\r\n      }\r\n    },\r\n    setSceneGraph: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          buildSceneGraph(state.modelList[i], action.payload.children[0].children, 0);\r\n          buildGeometryCategoryOptions(state.modelList[i])\r\n        }\r\n      }\r\n    },\r\n    setSceneGraphIsVisible: (state, action) => {\r\n      const { id, value } = action.payload;\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].sceneGraphIsVisible[id] = value;\r\n        }\r\n      }\r\n    },\r\n    createControl: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].latestControlId = state.modelList[i].latestControlId += 1;\r\n          let id = state.modelList[i].latestControlId;\r\n          let defaultConfiguration = {}\r\n          if(action.payload === \"animation\") {\r\n            defaultConfiguration = {\r\n              animationUID: \"none\",\r\n              startTime: \"0\",\r\n              endTime: \"0\",\r\n              isDisabledInitially: false,\r\n            }\r\n          }\r\n    \r\n          if(action.payload === \"geometryCategory\") {\r\n            defaultConfiguration = {\r\n              designations: [],\r\n              geometries: [],\r\n              hiddenValues: [],\r\n              allowsAnimation: [],  \r\n            }\r\n          }\r\n          state.modelList[i].controls.unshift({\r\n            type: action.payload,\r\n            id: id,\r\n            name: action.payload,\r\n            entityIndex: \"none\",\r\n            entity: {instanceID: 0},\r\n            configuration: defaultConfiguration,\r\n            initialValue: \"\",\r\n            isExpanded: true,\r\n          });\r\n        }\r\n      }\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.viewMode = action.payload\r\n    },\r\n    setControls: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          let newControls = JSON.parse(JSON.stringify(action.payload))\r\n          state.modelList[i].controls = newControls;\r\n        }\r\n      }\r\n    },\r\n    setTextureControls: (state, action) => { \r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].textureControls = [];\r\n          for (var j=0; j<action.payload.length; ++j) {\r\n            state.modelList[i].latestControlId = state.modelList[i].latestControlId += 1;\r\n            state.modelList[i].textureControls.push({ ...action.payload[j], id: state.modelList[i].latestControlId})\r\n          }     \r\n        }\r\n      }\r\n    },\r\n    addTextureControls: (state) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          if (state.modelList[i].controls.length === 0) {\r\n            state.modelList[i].controls = state.modelList[i].controls.concat(state.modelList[i].textureControls)\r\n          }\r\n          for (let j=0; j<state.modelList[i].textureControls.length; ++j) {\r\n            for (let k=0; k<state.modelList[i].controls.length; ++k) {\r\n              if (state.modelList[i].controls[k].textureId !== state.modelList[i].textureControls[j].textureId) {\r\n                if ( k === state.modelList[i].controls.length - 1) {\r\n                  state.modelList[i].controls.push(state.modelList[i].textureControls[j])\r\n                }\r\n              } else {\r\n                break\r\n              }\r\n            }\r\n          }\r\n          console.log(\"END addTextureControls\")\r\n        }\r\n      }\r\n    },\r\n    toggleDisableButtons: (state) => {\r\n      state.disableButtons = false;\r\n    },\r\n    updateControl: (state, action) => {\r\n      const { id, key, value } = action.payload;\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          for (let j=0; j<state.modelList[i].controls.length; ++j) {\r\n            if (state.modelList[i].controls[j].id == id) {\r\n              state.modelList[i].controls[j][key] = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    setSurfaceOptionMap: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].surfaceOptionMap = action.payload;\r\n        }\r\n      }\r\n    },\r\n    setSurfaceConfigurationMode: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].surfaceConfigurationMode = action.payload;\r\n        }\r\n      }\r\n    },\r\n    setUnselectedGeometries: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].geometryCategoryOptions = action.payload;\r\n        }\r\n      }\r\n    },\r\n    setAllNodesVisible: (state, action) => {\r\n      for(let i=0; i<Object.keys(state.sceneGraphIsVisible).length; ++i) {\r\n        if(action.payload) {\r\n          state.sketchfabAPI.show(Object.keys(state.sceneGraphIsVisible)[i])\r\n        } else {\r\n          state.sketchfabAPI.hide(Object.keys(state.sceneGraphIsVisible)[i])\r\n        }\r\n        state.sceneGraphIsVisible[Object.keys(state.sceneGraphIsVisible)[i]] = action.payload;\r\n      }\r\n    },\r\n    setModelList: (state, action) => {\r\n      state.modelList = [];\r\n      let newModelList = JSON.parse(JSON.stringify(action.payload))\r\n      for (let i=0; i<newModelList.length; ++i) {\r\n          newModelList[i].latestControlId = 1;\r\n          let newControls = JSON.parse(JSON.stringify(newModelList[i].controls))\r\n          for(let j=0; j<newControls.length; ++j) {\r\n            newModelList[i].latestControlId += 1;\r\n            if (newControls[j].type === \"animation\") {\r\n              for (let k=0; k<newModelList[i].animations.length; ++k) {\r\n                if (newControls[j].configuration.animationName === newModelList[i].animations[k][1]) {\r\n                  newControls[j].configuration.animationUID = newModelList[i].animations[k][0]\r\n                }\r\n              }\r\n            }\r\n            if (newControls[j].type === \"textureCategory\") {\r\n              newModelList[i].surfaceConfigurationMode = true\r\n            }\r\n            if (newControls[j].type === \"geometryCategory\") {\r\n              for (let k=0; k<newControls[j].configuration.geometries.length; ++k) {\r\n                if (newControls[j].configuration.geometries[k].hiddenValues === undefined) {\r\n                  newControls[j].configuration.geometries[k].hiddenValues = []\r\n                }            \r\n              }\r\n            }\r\n          }\r\n          newModelList[i].controls = newControls;\r\n      }\r\n      state.modelList = newModelList;\r\n    },\r\n    setActiveModelGUID: (state, action) => {\r\n      state.activeModelGUID = action.payload;\r\n    },\r\n    createModel: (state) => {\r\n      let newGuid = Math.floor(Math.random() * Math.floor(99999999999999999999999999999999999999999))\r\n      state.modelList.push({\r\n        ...defaultModel,\r\n        guid: newGuid,\r\n      })\r\n      state.activeModelGUID = newGuid\r\n    },\r\n    setIsInitialModel: (state, action) => {\r\n      for (let i=0; i<state.modelList.length; ++i) {\r\n        if (state.modelList[i].guid === state.activeModelGUID) {\r\n          state.modelList[i].isInitial = action.payload;\r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  resetState,\r\n  setModelId, \r\n  setModelName,\r\n  createControl, \r\n  toggleDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n  setTextureControls,\r\n  addTextureControls,\r\n  setSceneGraph,\r\n  setSceneGraphIsVisible,\r\n  setViewMode,\r\n  setUnselectedGeometries,\r\n  setSurfaceOptionMap,\r\n  setSurfaceConfigurationMode,\r\n  setAllNodesVisible,\r\n  setAnimations,\r\n  setMaterials,\r\n  setSketchfabAPI,\r\n  setModelList,\r\n  setActiveModelGUID,\r\n  createModel,\r\n  setIsInitialModel,\r\n} = viewerSlice.actions;\r\n\r\nexport const getAttributeFromModel = (state, attribute) => {\r\n  \r\n  for (let i=0; i<state.modelList.length; ++i) {\r\n    if (state.modelList[i].guid === state.activeModelGUID) {\r\n      return state.modelList[i][attribute]\r\n    }\r\n  }\r\n}\r\n\r\nexport const selectModelList = state => state.modelList;\r\n\r\nexport const selectActiveModelGUID = state => state.activeModelGUID;\r\n\r\nexport const selectModelId = state => getAttributeFromModel(state, \"uid\");\r\n\r\nexport const selectMaterials = state => getAttributeFromModel(state, \"materials\")\r\n\r\nexport const selectAnimations = state => getAttributeFromModel(state, \"animations\");\r\n\r\nexport const selectControls = state => getAttributeFromModel(state, \"controls\");\r\n\r\nexport const selectTextureControls = state => getAttributeFromModel(state, \"textureControls\");\r\n\r\nexport const selectDisableButtons = state => state.disableButtons;\r\n\r\nexport const selectSceneGraph = state => getAttributeFromModel(state, \"sceneGraph\");\r\n\r\nexport const selectSketchfabAPI = state => state.sketchfabAPI;\r\n\r\nexport const selectSceneGraphIsVisible = state => getAttributeFromModel(state, \"sceneGraphIsVisible\");\r\n\r\nexport const selectViewMode = state => state.viewMode;\r\n\r\nexport const selectSurfaceOptionMap = state => getAttributeFromModel(state, \"surfaceOptionMap\");\r\n\r\nexport const selectSurfaceConfigurationMode = state => getAttributeFromModel(state, \"surfaceConfigurationMode\");\r\n\r\nexport const selectGeometryCategoryOptions = state => getAttributeFromModel(state, \"geometryCategoryOptions\");\r\n\r\nexport const toggleImportModalDisplay = ()  => dispatch => {\r\n  const modal = document.getElementById(\"import-modal\")\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }   \r\n}\r\n\r\nexport const toggleModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const toggleOptionChoiceModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('control-choice-modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport default viewerSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleImportModalDisplay,\r\n  toggleModalDisplay,\r\n  selectDisableButtons,\r\n} from './viewerSlice';\r\n\r\nconst Header = () => {\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n  \r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Configurator Studio - v1.0.27</h1>\r\n\r\n      <div className=\"header__buttons\">\r\n        <button \r\n          id=\"import-javascript\"\r\n          className=\"header__button\"\r\n          onClick={() => dispatch(toggleImportModalDisplay())}>Import Configuration</button>\r\n        <button \r\n          id=\"export-javascript\"\r\n          className=\"header__button\"\r\n          disabled={disableButtons}\r\n          onClick={() => dispatch(toggleModalDisplay())}>Export</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Viewer = () => {\r\n\r\n    return (        \r\n        <div class=\"viewer\">\r\n            <iframe \r\n                src=\"\" \r\n                id=\"api-frame\" \r\n                title=\"sketchfab-viewer\"\r\n                allowfullscreen mozallowfullscreen=\"true\" \r\n                webkitallowfullscreen=\"true\"\r\n            ></iframe>\r\n            <div id=\"animationControls\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Viewer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleImportModalDisplay, \r\n    setModelList,\r\n} from './viewerSlice';\r\n\r\nconst ImportModal = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"import-modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleImportModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Paste Controls Here:</h1>\r\n                </div>\r\n                <button\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tlet jsInput = document.getElementById(\"js-input\").value;\r\n\t\t\t\t\t\tlet importString = jsInput.replace(\"var modelList = \", \"\")\r\n\t\t\t\t\t\tlet modelList = JSON.parse(importString)\r\n                        dispatch(setModelList(modelList))\r\n                        dispatch(toggleImportModalDisplay())\r\n\t\t\t\t\t}}\r\n\t\t\t\t>Import</button>\r\n\t\t\t\t<input id=\"js-input\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportModal;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleModalDisplay, \r\n\tselectModelList\r\n} from './viewerSlice';\r\n\r\nconst ExportModal = () => {\r\n\tconst modelList = useSelector(selectModelList)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Add This To Your Page</h1>\r\n                </div>\r\n                <textarea id=\"js-output\" value={createJSExport(modelList)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst createJSExport = (modelList) => {\r\n\r\n\treturn (\r\n`\r\n// Sketchfab Viewer API: Change Texture/material\r\nvar version = '1.9.0';\r\nvar iframe = document.getElementById('api-frame');\r\nvar client = new window.Sketchfab(version, iframe);\r\n\r\n/*\r\n\tCOPY THE LINE BELOW\r\n*/\r\n\r\nvar modelList = ${JSON.stringify(modelList)}\r\n\r\n/*\r\n\tCOPY THE LINE ABOVE\r\n*/\r\n\r\nvar currentModelIndex = 0;\r\n\r\nfor (var i=0; i<modelList.length; ++i) {\r\n\tif (modelList[i].isInitial == true) {\r\n\t\tcurrentModelIndex = i;\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\nvar isElementCategoryControlled = false;\r\nvar surfaceConfigurationMode = false;\r\n\r\nvar animationObjects = {};\r\nvar toggleableItems = {};\r\n\r\nvar currentAnimationIndex = 0;\r\nvar currentAnimationEndTime = 0;\r\n\r\nvar globalDisabledControls = [];\r\n\r\nvar animationsEnabled = false;\r\n\r\nvar apiSkfb, pollTime;\r\n\r\nvar controlsContainer = document.getElementById('sketchfab-lower-controls');\r\n\r\nvar appContainer = document.querySelector(\"div.sketchfab__container\")\r\nappContainer.style.display = \"block\"\r\n\r\nvar animationButtonContainer = document.getElementById(\"sketchfab-animation-buttons\")\r\nvar animationContainerTitle = document.getElementById(\"sketchfab-animation-controls__title\");\r\n\r\npollTime = function() {\r\n\tapiSkfb.getCurrentTime(function(err, time) {\t\r\n\t\tif (animationsEnabled) {\r\n\t\t\tif (currentAnimationEndTime > 0 && time >= currentAnimationEndTime) {\r\n\t\t\t\tapiSkfb.pause();\r\n\t\t\t}\r\n\t\t\trequestAnimationFrame(pollTime);\r\n\t\t}\r\n\t});\r\n};\r\n\r\nvar viewerAPIs = {};\r\n\r\nvar changeViewerContainer = document.querySelector(\"#change-viewer-container\");\r\nvar viewer = document.querySelector(\".sketchfab__viewer\");\r\nvar loader = document.querySelector(\".sketchfab-loader__container\");\r\nvar loaderTitle = document.querySelector(\"#sketchfab-load-model-name\");\r\nloaderTitle.textContent = modelList[currentModelIndex].name;\r\nloader.style.display = \"flex\";\r\nvar errorMessage = document.querySelector(\"#sketchfab-error__container\")\r\n\r\nvar success = function(api) {\r\n    apiSkfb = api;\r\n\tapi.start(function() {\r\n\t\tapi.addEventListener('viewerready', function() {\r\n\t\t\t\r\n\t\t\tviewer.style.display = \"block\"\r\n\t\t\tloader.style.display = \"none\";\r\n\t\t\tapi.pause();\r\n\t\t\t\r\n\t\t\tvar animations = [];\r\n\t\t\tfor (let i = 0; i < modelList[currentModelIndex].controls.length; ++i) {\t\r\n\t\t\t\tglobalDisabledControls.push(false);\r\n\t\t\t\tif (modelList[currentModelIndex].controls[i].type == \"animation\") {\r\n\t\t\t\t\tvar animationControls = document.getElementById(\"sketchfab-animation-controls\")\r\n\t\t\t\t\tanimationControls.style.display = \"block\";\r\n\t\t\t\t\tanimationContainerTitle.style.display = \"block\";\r\n\t\t\t\t\tvar animationButton = document.createElement(\"button\")\r\n\t\t\t\t\tanimationButton.id = \"animation-\" + modelList[currentModelIndex].controls[i].id + \"-\" + i\r\n\t\t\t\t\tanimationButton.textContent = modelList[currentModelIndex].controls[i].name;\r\n\t\t\t\t\tanimationButton.addEventListener('click', function(e) {\r\n\t\t\t\t\t\tvar animationId = e.target.id.split(\"-\")[1]\r\n\t\t\t\t\t\tcurrentAnimationIndex = e.target.id.split(\"-\")[2]\r\n\t\t\t\t\t\tvar startTime = animationObjects[animationId].startTime;\r\n\t\t\t\t\t\tvar endTime = animationObjects[animationId].endTime;\r\n\t\t\t\t\t\tvar animationUID = animationObjects[animationId].uid;\r\n\t\t\t\t\t\tcurrentAnimationEndTime = endTime;\r\n\r\n\t\t\t\t\t\tapiSkfb.setCurrentAnimationByUID(animationUID)\r\n\t\t\t\t\t\tapiSkfb.seekTo(startTime);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar animationButtons = document.querySelector(\"#sketchfab-animation-buttons\").querySelectorAll(\"button\")\r\n\t\t\t\t\t\tfor (var j=0; j<animationButtons.length; ++j) {\r\n\t\t\t\t\t\t\tanimationButtons[j].disabled = false;\r\n\t\t\t\t\t\t\tanimationButtons[j].style.border = \"none\"\r\n\t\t\t\t\t\t\tanimationButtons[j].style.opacity = 1\r\n\t\t\t\t\t\t\tif (animationButtons[j].textContent === e.target.textContent) {\r\n\t\t\t\t\t\t\t\tanimationButtons[j].disabled = true;\r\n\t\t\t\t\t\t\t\tanimationButtons[j].style.border = \"1px solid black\"\r\n\t\t\t\t\t\t\t\tanimationButtons[j].style.opacity = 0.5\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetTimeout(function() { apiSkfb.play();\t}, 100);\r\n\t\t\t\t\t})\r\n\t\t\t\t\tanimationButtonContainer.appendChild(animationButton)\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar isInitialAnimationPosition = modelList[currentModelIndex].controls[i].configuration.isDisabledInitially\r\n\t\t\t\t\tif (isInitialAnimationPosition) {\r\n\t\t\t\t\t\tanimationButton.disabled = true;\r\n\t\t\t\t\t\tanimationButton.style.border = \"1px solid black\"\r\n\t\t\t\t\t\tanimationButton.style.opacity = 0.5\r\n\t\t\t\t\t\tcurrentAnimationIndex = i\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tanimations.push(modelList[currentModelIndex].controls[i]);\r\n\t\t\t\t\tanimationObjects[modelList[currentModelIndex].controls[i].id] = {name: modelList[currentModelIndex].controls[i].name, startTime: Number(modelList[currentModelIndex].controls[i].configuration.startTime), endTime: Number(modelList[currentModelIndex].controls[i].configuration.endTime), uid: modelList[currentModelIndex].controls[i].configuration.animationUID}; \r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\");\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (modelList[currentModelIndex].controls[i].type == \"color\") {\r\n\t\t\t\t\tvar resetBut = document.createElement(\"button\");\r\n\t\t\t\t\tresetBut.innerHTML = \"Reset\";\r\n\t\t\t\t\tresetBut.onclick = function(e) {\t\r\n\t\t\t\t\t\tvar m = modelList[currentModelIndex].materials[modelList[currentModelIndex].controls[i].entityIndex];\r\n\t\t\t\t\t\tm = JSON.parse(JSON.stringify(modelList[currentModelIndex].controls[i].entity));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(resetBut);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let j = 0; j < modelList[currentModelIndex].controls[i].additionalColors.length; ++j) {\r\n\t\t\t\t\t\tvar colorBut = document.createElement(\"button\");\r\n\r\n\t\t\t\t\t\tcolorBut.innerHTML = modelList[currentModelIndex].controls[i].additionalColors[j].name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcolorBut.id = modelList[currentModelIndex].controls[i].id + \"-\" + modelList[currentModelIndex].controls[i].name\r\n\t\t\t\t\t\tcolorBut.onclick = function(e) {\t\r\n\t\t\t\t\t\t\tvar m = modelList[currentModelIndex].materials[modelList[currentModelIndex].controls[i].entityIndex];\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.enable = true;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.color = modelList[currentModelIndex].controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.enable = true;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.color = modelList[currentModelIndex].controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.color = modelList[currentModelIndex].controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.enable = false;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.factor = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(colorBut);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if (modelList[currentModelIndex].controls[i].type === \"geometryCategory\") {\t\r\n\t\t\t\t\tisElementCategoryControlled = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar wrapper = initializeSelect(i);\r\n\t\t\t\t\twrapper.classList.add(\"sketchfab-geometry-category\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var j=0; j<modelList[currentModelIndex].controls[i].configuration.geometries.length; ++j) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\tvar name = modelList[currentModelIndex].controls[i].configuration.geometries[j].designation;\r\n\t\t\t\t\t\tvar humanReadable = modelList[currentModelIndex].controls[i].configuration.geometries[j].humanReadable;\r\n\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\tcustomOption.id = name + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\tif (modelList[currentModelIndex].controls[i].configuration.geometries[j].designation === modelList[currentModelIndex].controls[i].initialValue) {\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcustomOption.addEventListener('click', function(e) {\r\n\t\t\t\t\t\t\thandleUpdateSelect(e);\r\n\t\t\t\t\t\t\tdisableAnimations();\r\n\t\t\t\t\t\t\thandleHidingGeometryCombinations();\r\n\t\t\t\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t} else if (modelList[currentModelIndex].controls[i].type === \"textureCategory\") {\r\n\t\t\t\t\tsurfaceConfigurationMode = true\t\t\t\t\t\r\n\t\t\t\t\tconst { geometryName, options, isPrimary, ordering} = modelList[currentModelIndex].controls[i].configuration\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar controlIndex = i;\r\n\t\t\t\t\tvar wrapper = initializeSelect(controlIndex, geometryName)\r\n\t\t\t\t\twrapper.classList.add(\"sketchfab-texture-category\")\r\n\t\t\t\t\twrapper.id = geometryName + \"-\" + ordering;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var j=0; j<options.length; ++j) {\r\n\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\tconst { name, humanReadable } = options[j];\r\n\t\t\t\t\t\t\tif (name === modelList[currentModelIndex].controls[i].initialValue) {\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + geometryName + \"-\" + j + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\tcustomOption.addEventListener('click', e => {\r\n\t\t\t\t\t\t\t\thandleUpdateSelect(e);\t\t\t\r\n\t\t\t\t\t\t\t\thandleHidingTextureCombinations()\r\n\t\t\t\t\t\t\t\tconfigureMaterials(api) \r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\r\n\t\t\t\t\t\t\r\n\t\t\t\t} else if (modelList[currentModelIndex].controls[i].type == \"toggle\") {\r\n\t\t\t\t\ttoggleableItems[String(modelList[currentModelIndex].controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\tvar toggleBut = document.createElement(\"button\");\r\n\t\t\t\t\ttoggleBut.innerHTML = \"Toggle \" + modelList[currentModelIndex].controls[i].name;\r\n\t\t\t\t\ttoggleBut.id = modelList[currentModelIndex].controls[i].entity.instanceID;\r\n\t\t\t\t\ttoggleBut.onclick = function(e) {\r\n\t\t\t\t\t\tvar isVisible = toggleableItems[e.target.id];\r\n\t\t\t\t\t\tif (isVisible == \"visible\") {\r\n\t\t\t\t\t\t\tapi.hide(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(modelList[currentModelIndex].controls[i].entity.instanceID)] = \"hidden\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tapi.show(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(modelList[currentModelIndex].controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(toggleBut);\r\n\t\t\t\t}\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tif (isElementCategoryControlled) {\r\n\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t\tdisableAnimations();\r\n\t\t\t\thandleHidingGeometryCombinations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (animations.length > 0) {\r\n\t\t\t\tpollTime();\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tif (surfaceConfigurationMode) {\r\n\t\t\t\thandleHidingTextureCombinations()\r\n\t\t\t\tconfigureMaterials(api)\r\n\t\t\t}\r\n\t\t\twindow.addEventListener('click', function(e) {\r\n\t\t\t\tfor (const select of document.querySelectorAll('.sketchfab-select')) {\r\n\t\t\t\t\tif (!select.contains(e.target)) {\r\n\t\t\t\t\t\tselect.classList.remove('sketchfab-select-open');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\nclient.init(modelList[currentModelIndex].uid, {\r\n\tsuccess: success,\r\n\terror: () => generateErrorMessage(),\r\n\tmerge_materials: 1,\r\n\tmaterial_packing: 1,\r\n\t//graph_optimizer: 1,\r\n\tautostart: 1,\r\n\tpreload: 0,\r\n\tui_animations: 0,\r\n\tui_watermark: 0,\r\n\tui_inspector: 0,\r\n\tui_stop: 0,\r\n\tui_infos: 0,\r\n\tui_fullscreen: window.innerWidth < 1000 ? 0 : 1,\r\n});\r\n\r\nvar generateErrorMessage = function() {\r\n\tvar isFirefox = typeof InstallTrigger !== 'undefined';\r\n\tvar isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && window['safari'].pushNotification));\r\n\tvar isIE = /*@cc_on!@*/false || !!document.documentMode;\r\n\t\r\n\tvar firefoxSteps = [\r\n\t\t\"Open up the browser menu by clicking the three stacked bars at the top right of the browser window.\",\r\n\t\t\"Select 'Options'.\",\r\n\t\t\"Scroll down until you see the 'Performance' heading.\",\r\n\t\t\"Make sure that the checkbox labeled 'Use recommended performance settings' is checked.\",\r\n\t];\r\n\t\r\n\tvar edgeSteps = [\r\n\t\t\"Open up the browser menu by clicking the three horizontal dots at the top right of the browser window.\",\r\n\t\t\"Click 'Settings'.\",\r\n\t\t\"Click 'System' from the left-hand sidebar.\",\r\n\t\t\"Make sure the second control labeled 'Use hardware acceleration when available' is enabled'.\",\r\n\t\t\"If it appears, click the 'Restart' button.\",\r\n\t];\r\n\t\r\n\tvar chromeSteps = [\r\n\t\t\"Open the Chrome browser menu by clicking on the three vertical dots at the top right of the window.\",\r\n\t\t\"Click on 'Settings'.\",\r\n\t\t\"Click 'Advanced' on the left-hand sidebar.\",\r\n\t\t\"Click 'System'.\",\r\n\t\t\"Make sure the second option is enabled, i.e. 'Use hardware acceleration when available'.\",\r\n\t\t\"If it appears, click the 'Relaunch' button.\"\r\n\t];\r\n\t\r\n\tif (isFirefox) {\r\n\t\tcreateHardwareAccelerationSteps(firefoxSteps);\t\t\r\n\t} else if (navigator.userAgent.includes(\"Edg\")) {\r\n\t\tcreateHardwareAccelerationSteps(edgeSteps);\r\n\t} else {\r\n\t\tcreateHardwareAccelerationSteps(chromeSteps);\r\n\t}\r\n\t\t\r\n\tchangeViewerContainer.style.display = \"none\";\r\n\terrorMessage.style.display = \"flex\";\r\n\tloader.style.display = \"none\";\r\n\tconsole.error('Sketchfab API error');\r\n}\r\n\r\nvar createHardwareAccelerationSteps = function(stepsArray) {\r\n\tconsole.log(stepsArray);\r\n\tvar hardwareAccelerationStepsContainer = document.querySelector(\"#sketchfab-hardware-acceleration-steps\");\r\n\tfor (var i=0; i<stepsArray.length; ++i) {\r\n\t\tvar step = document.createElement(\"li\");\r\n\t\tstep.textContent = stepsArray[i];\r\n\t\tconsole.log(stepsArray[i]);\r\n\t\thardwareAccelerationStepsContainer.appendChild(step);\r\n\t}\r\n}\r\n\r\nvar handleHidingTextureCombinations = function(api) {\r\n\tconsole.log(\"BEGIN: handleHidingTextureCombinations\")\r\n\t\r\n\tvar textureSelects = document.getElementsByClassName(\"sketchfab-texture-category\")\t\r\n\tfor (var i=0; i<textureSelects.length; ++i) {\r\n\t\tvar options = textureSelects[i].getElementsByClassName(\"sketchfab-option\");\r\n\t\tvar geometryName = textureSelects[i].id.split(\"-\")[0]\r\n\t\tvar ordering = textureSelects[i].id.split(\"-\")[1]\r\n\t\tvar isPrimary = Number(ordering) === 0;\r\n\t\tif (!isPrimary) {\r\n\t\t\tvar currentInitialPrimarySelection = document.getElementById(geometryName + \"-0\").querySelector(\".sketchfab-select__trigger span\").textContent;\r\n\t\t\tvar availableOptions = modelList[currentModelIndex].surfaceOptionMap[geometryName][currentInitialPrimarySelection][ordering-1].sort()\r\n\t\t\tvar previouslyAvailableOptions =  Array.from(options).filter(op => op.style.display === \"block\").map(op => op.getAttribute(\"data-value\")).sort()\r\n\t\t\tlet equal = availableOptions.length == previouslyAvailableOptions.length && availableOptions.every((element, index)=> element === previouslyAvailableOptions[index] );\r\n\t\t\t\r\n\t\t\tvar triggerSpan = textureSelects[i].querySelector(\".sketchfab-select__trigger span\")\r\n\t\t\t\r\n\t\t\tif (!equal) {\r\n\t\t\t\tvar newValueSet = false;\r\n\t\t\t\tfor (var j=0; j<options.length; ++j) {\r\n\t\t\t\t\toptions[j].classList.remove(\"selected\")\r\n\t\t\t\t\tvar optionValue = options[j].getAttribute(\"data-value\")\r\n\t\t\t\t\toptions[j].style.display = \"none\"\r\n\t\t\t\t\tvar optionValue = options[j].getAttribute(\"data-value\")\r\n\t\t\t\t\tif (availableOptions.includes(optionValue)) {\r\n\t\t\t\t\t\toptions[j].style.display = \"block\"\r\n\t\t\t\t\t\tif (!newValueSet) {\r\n\t\t\t\t\t\t\ttriggerSpan.textContent = optionValue;\r\n\t\t\t\t\t\t\toptions[j].classList.add(\"selected\")\r\n\t\t\t\t\t\t\tnewValueSet = true;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(\"END: handleHidingTextureCombinations\")\r\n}\r\n\r\nvar configureMaterials = function(api) {\r\n\tconsole.log(\"BEGIN: configureMaterials\")\r\n\tvar textureSelects = document.getElementsByClassName(\"sketchfab-texture-category\")\t\r\n\tfor (var i=0; i<textureSelects.length; ++i) {\r\n\t\tvar geometryName = textureSelects[i].id.split(\"-\")[0]\r\n\t\t//get array of selected values\r\n\t\tvar relevantSelects = document.getElementsByClassName(geometryName + \"-triggerSpan\")\r\n\t\t//build name string via accessing selected values\r\n\t\tvar materialNameString = geometryName + \"-\";\r\n\t\t\r\n\t\tfor (var j=0; j<relevantSelects.length; ++j) {\r\n\t\t\tmaterialNameString += relevantSelects[j].textContent + \"-\";\r\n\t\t}\r\n\t\tvar newMaterial;\r\n\t\tfor (var j=0; j<modelList[currentModelIndex].materials.length; ++j) {\r\n\t\t\tif (modelList[currentModelIndex].materials[j].name.startsWith(materialNameString)) {\r\n\t\t\t\tnewMaterial = JSON.parse(JSON.stringify(modelList[currentModelIndex].materials[j]));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (var j=0; j<modelList[currentModelIndex].materials.length; ++j) {\r\n\t\t\tif (modelList[currentModelIndex].materials[j].name === geometryName) {\r\n\t\t\t\tmodelList[currentModelIndex].materials[j].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\t\tmodelList[currentModelIndex].materials[j].reflection = newMaterial.reflection;\r\n\t\t\t\tmodelList[currentModelIndex].materials[j].reflector = newMaterial.reflector;\r\n\t\t\t\tmodelList[currentModelIndex].materials[j].shadeless = newMaterial.shadeless;\r\n\t\t\t\tapi.setMaterial(modelList[currentModelIndex].materials[j], function() {console.log(\"material updated\")})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"END: configureMaterials\")\r\n}\r\n\r\nvar setVisibleNodes = function(api) {\r\n\tconsole.log(\"BEGIN: setVisibleNotes\")\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-geometry-category span.sketchfab-select-value\")\r\n\tvar selectedPrefixes = [];\r\n\t\r\n\tvar lettersByDesignation = {};\r\n\tfor (var i=0; i<allCategorySelects.length; ++i) {\r\n\t\tselectedPrefixes.push(allCategorySelects[i].textContent);\r\n\t\tlettersByDesignation[selectedPrefixes[i]] = []\r\n\t}\r\n\t\r\n\tvar relevantNodes = [];\r\n\t\r\n\tfor (var i=0; i<modelList[currentModelIndex].sceneGraph.length; ++i) {\r\n\t\tvar indexContainingCodes = i;\r\n\t\tif (modelList[currentModelIndex].sceneGraph[i].name === \"MatrixTransform\") {\r\n\t\t\tif (modelList[currentModelIndex].sceneGraph[i].depth < 3) {\r\n\t\t\t\tindexContainingCodes = i + 1;\r\n\t\t\t} else {\r\n\t\t\t\tindexContainingCodes = i - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar nodeNameArray = modelList[currentModelIndex].sceneGraph[indexContainingCodes].name.split(\"-\")\r\n\t\tvar currentNodeDesignation = nodeNameArray[0];\r\n\t\tvar currentNodeLetterCode = nodeNameArray[1];\r\n\t\tapi.hide(modelList[currentModelIndex].sceneGraph[indexContainingCodes].instanceID);\r\n\t\t\r\n\t\tif (selectedPrefixes.includes(currentNodeDesignation)) {\r\n\t\t\tfor (var j=0; j<currentNodeLetterCode.length; ++j) {\r\n\t\t\t\tif (lettersByDesignation[currentNodeDesignation].indexOf(currentNodeLetterCode[j]) === -1) {\r\n\t\t\t\t\tlettersByDesignation[currentNodeDesignation].push(currentNodeLetterCode[j])\r\n\t\t\t\t}\t\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\trelevantNodes.push({\r\n\t\t\t\tletterCode: currentNodeLetterCode, \r\n\t\t\t\tinstanceID: modelList[currentModelIndex].sceneGraph[i].instanceID, \r\n\t\t\t\tname: modelList[currentModelIndex].sceneGraph[i].name, \r\n\t\t\t\tupstreamRelevantNodes: collectUpstreamNodes(i),\r\n\t\t\t\tboneNodes: collectBoneNodes(i),\r\n\t\t\t})\t\t\r\n\t\t}\r\n\t}\t\t\r\n\t\r\n\tvar letters = [];\r\n\tvar commonLetter = \"\"\r\n\tfor (var i=0; i<Object.values(lettersByDesignation).length; ++i) {\r\n\t\tif (Object.values(lettersByDesignation)[i].length === 1) {\r\n\t\t\tcommonLetter = Object.values(lettersByDesignation)[i][0]\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tletters = letters.concat(Object.values(lettersByDesignation)[i])\r\n\t\tcommonLetter = mode(letters)[0]\r\n\t}\r\n\tfor (var i=0; i<relevantNodes.length; ++i) {\r\n\t\tif (relevantNodes[i].letterCode.indexOf(commonLetter) != -1) {\r\n\t\t\tapi.show(relevantNodes[i].instanceID);\r\n\t\t\tfor (var j=0; j<relevantNodes[i].upstreamRelevantNodes.length; ++j) {\r\n\t\t\t\tapi.show(relevantNodes[i].upstreamRelevantNodes[j].instanceID)\r\n\t\t\t}\r\n\t\t\tfor (var j=0; j<relevantNodes[i].boneNodes.length; ++j) {\r\n\t\t\t\tapi.show(relevantNodes[i].boneNodes[j].instanceID);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"END: setVisibleNodes\")\r\n}\r\n\r\nvar collectUpstreamNodes = function(nodeIndex) {\r\n\tvar nodeNameArray = modelList[currentModelIndex].sceneGraph[nodeIndex].name.split(\"-\")\r\n\tvar initialNodeDesignation = nodeNameArray[0];\r\n\t\t\t\r\n\tvar currentUpstreamDepth = Number(modelList[currentModelIndex].sceneGraph[nodeIndex].depth)\r\n\tvar currentUpstreamIndex = nodeIndex - 1;\r\n\tvar upstreamRelevantNodes = []\r\n\twhile(currentUpstreamDepth > 1) {\r\n\t\tif (modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].depth < currentUpstreamDepth) {\r\n\t\t\tvar currentUpstreamDesignation = modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].name.split(\"-\")[0]\r\n\t\t\tvar currentUpstreamLetterCode = modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].name.split(\"-\")[1]\r\n\t\t\tif (currentUpstreamDesignation !== initialNodeDesignation) {\r\n\t\t\t\tupstreamRelevantNodes.push({\r\n\t\t\t\t\tletterCode: currentUpstreamLetterCode, \r\n\t\t\t\t\tinstanceID: modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].instanceID, \r\n\t\t\t\t\tname: modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].name\r\n\t\t\t\t})\r\n\t\t\t}\t\r\n\t\t\tcurrentUpstreamDepth = Number(modelList[currentModelIndex].sceneGraph[currentUpstreamIndex].depth);\r\n\t\t}\r\n\t\tcurrentUpstreamIndex = currentUpstreamIndex - 1;\r\n\t}\r\n\r\n\treturn upstreamRelevantNodes;\r\n}\r\n\r\nvar collectBoneNodes = function(nodeIndex) {\r\n\t\r\n\tvar downStreamRelevantNodes = []\r\n\tif (modelList[currentModelIndex].sceneGraph[nodeIndex].type === \"Group\") {\r\n\t\tvar currentDownstreamIndex = nodeIndex + 1;\r\n\t\tvar initialDepth = Number(modelList[currentModelIndex].sceneGraph[nodeIndex].depth)\r\n\t\tvar currentDownstreamDepth = Number(modelList[currentModelIndex].sceneGraph[currentDownstreamIndex].depth)\r\n\t\twhile(currentDownstreamDepth>initialDepth && modelList[currentModelIndex].sceneGraph[currentDownstreamIndex] !== undefined) {\r\n\t\t\tvar currentDownStreamNode = {\r\n\t\t\t\tletterCode: \"NA\", \r\n\t\t\t\tinstanceID: modelList[currentModelIndex].sceneGraph[currentDownstreamIndex].instanceID, \r\n\t\t\t\tname: \"NA\", \r\n\t\t\t\tupstreamRelevantNodes: [],\r\n\t\t\t}\r\n\t\t\tdownStreamRelevantNodes.push(currentDownStreamNode)\t\r\n\t\t\tcurrentDownstreamDepth = modelList[currentModelIndex].sceneGraph[currentDownstreamIndex].depth;\r\n\t\t\tcurrentDownstreamIndex += 1;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn downStreamRelevantNodes;\r\n}\r\nvar mode = function(arr) { \r\n\tif(arr.filter((x,index) => arr.indexOf(x) == index).length == arr.length) {\r\n\t\treturn arr; \r\n\t} else {\r\n\t\treturn mode(arr.sort((x,index)=>x-index).map((x,index)=>arr.indexOf(x)!=index ? x : null ).filter(x=>x!=null))\r\n\t}\t\t\r\n}\r\n\r\nvar handleUpdateSelect = function(e) {\r\n\tconsole.log(\"BEGIN: handleUpdateSelect\")\r\n\tvar nameCode = e.target.id.split(\"-\")[0]\r\n\t\r\n\tif (!e.target.classList.contains('selected')) {\r\n\t\t\r\n\t\te.target.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\te.target.classList.add('selected');\r\n\t\te.target.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t}\r\n\tconsole.log(\"END: handleUpdateSelect\")\r\n}\r\n\r\nvar handleHidingGeometryCombinations = function() {\r\n\tconsole.log(\"BEGIN: handleHidingGeometryCombinations\")\r\n\t\t\t\t\r\n\tvar allCategoryOptions = document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-option\")\r\n\tvar currentCategorySelections = Array.from(document.querySelectorAll(\".sketchfab-geometry-category .sketchfab-select\"))\r\n\t\t\t\t\t\t\t.map(select => select.querySelector(\".sketchfab-select-value\").textContent)\r\n\t\t\t\t\t\t\t\r\n\tvar allGeoSelects = document.getElementsByClassName(\"sketchfab-geometry-category\")\r\n\t\t\t\t\t\t\t\r\n\tvar geometryControls = modelList[currentModelIndex].controls.filter(control => control.type === \"geometryCategory\")\r\n\r\n\tvar disabledOptions = []\r\n\tvar disabledControls = []\r\n\tfor(var i=0; i<geometryControls.length; ++i) {\r\n\t\tvar hiddenValues = geometryControls[i].configuration.geometries.filter(geometry => geometry.designation === currentCategorySelections[i])[0].hiddenValues;\r\n\t\tvar disabledValues = geometryControls[i].configuration.geometries.filter(geometry => geometry.designation === currentCategorySelections[i])[0].disabledTextureControls;\r\n\t\tconsole.log(\"geometryControls[\" + i + \"]:\")\r\n\t\tconsole.log(geometryControls[i])\r\n\t\tdisabledOptions = disabledOptions.concat(hiddenValues)\r\n\t\tdisabledControls = disabledControls.concat(disabledValues)\r\n\t}\r\n\t\r\n\tfor (var i=0; i<allCategoryOptions.length; ++i) {\r\n\t\tallCategoryOptions[i].style.display = \"block\";\r\n\t\tif (disabledOptions.includes(allCategoryOptions[i].getAttribute(\"data-value\"))) {\r\n\t\t\tallCategoryOptions[i].style.display = \"none\"\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var i=0; i<currentCategorySelections.length; ++i) {\r\n\t\tif (disabledOptions.includes(currentCategorySelections[i])) {\r\n\t\t\tfor(var j=0; j<allGeoSelects[i].querySelectorAll(\".sketchfab-option\").length; ++j) {\r\n\t\t\t\tif (allGeoSelects[i].querySelectorAll(\".sketchfab-option\")[j].style.display === \"block\") {\r\n\t\t\t\t\tallGeoSelects[i].querySelector(\".sketchfab-select-value\").textContent = allGeoSelects[i].querySelectorAll(\".sketchfab-option\")[j].getAttribute(\"data-value\")\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar dropdownControls = document.querySelectorAll(\".sketchfab-single-control-container\")\r\n\tvar nonCategoryControlOffset = 0;\r\n\tfor (var i=0; i<modelList[currentModelIndex].controls.length; ++i) {\r\n\t\tglobalDisabledControls[i] = false;\r\n\t\tif (modelList[currentModelIndex].controls[i].type.includes(\"Category\")) {\r\n\t\t\tdocument.querySelectorAll(\".sketchfab-single-control-container\")[i-nonCategoryControlOffset].style.opacity = 1;\r\n\t\t\tif (disabledControls.includes(modelList[currentModelIndex].controls[i].name)) {\r\n\t\t\t\tglobalDisabledControls[i] = true;\r\n\t\t\t\tdocument.querySelectorAll(\".sketchfab-single-control-container\")[i-nonCategoryControlOffset].style.opacity = 0.3;\t\t\t\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnonCategoryControlOffset += 1;\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"END: handleHidingGeometryCombinations\")\r\n}\r\n\r\nvar disableAnimations = function() {\t\t\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-geometry-category span.sketchfab-select-value\")\r\n\tvar allowAnimations = true;\r\n\tfor (var i=0; i<allCategorySelects.length; ++i) {\r\n\t\tvar controlIndex = allCategorySelects[i].id.split(\"-\")[1]\r\n\t\tvar currentNameCode = allCategorySelects[i].textContent;\r\n\t\tfor (var j=0; j<modelList[currentModelIndex].controls[controlIndex].configuration.geometries.length; ++j) {\r\n\t\t\tif (modelList[currentModelIndex].controls[controlIndex].configuration.geometries[j].designation === currentNameCode) {\r\n\t\t\t\tif (modelList[currentModelIndex].controls[controlIndex].configuration.geometries[j].allowsAnimation === false) {\r\n\t\t\t\t\tallowAnimations = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar animationButtons = document.querySelectorAll(\"#sketchfab-animation-buttons button\")\r\n\t\r\n\tfor (var i=0; i<animationButtons.length; ++i) {\r\n\t\tanimationButtons[i].disabled = true;\r\n\t}\r\n\t\r\n\tvar initiallyDisabled = animationsEnabled === false\r\n\t\r\n\tanimationsEnabled = false;\r\n\tif (allowAnimations) {\r\n\t\tfor (var i=0; i<animationButtons.length; ++i) {\r\n\t\t\tif (animationButtons[i].textContent !== modelList[currentModelIndex].controls[currentAnimationIndex].name) {\r\n\t\t\t\tanimationButtons[i].disabled = false;\r\n\t\t\t}\r\n\t\t}\t\r\n\t\tanimationsEnabled = true;\r\n\t\tif (initiallyDisabled) {\r\n\t\t\tvar animationUID = Object.values(animationObjects)[0].uid\r\n\t\t\tapiSkfb.setCurrentAnimationByUID(animationUID);\r\n\t\t\tpollTime();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar initializeSelect = function(controlIndex, geometryName=\"\") {\r\n\tconsole.log(\"BEGIN: initializeSelect:\")\r\n\r\n\tvar wrapper = document.createElement(\"div\")\r\n\twrapper.classList.add(\"sketchfab-select-wrapper\")\t\r\n\tvar appWidth = Number(appContainer.clientWidth)\r\n\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\r\n\tvar select = document.createElement(\"div\")\r\n\tselect.classList.add(\"sketchfab-select\")\r\n\t\r\n\tvar selectTrigger = document.createElement(\"div\")\r\n\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\r\n\tvar triggerSpan = document.createElement(\"span\")\r\n\ttriggerSpan.id = \"triggerSpan-\" + controlIndex;\r\n\ttriggerSpan.classList.add(\"sketchfab-select-value\")\r\n\ttriggerSpan.classList.add(geometryName + \"-triggerSpan\")\r\n\ttriggerSpan.textContent = modelList[currentModelIndex].controls[controlIndex].initialValue;\r\n\t\r\n\tvar arrow = document.createElement(\"div\")\r\n\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\t\r\n\tvar customOptions = document.createElement(\"div\")\r\n\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\tvar selectTitle = document.createElement(\"h3\")\r\n\tselectTitle.classList.add(\"sketchfab-title\")\r\n\tselectTitle.textContent = modelList[currentModelIndex].controls[controlIndex].name;\r\n\t\r\n\tselectTrigger.appendChild(triggerSpan)\r\n\tselectTrigger.appendChild(arrow)\r\n\tcustomOptions.appendChild(selectTitle)\r\n\tselect.appendChild(selectTrigger)\r\n\tselect.appendChild(customOptions)\r\n\twrapper.appendChild(select)\t\r\n\r\n\twrapper.addEventListener('click', function() {\r\n\t\tconsole.log(\"BEGIN: wrapper click\");\r\n\t\tvar index = this.querySelector(\".sketchfab-select-value\").id.split(\"-\")[1]\r\n\t\tif (globalDisabledControls[index] === false) {\r\n\t\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t\t}\r\n\t\tconsole.log(\"END: wrapper click\");\r\n\t})\r\n\t\r\n\treturn wrapper;\r\n\tconsole.log(\"END: initializeSelect:\")\r\n}\r\n\r\nif (modelList.length > 1) {\r\n\tfor (var i = 0; i<modelList.length; ++i) {\r\n\t\tconsole.log(\"modelList:\")\r\n\t\tconsole.log(modelList)\r\n\t\tvar viewerButton = document.createElement(\"button\");\r\n\t\tviewerButton.id = \"index\" + \"-\" + i;\r\n\t\tviewerButton.classList.add(\"view-change__button\")\r\n\t\tviewerButton.textContent = modelList[i].name;\r\n\t\tif (currentModelIndex === i) {\t\r\n\t\t\tviewerButton.disabled = true;\r\n\t\t}\r\n\t\tviewerButton.addEventListener(\"click\", function() {\r\n\t\t\tvar viewChangeButtons = document.querySelectorAll(\".view-change__button\")\r\n\t\t\tfor (var j=0; j<viewChangeButtons.length; ++j) {\r\n\t\t\t\tviewChangeButtons[j].disabled = false;\r\n\t\t\t}\r\n\t\t\tthis.disabled = true;\r\n\t\t\t\r\n\t\t\tcontrolsContainer.innerHTML = null;\r\n\r\n\t\t\tanimationButtonContainer.innerHTML = null;\r\n\t\t\tanimationContainerTitle.style.display = \"none\";\r\n\t\t\tvar index = this.id.split(\"-\")[1]\r\n\t\t\tapiSkfb.stop();\r\n\t\t\tloaderTitle.textContent = modelList[index].name;\r\n\t\t\tcurrentModelIndex = index;\r\n\r\n\t\t\tisElementCategoryControlled = false;\r\n\t\t\tsurfaceConfigurationMode = false;\r\n\r\n\t\t\tanimationObjects = {};\r\n\t\t\ttoggleableItems = {};\r\n\t\t\tcurrentAnimationIndex = 0;\r\n\t\t\tcurrentAnimationEndTime = 0;\r\n\r\n\t\t\tglobalDisabledControls = [];\r\n\r\n\t\t\tanimationsEnabled = false;\r\n\t\t\t\r\n\t\t\tviewer.style.display = \"none\"\r\n\t\t\tloader.style.display = \"flex\"\r\n\r\n\t\t\tclient.init(modelList[index].uid, {\r\n\t\t\t\tsuccess: success,\r\n\t\t\t\terror: generateErrorMessage,\r\n\t\t\t\tmerge_materials: 1,\r\n\t\t\t\tmaterial_packing: 1,\r\n\t\t\t\tautostart: 1,\r\n\t\t\t\tpreload: 0,\r\n\t\t\t\tui_animations: 0,\r\n\t\t\t\tui_watermark: 0,\r\n\t\t\t\tui_inspector: 0,\r\n\t\t\t\tui_stop: 0,\r\n\t\t\t\tui_infos: 0,\r\n\t\t\t});\r\n\t\t});\r\n\t\tchangeViewerContainer.appendChild(viewerButton);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n`\r\n)\r\n}\r\n\r\nexport default ExportModal;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { \r\n    createControl, \r\n    toggleOptionChoiceModalDisplay,\r\n    selectSurfaceConfigurationMode,\r\n    setSurfaceConfigurationMode,\r\n    addTextureControls,\r\n} from './viewerSlice';\r\n\r\nconst OptionChoiceModal = () => {\r\n    const dispatch = useDispatch();\r\n    const isSurfaceConfigurationMode = false //useSelector(selectSurfaceConfigurationMode)\r\n\r\n    return (\r\n        <div id=\"control-choice-modal\">\r\n            <div className=\"control-choice-content\">\r\n                <div \r\n                    className=\"control-choice\" \r\n                    style={{color: \"red\"}}\r\n                    onClick={() => {\r\n                        dispatch(createControl(\"animation\"));\r\n                        dispatch(toggleOptionChoiceModalDisplay());\r\n                    }}\r\n                >Animation</div>\r\n                <div \r\n                    className=\"control-choice\" \r\n                    style={{color: \"yellow\"}}\r\n                    onClick={() => {\r\n                        dispatch(createControl(\"color\"));\r\n                        dispatch(toggleOptionChoiceModalDisplay());\r\n                    }}\r\n                >Color</div>\r\n                <div \r\n                    className=\"control-choice\" \r\n                    style={{color: \"blue\"}}\r\n                    onClick={() => {\r\n                        dispatch(createControl(\"geometryCategory\"));\r\n                        dispatch(toggleOptionChoiceModalDisplay());\r\n                    }}\r\n                >Geometry Category</div>\r\n                <div \r\n                    className=\"control-choice\" \r\n                    style={{visibility: isSurfaceConfigurationMode ? \"hidden\" : \"visible\", color: \"green\"}}\r\n                    onClick={() => {\r\n                        if (isSurfaceConfigurationMode === false) {\r\n                            dispatch(toggleOptionChoiceModalDisplay());\r\n                            dispatch(addTextureControls())\r\n                            dispatch(setSurfaceConfigurationMode(true))\r\n                        }\r\n                    }}\r\n                >Texture Configuration</div>\r\n                <div \r\n                    className=\"control-choice\" \r\n                    style={{color: \"purple\"}}\r\n                    onClick={() => {\r\n                        dispatch(createControl(\"toggle\"));\r\n                        dispatch(toggleOptionChoiceModalDisplay());\r\n                    }}\r\n                >Toggle</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionChoiceModal;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectAnimations,\r\n  selectControls,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nconst AnimationPanel = props => {           \r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const animations = useSelector(selectAnimations);\r\n    const controls = useSelector(selectControls)\r\n\r\n    const animationOptions = animations.map(animation => <option value={animation[0]}>{animation[1]}</option>)\r\n    animationOptions.unshift(<option value=\"none\">Select an Animation</option>)\r\n\r\n    return (\r\n      <div style={{display: \"flex\", alignItems: \"flex-start\", flexDirection: \"column\"}}>\r\n        <div style={{display: \"flex\"}}>\r\n          <input\r\n            type=\"checkbox\"\r\n            value={option.configuration.isDisabledInitially}\r\n            onChange={(e) => {\r\n              for (let i=0; i<controls.length; ++i) {\r\n                let newXConfiguration = {\r\n                  ...controls[i].configuration,\r\n                  isDisabledInitially: false,\r\n                }\r\n                dispatch(updateControl({id: controls[i].id, key: \"configuration\", value: newXConfiguration}))\r\n              }\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                isDisabledInitially: !option.configuration.isDisabledInitially,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          />\r\n          <div>Disable Initially</div>\r\n        </div>\r\n        <div>\r\n          <label>Animation:</label>\r\n          <select \r\n            name=\"animationSelect\"\r\n            value={option.configuration.animationUID}\r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                animationUID: e.target.value,\r\n                animationName: e.target.options[e.target.selectedIndex].textContent,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          >\r\n            {animationOptions}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"start\">Start Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"start\"\r\n            value={option.configuration.startTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                startTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end\">End Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"end\"\r\n            value={option.configuration.endTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                endTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AnimationPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectMaterials, \r\n  updateControl,\r\n} from './viewerSlice';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nconst ColorPanel = props => {\r\n\r\n    const dispatch = useDispatch(); \r\n    const { option } = props\r\n    const materials = useSelector(selectMaterials); \r\n\r\n    return (\r\n    <div>\r\n      <div className=\"input__container\">\r\n        <label htmlFor=\"materials\">Material:</label>\r\n        {renderColorsOption(option, materials, dispatch)}\r\n      </div>\r\n      <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n        {renderAdditionalColors(option.id, option.additionalColors, dispatch)}\r\n      </div>\r\n      <div className=\"input__container\">\r\n        <button \r\n          id=\"addColor\"\r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.additionalColors === undefined || option.additionalColors === null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"additionalColors\", \r\n                  value: [{color:\"#ffffff\", name: \"white\", colorRGB: [1,1,1]}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newColors = [];\r\n              for (let i = 0; i<option.additionalColors.length; ++i) {\r\n                newColors[i] = option.additionalColors[i];\r\n              }\r\n              newColors.push({color: \"#ffffff\", name: \"default\", colorRGB: [1,1,1]});\r\n              dispatch(updateControl({id: option.id, key: \"additionalColors\", value: newColors}));\r\n            }\r\n          }}\r\n        >+ Add Color</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst renderAdditionalColors = (id, additionalColors, dispatch) => {\r\n    if (additionalColors == null || additionalColors == undefined) {\r\n      return <div></div>\r\n    } else {\r\n      return additionalColors.map((color, index, array) => (\r\n        <div className=\"input__container\">\r\n          <label htmlFor=\"defaultColor\">Alternate Color:</label>\r\n          <input \r\n            type=\"color\" \r\n            name=\"additionalColor\" \r\n            id={`${id}-${index}-additionalColor`} \r\n            value={additionalColors[index].color}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = e.target.value;\r\n                  newColor.colorRGB = hexRgb(e.target.value, {format: 'array'}).map(num => num/255);\r\n                  newColor.name = array[i].name;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={additionalColors[index].name}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = e.target.value;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n        </div>\r\n      ))\r\n    }\r\n  }\r\n  \r\nconst renderColorsOption = (option, materials, dispatch) => {\r\n  \r\n    const materialsHtml = materials.map((material, index) => <option value={index}>{material.name}</option>)\r\n    materialsHtml.unshift(<option value=\"none\">Select a Material</option>)\r\n\r\n    return (\r\n      <select \r\n        name=\"materials\" \r\n        id=\"materials\"\r\n        onChange={(e) => {\r\n          dispatch(updateControl({id: option.id, key: \"entityIndex\", value: e.target.value }));\r\n          dispatch(updateControl({id: option.id, key: \"entity\", value: materials[e.target.value] }));\r\n        }}\r\n        value={option.entityIndex}\r\n      >\r\n        {materialsHtml}\r\n      </select>\r\n    )\r\n}\r\n\r\nexport default ColorPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectGeometryCategoryOptions,\r\n  selectControls,\r\n  setUnselectedGeometries,\r\n  updateControl,\r\n} from './viewerSlice';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst GeometryCategoryPanel = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const unselectedGeometries = useSelector(selectGeometryCategoryOptions);\r\n    const selectedGeometries = option.configuration.geometries;\r\n    const controls = useSelector(selectControls)\r\n\r\n    const renderUnselectedGeometryMultiselect = () => unselectedGeometries.map((geometry, index) => (\r\n            <div \r\n              key={`element-${option.id}-${index}`} \r\n              className=\"geometry-option\"\r\n              style={{display: \"flex\"}} \r\n              onClick={() => {\r\n                let newUnselectedGeometries = JSON.parse(JSON.stringify(unselectedGeometries))\r\n                let selectedGeometry = newUnselectedGeometries.splice(index, 1)[0]\r\n                selectedGeometry.disabledTextureControls = []\r\n                let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                newConfiguration.geometries.push(selectedGeometry)\r\n                dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n                dispatch(setUnselectedGeometries(newUnselectedGeometries))\r\n              }}\r\n            >\r\n              <div>{geometry.designation}</div>\r\n            </div>\r\n          ))\r\n\r\n    const renderSelectedGeometryMultiselect = () => {     \r\n\r\n      return selectedGeometries.map((geometry, index) => {\r\n        \r\n        return (\r\n          <div style={{display: \"flex\"}}>\r\n          <div key={`element-${option.id}-${index}`}>\r\n            <div style={{display: \"flex\"}}>\r\n              <div style={{display: \"flex\", flex: \"1 1 auto\", fontWeight: \"bold\"}}>\r\n                <div>{geometry.designation}</div>\r\n              </div>\r\n              <div>Animation:</div>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={geometry.allowsAnimation}\r\n                onChange={() => {\r\n                  let newGeometries = JSON.parse(JSON.stringify(selectedGeometries))\r\n                  newGeometries[index].allowsAnimation = !geometry.allowsAnimation;\r\n                  setSelectedGeometries(newGeometries)\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{display: \"flex\"}}>\r\n              <div>Name:</div>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter human readable name\"\r\n                value={geometry.humanReadable}\r\n                onChange={e => {\r\n                  let newGeometries = JSON.parse(JSON.stringify(selectedGeometries))\r\n                  newGeometries[index].humanReadable = e.target.value;\r\n                  setSelectedGeometries(newGeometries)\r\n                }}\r\n              />\r\n            </div>\r\n            {renderDisableMultiSelect(index)}\r\n            <div style={{textAlign: \"left\", marginLeft: 16}}>\r\n              <div style={{color: \"green\", fontWeight: \"bold\"}}>Disable When Selected:</div>\r\n              {renderDisableTextureControls(index)}\r\n            </div>\r\n          </div>\r\n          <div style={{display: \"flex\", flex: \"1 1 auto\"}}>\r\n              <button \r\n                title=\"Remove option\"\r\n                onClick={() => {\r\n                  let newUnselectedGeometries = JSON.parse(JSON.stringify(unselectedGeometries))\r\n                  let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                  let unSelectedGeometry = newConfiguration.geometries.splice(index, 1)[0]\r\n                  newUnselectedGeometries.unshift(unSelectedGeometry)\r\n                  dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n                  dispatch(setUnselectedGeometries(newUnselectedGeometries))\r\n                }}\r\n              >\r\n                <svg \r\n                  fill=\"currentColor\" \r\n                  preserveAspectRatio=\"xMidYMid meet\" \r\n                  height=\"1em\" \r\n                  width=\"1em\" \r\n                  viewBox=\"0 0 40 40\" \r\n                  style={{verticalAlign: \"middle\"}}\r\n                >\r\n                  <g>\r\n                    <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n                    0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n                    0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n                    0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n                    0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n                    0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n                    1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n                    0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n                    3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n                  </g>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n\r\n    const renderDisableTextureControls = (geometryIndex) => {\r\n      return controls.filter(control => control.type === \"textureCategory\").map(control => {\r\n        let showChecked = option.configuration.geometries[geometryIndex].disabledTextureControls.includes(control.name)\r\n        return (\r\n          <div style={{display: \"flex\"}}>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={showChecked}\r\n              onChange={() => {        \r\n                let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                if (showChecked) {                    \r\n                  newConfiguration.geometries[geometryIndex].disabledTextureControls = newConfiguration.geometries[geometryIndex].disabledTextureControls.filter(disabledTextureControls => disabledTextureControls !== control.name)\r\n                } else {                  \r\n                  newConfiguration.geometries[geometryIndex].disabledTextureControls.push(control.name)\r\n                }\r\n                dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n              }}\r\n            />\r\n            <div>{control.name}</div>\r\n          </div>\r\n      )})    \r\n    }\r\n\r\n    const renderDisableMultiSelect = (geometryIndex) => {\r\n    \r\n      var multiSelects = [];\r\n      for (let i=0; i<controls.length; ++i) {\r\n        if (controls[i].type === \"geometryCategory\" && controls[i].id !== option.id) {\r\n          \r\n          var multiSelect = controls[i].configuration.geometries.map((geometry, complimentGeometryIndex) => {\r\n            let showChecked = false;\r\n            \r\n            if (option.configuration.geometries[geometryIndex].hiddenValues === undefined) { //backwards-compatibility\r\n              let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n              newConfiguration.geometries[geometryIndex].hiddenValues = []\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }\r\n            if (option.configuration.geometries[geometryIndex].hiddenValues.includes(geometry.designation)) {\r\n              showChecked = true;\r\n            }\r\n            \r\n            return (\r\n            <div style={{display: \"flex\"}}>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={showChecked}\r\n                onChange={() => {        \r\n                  let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                  console.log(\"controls[i]:\")\r\n                  console.log(controls[i])\r\n                  if(showChecked) {                    \r\n                    newConfiguration.geometries[geometryIndex].hiddenValues = newConfiguration.geometries[geometryIndex].hiddenValues.filter(hiddenElementDesignation => hiddenElementDesignation !== geometry.designation)\r\n                  } else {\r\n                    newConfiguration.geometries[geometryIndex].hiddenValues.push(geometry.designation)\r\n                  }\r\n                  dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                }}\r\n              />\r\n              <div>{geometry.designation}</div>\r\n            </div>            \r\n            )\r\n          })\r\n          multiSelects.push(\r\n            <div>\r\n              <div style={{marginLeft: 4, color: \"blue\"}}>{controls[i].name}</div>\r\n              {multiSelect}\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n      return (\r\n        <div style={{textAlign: \"left\", marginLeft: 16}}>\r\n          <div style={{color: \"blue\", fontWeight: \"bold\"}}>Disable When Selected:</div>\r\n          {multiSelects}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const setSelectedGeometries = (selectedGeometries) => {\r\n      let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n      newConfiguration.geometries = selectedGeometries\r\n      dispatch(updateControl({ id: option.id, key: \"configuration\", value: newConfiguration }))\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Initial :</p>\r\n          <select onChange={(e) => dispatch(updateControl({id: option.id, key: \"initialValue\", value: e.target.value}))}>\r\n            {selectedGeometries.map((geometry, index) => {\r\n              let selected = false;\r\n              if(option.initialValue === \"\" && index === 0) {\r\n                selected = true\r\n                dispatch(updateControl({id: option.id, key: \"initialValue\", value: geometry.designation}))\r\n              } else {\r\n                selected = geometry.designation === option.initialValue\r\n              }\r\n              \r\n              return (<option selected={selected} value={geometry.designation}>{geometry.designation}</option>)\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n          <div style={{display: \"flex\", color: \"blue\", fontWeight: \"bold\"}}>Selected Geometries: {option.configuration.geometries.length}</div>\r\n          <div style={{borderBottom: \"1px solid black\"}}>\r\n            <ReactSortable list={selectedGeometries} setList={selectedGeometries => setSelectedGeometries(selectedGeometries)}>\r\n              {renderSelectedGeometryMultiselect()}     \r\n            </ReactSortable>\r\n          </div>\r\n          <div style={{display: \"flex\", color: \"blue\", fontWeight: \"bold\"}}>Select A Geometry:</div>\r\n          {renderUnselectedGeometryMultiselect()}          \r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default GeometryCategoryPanel;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n    updateControl,\r\n} from './viewerSlice';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst TextureConfigurationPanel = props => {\r\n    const { option } = props;\r\n    const dispatch = useDispatch();\r\n\r\n    const renderMaterialNameSegmentMap = () => option.configuration.options.map((designation, index) => (\r\n        <div>\r\n            {designation.name}\r\n            <input \r\n                value={designation.humanReadable} \r\n                onChange={(e) => {\r\n                    let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n                    newConfiguration.options[index].humanReadable = e.target.value;\r\n                    dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                }}\r\n            />\r\n        </div>\r\n    ))\r\n\r\n    const updateOptions = (newOptions) => {\r\n        let newConfiguration = JSON.parse(JSON.stringify(option.configuration))\r\n        newConfiguration.options = newOptions;\r\n        dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <div style={{display:\"flex\"}}>\r\n            <p className=\"nameFieldTitle\">Initial :</p>\r\n            <select onChange={(e) => dispatch(updateControl({id: option.id, key: \"initialValue\", value: e.target.value}))}>\r\n                {option.configuration.options.map((designation, index) => {\r\n                    let selected = false;\r\n                    if((option.initialValue === \"\" || option.initialValue === undefined) && index === 0) {\r\n                        selected = true\r\n                        dispatch(updateControl({id: option.id, key: \"initialValue\", value: designation.name}))\r\n                    } else {\r\n                        selected = designation.name === option.initialValue\r\n                    }\r\n                    \r\n                    return   (<option selected={selected} value={designation.name}>{designation.name}</option>)\r\n                })}\r\n            </select>\r\n        </div>\r\n          <div>\r\n            <h4>Code Name Map:</h4>\r\n            <ReactSortable list={option.configuration.options} setList={newOptions => updateOptions(newOptions)}>\r\n                {renderMaterialNameSegmentMap()}\r\n            </ReactSortable>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default TextureConfigurationPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nconst TogglePanel = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => <option value={node.instanceID}>{addDashes(node.depth)}{node.name}</option>)\r\n    sceneGraphHtml.unshift(<option value={0}>Select a Node</option>)\r\n  \r\n    return (\r\n      <select \r\n        name=\"nodes\" \r\n        id=\"nodes\"\r\n        className=\"material__select\"\r\n        value={option.entity.instanceID}\r\n        onChange={e => dispatch(updateControl({id: option.id, key: \"entity\", value: {instanceID: e.target.value}}))}\r\n      >\r\n        {sceneGraphHtml}\r\n      </select>\r\n    )\r\n}\r\n  \r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n\r\nexport default TogglePanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleOptionChoiceModalDisplay, \r\n  selectControls, \r\n  selectDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n} from './viewerSlice';\r\nimport AnimationPanel from './AnimationPanel';\r\nimport ColorPanel from './ColorPanel';\r\nimport GeometryCategoryPanel from './GeometryCategoryPanel'\r\nimport TextureConfigurationPanel from './TextureCategoryPanel';\r\nimport TogglePanel from './TogglePanel';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst panelColors = {\r\n  animation: \"red\",\r\n  color: \"yellow\",\r\n  geometryCategory: \"blue\",\r\n  textureCategory: \"green\",\r\n  toggle: \"purple\",\r\n}\r\n\r\nconst OptionPanel = () => {  \r\n  \r\n  const options = useSelector(selectControls);\r\n  const disableButtons = useSelector(selectDisableButtons) && false;\r\n\r\n  const dispatch = useDispatch();\r\n\r\nconst renderPanel = (option) => {\r\n  if (option.type === \"animation\") {\r\n    return <AnimationPanel option={option} />;\r\n  } else if (option.type === \"color\") {\r\n    return <ColorPanel option={option} />;\r\n  } else if (option.type === \"geometryCategory\") {\r\n    return <GeometryCategoryPanel option={option} />;\r\n  } else if (option.type === \"textureCategory\") {\r\n    return <TextureConfigurationPanel option={option} />;\r\n  } else if (option.type === \"toggle\") {\r\n    return <TogglePanel option={option} />;\r\n  }\r\n}\r\n\r\nconst renderOptions = (options, dispatch) => {\r\n  \r\n  let optionsHtml = options.map((option, index, array) => (\r\n    <div className=\"single-option__panel\" key={`option-${index}`}>\r\n      <div className=\"single-option__header\">\r\n        <h3 className=\"single-option__title\" style={{color: panelColors[option.type]}}>{option.name}</h3>\r\n        <button \r\n          id={`collapseButton${option.id}`}\r\n          className=\"collapse__button\"\r\n          onClick={(e) => dispatch(updateControl({\r\n            id: option.id,\r\n            key: \"isExpanded\",\r\n            value: !option.isExpanded\r\n          }))}\r\n        >\r\n          {option.isExpanded ? \"Collapse\" : \"Expand\"}\r\n        </button>\r\n        <button \r\n          title=\"Remove option\"\r\n          onClick={() => {\r\n            const newArray = array.filter(control => control.id !== option.id);\r\n            dispatch(setControls(newArray));\r\n          }}\r\n        >\r\n          <svg \r\n            fill=\"currentColor\" \r\n            preserveAspectRatio=\"xMidYMid meet\" \r\n            height=\"1em\" \r\n            width=\"1em\" \r\n            viewBox=\"0 0 40 40\" \r\n            style={{verticalAlign: \"middle\"}}\r\n          >\r\n            <g>\r\n              <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n              0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n              0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n              0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n              0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n              0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n              1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n              0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n              3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div style={{display: option.isExpanded ? \"block\" : \"none\"}}>\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Name:</p>\r\n          <input \r\n            type=\"text\" \r\n            name=\"colorName\" \r\n            id=\"colorName\" \r\n            value={option.name} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"name\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        {renderPanel(option)}\r\n      </div>\r\n    </div>\r\n  ))\r\n\r\n  return optionsHtml;\r\n}\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\", display: \"flex\", flexDirection: \"column\"}}>\r\n      <button \r\n        className=\"add-option add__button\" \r\n        disabled={disableButtons}\r\n        onClick={() => dispatch(toggleOptionChoiceModalDisplay())}\r\n      >+ Add Configurable Element</button>\r\n      <div className=\"single-option__panels__container\">\r\n        <ReactSortable list={options} setList={options => dispatch(setControls(options))}>\r\n          {renderOptions(options, dispatch)}\r\n        </ReactSortable>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OptionPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  selectSketchfabAPI,\r\n  setSceneGraphIsVisible,\r\n  selectSceneGraphIsVisible,\r\n  setAllNodesVisible,\r\n} from './viewerSlice';\r\n\r\nconst NodePanel = () => {\r\n    const dispatch = useDispatch()\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n    const sketchfabAPI = useSelector(selectSketchfabAPI);\r\n    const sceneGraphIsVisible = useSelector(selectSceneGraphIsVisible);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => {\r\n      return (\r\n        <div style={{display: \"flex\"}}>\r\n          <input \r\n            id={node.instanceID}\r\n            type=\"checkbox\" \r\n            checked={sceneGraphIsVisible[node.instanceID]}\r\n            onChange={(e) => {\r\n                if (e.target.checked) {\r\n                    sketchfabAPI.show(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: true}))\r\n                } else {\r\n                    sketchfabAPI.hide(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: false}))\r\n                }\r\n            }}\r\n          />\r\n          <div className=\"node-name\">{addDashes(node.depth)}{node.name} - type: {node.type}</div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    sceneGraphHtml.unshift(\r\n      <div style={{display: \"flex\",borderBottom: \"1px solid black\"}}>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={Object.values(sceneGraphIsVisible).reduce((accum, curr) => accum && curr)}\r\n          onChange={(e) => {\r\n            dispatch(setAllNodesVisible(e.target.checked))\r\n          }}\r\n        />\r\n        <div className=\"node-name\">All Nodes</div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n        <div id=\"nodeControls\">\r\n            {sceneGraphHtml}\r\n        </div>\r\n        <div id=\"animationControls\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += i+1 + \"_\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n\r\nexport default NodePanel;\r\n","import Sketchfab from '@sketchfab/viewer-api';\r\nimport { buildTextureOptions } from './utils'\r\nimport {\r\n    setSketchfabAPI,\r\n    setAnimations,\r\n    setTextureControls,\r\n    toggleDisableButtons,\r\n    setSceneGraph,\r\n    setMaterials,\r\n    setSurfaceOptionMap,\r\n} from './viewerSlice';\r\n\r\nconst initializeViewer = modelId => dispatch => {\r\n  \r\n    var iframe = document.getElementById('api-frame');\r\n    var version = '1.9.0';\r\n    var DEFAULT_URLID = '256c6851707048a69320bffb9573e448';\r\n    \r\n    var CONFIG = {\r\n        urlid: modelId !== '' ? modelId : DEFAULT_URLID,\r\n    };\r\n    var isSeeking;\r\n    var animationsList = [];\r\n    var current_anim;\r\n    var apiSkfb;\r\n    var pollTime, duration;\r\n    var timeSlider;\r\n  \r\n    pollTime = function() {\r\n          apiSkfb.getCurrentTime(function(err, time) {\r\n                if (!isSeeking) {\r\n                    var percentage = (100 * time) / duration;\r\n                    timeSlider.value = percentage;\r\n                                        \r\n                    var timeDisplay = document.getElementById('timeDisplay');\r\n                    timeDisplay.innerHTML = time.toFixed(2);\r\n                    if (time == 2) {\r\n                      apiSkfb.seekTo(1);\r\n                    }\r\n                requestAnimationFrame(pollTime);\r\n              }\r\n          });\r\n    };\r\n  \r\n    var Configurator = {\r\n        api: null,\r\n        config: null,\r\n        options: [],\r\n  \r\n        init: function (config, iframe) {\r\n            this.config = config;\r\n            var client = new Sketchfab(version, iframe);\r\n            client.init(config.urlid, {\r\n                ui_controls: 0,\r\n                graph_optimizer: 0,\r\n                ui_animations: 0,\r\n                ui_watermark: 0,\r\n                ui_inspector: 0,\r\n                ui_stop: 0,\r\n                ui_infos: 0,\r\n  \r\n                success: function onSuccess(api) {\r\n                    var controls = document.getElementById('animationControls');\r\n                    var buttonsText = `\r\n                        <div style=\"display: flex; justify-content: center;\">\r\n                          <p id=\"timeDisplay\"></p>\r\n                          <p id=\"animationName\" style=\"margin-left: 50px;\"></p>\r\n                        </div>\r\n                        <button id=\"play\">Play</button>\r\n                        <button id=\"pause\">Pause</button>\r\n                        <button id=\"previous\">Previous</button>\r\n                        <button id=\"next\">Next</button>\r\n                        <input \r\n                          id=\"timeSlider\" \r\n                          class=\"slider timeSlider\" \r\n                          style=\"width:100%\" \r\n                          type=\"range\" \r\n                          min=\"0\" \r\n                          max=\"100\" \r\n                          step=\"0.1\" \r\n                          value=\"0\"\r\n                        />\r\n                    `;\r\n                \r\n                    controls.innerHTML = buttonsText;\r\n  \r\n                    apiSkfb = api;\r\n                    dispatch(setSketchfabAPI(api));\r\n                    api.start();\r\n                    api.addEventListener('viewerready', function () {\r\n                        this.api = api;\r\n                        api.pause();\r\n  \r\n                        api.getAnimations(function(err, animations) {\r\n                            animationsList = animations;\r\n  \r\n                            dispatch(setAnimations(animations));\r\n  \r\n                            if (animations.length == 0) {                            \r\n                                var controls = document.getElementById('animationControls');\r\n                                controls.innerHTML = \"\";\r\n                            } else {  \r\n                                document.getElementById('pause').addEventListener('click', function() {\r\n                                    api.pause();\r\n                                });\r\n      \r\n                                document.getElementById('play').addEventListener('click', function() {\r\n                                    api.play();\r\n                                });\r\n      \r\n                                document.getElementById('previous').addEventListener('click', function() {\r\n                                    if (current_anim === 0) current_anim = animationsList.length;\r\n                                    current_anim--;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n                    \r\n                                document.getElementById('next').addEventListener('click', function() {\r\n                                    current_anim++;\r\n                                    if (current_anim === animationsList.length) current_anim = 0;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n  \r\n                                var animationName = document.getElementById('animationName');\r\n                                animationName.innerHTML = animationsList[0][1];\r\n                                current_anim = 0;\r\n                                api.setCurrentAnimationByUID(animations[current_anim][0]);\r\n                                duration = animations[current_anim][2];\r\n                                isSeeking = false;\r\n                                timeSlider = document.getElementById('timeSlider');\r\n            \r\n                                timeSlider.addEventListener('change', function() {\r\n                                    isSeeking = false;\r\n  \r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                });\r\n            \r\n                                timeSlider.addEventListener('input', function() {\r\n                                    isSeeking = true;\r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                    api.pause();\r\n                                    api.seekTo(time);\r\n                                });\r\n                                \r\n                                pollTime();\r\n                            }\r\n                        });\r\n  \r\n                        \r\n                        dispatch(toggleDisableButtons());\r\n                        \r\n                        api.getSceneGraph(function(err, result) {\r\n                            if (err) {\r\n                                console.log('Error getting nodes');\r\n                                return;\r\n                            }                  \r\n                            dispatch(setSceneGraph(result))        \r\n                        });\r\n  \r\n                        api.getMaterialList(function(err, materials) {\r\n                            dispatch(setMaterials(materials));\r\n                            \r\n                            let surfaceOptions = buildTextureOptions(materials)\r\n                            \r\n                            dispatch(setSurfaceOptionMap(surfaceOptions.surfaceOptionMap))\r\n                            dispatch(setTextureControls(surfaceOptions.surfaceControls))\r\n                        });\r\n                    }.bind(this));\r\n                }.bind(this),\r\n                error: function onError() {\r\n                    console.log('Viewer error');\r\n                }\r\n            });\r\n        }\r\n    }\r\n  \r\n    Configurator.init(CONFIG, iframe);\r\n  };\r\n\r\nexport default initializeViewer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectModelList,\r\n  selectActiveModelGUID,\r\n  setModelId, \r\n  setModelName,\r\n  setIsInitialModel,\r\n} from './viewerSlice';\r\nimport initializeViewer from './initializeViewer';\r\n\r\nconst ModelPanel = () => {\r\n    const dispatch = useDispatch();\r\n    const modelList = useSelector(selectModelList);\r\n    const activeModelGUID = useSelector(selectActiveModelGUID)\r\n\r\n    let activeModel = modelList.filter(model => model.guid === activeModelGUID)[0]\r\n    if (activeModel !== undefined) {\r\n\r\n        return (\r\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n                <div style={{marginLeft: 3, textAlign: \"left\"}}>Model Name:</div>\r\n                <input\r\n                    style={{marginBottom: 20}}\r\n                    value={activeModel.name == \"\" ? \"\" : activeModel.name}\r\n                    onChange={e => dispatch(setModelName(e.target.value))}\r\n                />\r\n                <div style={{marginLeft: 3, textAlign: \"left\"}}>Model UID:</div>\r\n                <textarea\r\n                    placeholder=\"Enter Model UID here\"\r\n                    style={{width:\"100%\"}}\r\n                    value={activeModel.uid}\r\n                    onChange={e => {\r\n                        dispatch(setModelId(e.target.value))\r\n                        dispatch(initializeViewer(e.target.value))\r\n                    }}\r\n                />     \r\n                <div style={{display: \"flex\", marginLeft: 3}}>\r\n                    <div>Initial Model?</div>\r\n                    <input\r\n                        type={\"checkbox\"}\r\n                        checked={activeModel.isInitial}\r\n                        onChange={e => dispatch(setIsInitialModel(!activeModel.isInitial))}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport default ModelPanel;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    setViewMode,\r\n    selectViewMode,\r\n    selectDisableButtons,\r\n} from './viewerSlice';\r\nimport OptionPanel from './OptionPanel';\r\nimport NodePanel from './NodePanel';\r\nimport ModelPanel from './ModelPanel';\r\n\r\nconst ControlMenu = () => {\r\n    const dispatch = useDispatch();\r\n    const viewMode = useSelector(selectViewMode);\r\n    const disableButtons = useSelector(selectDisableButtons);\r\n\r\n    let nodesButtonStyles = {\r\n        backgroundColor: viewMode === \"nodes\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let optionsButtonStyles = {\r\n        backgroundColor: viewMode === \"options\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let modelButtonStyles = {\r\n        backgroundColor: viewMode === \"model\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    const renderPanel = (viewMode) => {\r\n        if (viewMode === \"options\") {\r\n            return <OptionPanel />\r\n        } else if (viewMode === \"nodes\") {\r\n            return <NodePanel />\r\n        } else if (viewMode === \"model\") {\r\n            return <ModelPanel />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"control-menu\">\r\n            <div style={{display: \"flex\"}}>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={nodesButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"nodes\"))}\r\n                >Nodes</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={optionsButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"options\"))}\r\n                >Options</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={modelButtonStyles}\r\n                    onClick={() => dispatch(setViewMode(\"model\"))}\r\n                >Model</button>\r\n            </div>\r\n            {renderPanel(viewMode)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlMenu;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    selectModelList,\r\n    selectActiveModelGUID,\r\n    setModelList,\r\n    setActiveModelGUID,\r\n    createModel,\r\n} from './viewerSlice';\r\nimport initializeViewer from './initializeViewer';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nconst modelListStyles = {\r\n    width: \"auto\",\r\n    minWidth: 100,\r\n    paddingLeft: 10,\r\n    paddingRight: 10, \r\n    textAlign: \"center\", \r\n    borderRadius: 25,\r\n    border: \"1px solid\",\r\n}\r\nconst inActiveStyles = { \r\n    backgroundColor: \"teal\", \r\n    color: \"white\", \r\n    borderColor: \"white\",\r\n    cursor: \"pointer\",\r\n    ...modelListStyles,\r\n}\r\nconst activeStyles = { \r\n    backgroundColor: \"white\", \r\n    color: \"teal\", \r\n    borderColor: \"teal\",\r\n    ...modelListStyles,\r\n}\r\n\r\nconst ModelList = () => {\r\n    const modelList = useSelector(selectModelList);\r\n    const activeModelGuid = useSelector(selectActiveModelGUID)\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div style={{display: \"flex\", justifyContent: \"right\"}}>\r\n            <ReactSortable \r\n                style={{display: \"flex\", justifyContent: \"right\"}}\r\n                list={modelList} \r\n                setList={modelList => dispatch(setModelList(modelList))}>\r\n                    {modelList.map(model => (\r\n                        <div \r\n                            style={activeModelGuid === model.guid ? activeStyles : inActiveStyles}\r\n                            id={\"model-\" + model.guid}\r\n                            onClick={e => {\r\n                                let modelGuid = Number(e.target.id.split(\"-\")[1])\r\n                                dispatch(setActiveModelGUID(modelGuid))\r\n                                dispatch(initializeViewer(model.uid))\r\n                            }}\r\n                        >\r\n                            {model.name}\r\n                            <svg \r\n                                fill=\"currentColor\" \r\n                                preserveAspectRatio=\"xMidYMid meet\" \r\n                                height=\"1em\" \r\n                                width=\"1em\" \r\n                                viewBox=\"0 0 40 40\" \r\n                                style={{verticalAlign: \"middle\", cursor: \"pointer\"}}\r\n                                onClick={e => {\r\n                                    let newModelList = modelList.filter(m => m.guid !== model.guid)\r\n                                    dispatch(setModelList(newModelList))\r\n                                }}\r\n                            >\r\n                                <g>\r\n                                    <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n                                    0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n                                    0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n                                    0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n                                    0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n                                    0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n                                    1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n                                    0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n                                    3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n                                </g>\r\n                            </svg>\r\n                        </div>\r\n                    ))}\r\n            </ReactSortable>\r\n            <div \r\n                style={{\r\n                    ...activeStyles,\r\n                    cursor: \"pointer\",\r\n                    width: 320,\r\n                    padding: 0,\r\n                    \r\n                }}\r\n                onClick={() => {\r\n                    dispatch(createModel())\r\n                }}\r\n            >+ Add Model</div>\r\n        </div>\r\n    )\r\n  }\r\n  \r\n  export default ModelList;\r\n  \r\n  /********\r\n   * \r\n   * HELLO FROM ThE OTHER SIIIIIDE\r\n   * \r\n   *********/","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Viewer from './components/Viewer'\r\nimport ImportModal from './components/ImportModal';\r\nimport ExportModal from './components/ExportModal';\r\nimport OptionChoiceModal from './components/OptionChoiceModal';\r\nimport ControlMenu from './components/ControlMenu';\r\nimport ModelList from './components/ModelList'\r\nimport './App.css';\r\nimport './globals';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <ModelList />\r\n      <div className=\"body\">\r\n        <Viewer />\r\n        <ControlMenu />\r\n        <ImportModal />\r\n        <ExportModal />\r\n        <OptionChoiceModal />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport viewerReducer from '../components/viewerSlice';\r\nimport logger from 'redux-logger';\r\n\r\nexport default configureStore({\r\n  reducer: viewerReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","var buildSceneGraph = function(model, children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n    if (children[i].name != \"RootNode\") {\r\n      if(children[i].name == undefined) {\r\n        model.sceneGraph.push({\r\n          name: children[i].type, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n          type: children[i].type,\r\n        });\r\n      } else {\r\n        model.sceneGraph.push({\r\n          name: children[i].name, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n          type: children[i].type,\r\n        });\r\n      }\r\n      model.sceneGraphIsVisible[children[i].instanceID] = true\r\n    }\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildSceneGraph(model, children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar buildGeometryCategoryOptions = (model) => {   \r\n\r\n  let uniqueStrings = [];\r\n  let geometryCategoryOptions = [];\r\n  for (let i=0; i<model.sceneGraph.length; ++i) {\r\n    let nodeNameArray = model.sceneGraph[i].name.split(\"-\").filter(string => string != \"\")\r\n    let mainDesignation = nodeNameArray[0];\r\n    let capitalLetter = nodeNameArray[1];\r\n    let detailedTitle = nodeNameArray[2];\r\n    for (let i=3; i<nodeNameArray.length; ++i) {\r\n      detailedTitle += nodeNameArray[i];\r\n    }\r\n\r\n    const irrelevantStrings = [\"Group\", \"RootNode\", \"MatrixTransform\"];\r\n    if (uniqueStrings.indexOf(mainDesignation) == -1 &&\r\n      irrelevantStrings.indexOf(mainDesignation) == -1) {\r\n      uniqueStrings.push(mainDesignation);\r\n      geometryCategoryOptions.push({\r\n        instanceID: model.sceneGraph[i].instanceID,\r\n        designation: mainDesignation,\r\n        capitalLetter: capitalLetter,\r\n        detailedTitle: detailedTitle,\r\n        humanReadable: mainDesignation,\r\n        hiddenValues: [],\r\n        allowsAnimation: true,\r\n      })\r\n    }\r\n  }\r\n  geometryCategoryOptions.sort(function(a,b){return a.designation.charCodeAt(0)-b.designation.charCodeAt(0)})\r\n  model.geometryCategoryOptions = geometryCategoryOptions;\r\n}\r\n\r\nvar buildTextureOptions = (materials) => {  \r\n    let surfaceOptionMap = {};\r\n    let surfaceControls = [];\r\n    \r\n    for (let i=0; i<materials.length; ++i) {\r\n      var matches = materials[i].name.match(/[a-zA-Z]*-[A-Z]+-[a-zA-Z]+/g);\r\n    \r\n      if (matches !== null) {\r\n        let materialNameArray = materials[i].name.split(\"-\").filter(string => string != \"\")\r\n        let geometryName = materialNameArray[0];\r\n        let materialOptions = materials[i].name.match(/[A-Z]+-/g).map(option => option.replace(\"-\", \"\"));\r\n        let primaryValue = materialOptions[0];\r\n\r\n        // generate select display\r\n        let isNewUniqueGeometry = surfaceOptionMap[geometryName] === undefined;\r\n        if (isNewUniqueGeometry) {\r\n          surfaceOptionMap[geometryName] = {}\r\n\r\n\r\n          surfaceControls.push({\r\n            name: geometryName + \" - Attribute 1\", \r\n            configuration: {\r\n              isPrimary: true,\r\n              ordering: 0,\r\n              geometryName: geometryName, \r\n              options: [{name: materialOptions[0], humanReadable: materialOptions[0]}]\r\n            },\r\n            entity: {instanceID: 0},\r\n            entityIndex: \"none\",\r\n            isExpanded: true,\r\n            type: \"textureCategory\",     \r\n            textureId: surfaceControls.length,       \r\n          })\r\n\r\n          surfaceOptionMap[geometryName][materialOptions[0]] = [];\r\n          for (let j=1; j<materialOptions.length; ++j) {\r\n            surfaceControls.push({\r\n              name: `${geometryName} - Attribute ${j+1}`, \r\n              configuration: {\r\n                isPrimary: false,\r\n                ordering: j,\r\n                geometryName: geometryName, \r\n                options: [{name: materialOptions[j], humanReadable: materialOptions[j]}]\r\n              },\r\n              entity: {instanceID: 0},\r\n              entityIndex: \"none\",\r\n              isExpanded: true,\r\n              type: \"textureCategory\",      \r\n              initialValue: \"\",  \r\n            })\r\n            surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n          }\r\n        } else {\r\n          for (var j=0; j<surfaceControls.length; ++j) {\r\n            if (surfaceControls[j].configuration.geometryName === geometryName) {\r\n\r\n              var optionExists = false;\r\n              for (var k=0; k<surfaceControls[j].configuration.options.length; ++k) {\r\n                if (surfaceControls[j].configuration.options[k].name === materialOptions[0]) {\r\n                  optionExists = true;\r\n                  break;\r\n                }\r\n              }\r\n              if(optionExists === false) {\r\n                surfaceControls[j].configuration.options.push({name: materialOptions[0], humanReadable: materialOptions[0]})\r\n              }\r\n              for (var k=1; k<materialOptions.length; ++k) {\r\n                var optionExists = false;\r\n                for (var l=0; l<surfaceControls[j+k].configuration.options.length; ++l) {\r\n                  if (surfaceControls[j+k].configuration.options[l].name === materialOptions[k]) {\r\n                    optionExists = true;\r\n                    break;\r\n                  }\r\n                }\r\n                if (optionExists === false) {\r\n                  surfaceControls[j+k].configuration.options.push({name: materialOptions[k], humanReadable: materialOptions[k]})\r\n                }\r\n              }\r\n              break;\r\n            }\r\n          }\r\n\r\n          let isNewUniquePrimaryValue = surfaceOptionMap[geometryName][primaryValue] === undefined\r\n          if (isNewUniquePrimaryValue) {\r\n            surfaceOptionMap[geometryName][primaryValue] = [];\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n            }\r\n          } else {\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              let currentAttributeOptions = surfaceOptionMap[geometryName][primaryValue][j-1];\r\n              let isNewUniqueValue = currentAttributeOptions.indexOf(materialOptions[j]) === -1;\r\n              if (isNewUniqueValue) {\r\n                currentAttributeOptions.push(materialOptions[j])\r\n              }\r\n            }                                  \r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n        surfaceOptionMap,\r\n        surfaceControls,\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    buildSceneGraph,\r\n    buildGeometryCategoryOptions,\r\n    buildTextureOptions,\r\n}\r\n"],"sourceRoot":""}