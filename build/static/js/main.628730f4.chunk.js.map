{"version":3,"sources":["globals.js","components/viewerSlice.js","components/Header.js","components/initializeViewer.js","components/Viewer.js","components/ExportModal.js","components/OptionChoiceModal.js","components/ColorPanel.js","components/TogglePanel.js","components/ElementCategoryPanel.js","components/SurfaceConfigurationPanel.js","components/AnimationPanel.js","components/OptionPanel.js","components/NodePanel.js","components/ControlMenu.js","App.js","app/store.js","serviceWorker.js","index.js","components/utils.js"],"names":["window","onclick","event","modal","document","getElementById","target","style","display","initialState","modelId","materials","animations","sceneGraph","controls","disableButtons","latestControlId","sketchfabAPI","sceneGraphIsVisible","viewMode","surfaceOptionMap","surfaceConfigurationMode","materialNameSegmentMap","surfaceAttributeNameMap","groupingOptions","hiddenCategoryConfigurations","viewerSlice","createSlice","name","reducers","resetState","state","setSketchfabAPI","action","payload","setModelId","setMaterials","setAnimations","setSceneGraph","buildSceneGraph","children","buildCategoryOptions","setSceneGraphIsVisible","id","value","createControl","defaultConfiguration","animationUID","startTime","endTime","designations","allowsAnimation","unshift","type","entityIndex","entity","instanceID","configuration","isExpanded","setViewMode","setControls","toggleDisableButtons","updateControl","key","console","log","i","length","setSurfaceOptionMap","setSurfaceConfigurationMode","setMaterialNameSegmentMap","setSurfaceAttributeNameMap","setGroupingOptions","setHiddenCategoryConfigurations","setAllNodesVisible","Object","keys","show","hide","actions","selectModelId","selectMaterials","selectAnimations","selectControls","selectDisableButtons","selectSceneGraph","selectSketchfabAPI","selectSceneGraphIsVisible","selectViewMode","selectSurfaceOptionMap","selectSurfaceConfigurationMode","selectMaterialNameSegmentMap","selectSurfaceAttributeNameMap","selectGroupingOptions","selectHiddenCategoryConfigurations","toggleModalDisplay","dispatch","currentStyle","toggleOptionChoiceModalDisplay","useSelector","useDispatch","className","onChange","e","onClick","isSeeking","current_anim","apiSkfb","pollTime","duration","timeSlider","iframe","animationsList","getCurrentTime","err","time","percentage","innerHTML","toFixed","seekTo","requestAnimationFrame","api","config","options","init","this","Sketchfab","urlid","ui_controls","graph_optimizer","ui_animations","ui_watermark","ui_inspector","ui_stop","ui_infos","success","start","addEventListener","pause","getAnimations","play","setCurrentAnimationByUID","getSceneGraph","result","getMaterialList","surfaceOptions","buildSurfaceOptions","bind","error","prefix","initializeViewer","disabled","class","src","allowfullscreen","mozallowfullscreen","webkitallowfullscreen","configurationMaps","createJSExport","JSON","stringify","props","option","htmlFor","renderColorsOption","renderAdditionalColors","additionalColors","undefined","transferObject","color","colorRGB","newColors","push","map","index","array","newArray","newColor","hexRgb","format","num","materialsHtml","material","sceneGraphHtml","node","addDashes","depth","number","dashes","categoryElements","renderDisableMultiSelect","currentElementDesignation","designation","categoryContainsCurrentElement","otherSelectedElements","filter","element","isAvailable","textAlign","marginLeft","showChecked","includes","checked","newHiddenCategoryConfigurations","parse","hiddenConfigElement","categoryElement","flex","newCategoryElements","newDesignations","newConfiguration","a","newDisablesAnimation","placeholder","renderAttributeName","surfaceName","newSurfaceAttributeNames","segment","newMaterialSegmentMap","animationOptions","animation","alignItems","flexDirection","renderPanel","ColorPanel","TogglePanel","AnimationPanel","ElementCategoryPanel","overflow","list","setList","title","control","fill","preserveAspectRatio","height","width","viewBox","verticalAlign","d","renderOptions","borderBottom","values","reduce","accum","curr","nodesButtonStyles","backgroundColor","optionsButtonStyles","OptionPanel","NodePanel","App","Header","Viewer","ControlMenu","ExportModal","OptionChoiceModal","configureStore","reducer","viewerReducer","middleware","getDefaultMiddleware","concat","logger","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","module","exports","materialID","uniqueStrings","categoryOptions","nodeNameArray","split","string","mainDesignation","capitalLetter","detailedTitle","indexOf","sort","b","charCodeAt","geometryName","materialOptions","replace","primaryValue","j","currentAttributeOptions"],"mappings":"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","file":"static/js/main.628730f4.chunk.js","sourcesContent":["// When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    var modal = document.getElementById(\"modal\");\r\n    if (event.target == modal) {\r\n      modal.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { buildSceneGraph, buildCategoryOptions } from './utils'\r\n\r\nconst initialState = {\r\n  modelId: '',\r\n  materials: [],\r\n  animations: [],\r\n  sceneGraph: [],\r\n  controls: [],\r\n  disableButtons: true,\r\n  latestControlId: 0,\r\n  sketchfabAPI: null,\r\n  sceneGraphIsVisible: {},\r\n  viewMode: \"options\",\r\n  surfaceOptionMap: {},\r\n  surfaceConfigurationMode: false,\r\n  materialNameSegmentMap: {},\r\n  surfaceAttributeNameMap: {},\r\n  groupingOptions: [],\r\n  hiddenCategoryConfigurations: {},\r\n};\r\n\r\nexport const viewerSlice = createSlice({\r\n  name: 'viewer',\r\n  initialState,\r\n  reducers: {\r\n    resetState: state => {\r\n      state = initialState;\r\n    },\r\n    setSketchfabAPI: (state, action) => {\r\n      state.sketchfabAPI = action.payload;\r\n    },\r\n    setModelId: (state, action) => {\r\n      state.modelId = action.payload;\r\n    },\r\n    setMaterials: (state, action) => {\r\n      state.materials = action.payload;\r\n    },\r\n    setAnimations: (state, action) => {\r\n      state.animations = action.payload;\r\n    },\r\n    setSceneGraph: (state, action) => {\r\n      buildSceneGraph(state, action.payload.children, 0);\r\n      buildCategoryOptions(state)\r\n    },\r\n    setSceneGraphIsVisible: (state, action) => {\r\n      const { id, value } = action.payload;\r\n      state.sceneGraphIsVisible[id] = value;\r\n    },\r\n    createControl: (state, action) => {\r\n      state.latestControlId = state.latestControlId += 1;\r\n      let id = state.latestControlId;\r\n      let defaultConfiguration = {}\r\n      if(action.payload === \"animation\") {\r\n        defaultConfiguration = {\r\n          animationUID: \"none\",\r\n          startTime: \"0\",\r\n          endTime: \"0\",\r\n        }\r\n      }\r\n\r\n      if(action.payload === \"category\") {\r\n        defaultConfiguration = {\r\n          designations: {},\r\n          allowsAnimation: [],  \r\n        }\r\n      }\r\n      state.controls.unshift({\r\n        type: action.payload,\r\n        id: id,\r\n        name: action.payload,\r\n        entityIndex: \"none\",\r\n        entity: {instanceID: 0},\r\n        configuration: defaultConfiguration,\r\n        isExpanded: true,\r\n      });\r\n    },\r\n    setViewMode: (state, action) => {\r\n      state.viewMode = action.payload\r\n    },\r\n    setControls: (state, action) => {\r\n      state.controls = action.payload;\r\n    },\r\n    toggleDisableButtons: (state) => {\r\n      state.disableButtons = false;\r\n    },\r\n    updateControl: (state, action) => {\r\n      const { id, key, value } = action.payload;\r\n      console.log(action.payload)\r\n      for (let i=0; i<state.controls.length; ++i) {\r\n        if (state.controls[i].id == id) {\r\n          state.controls[i][key] = value;\r\n        }\r\n      }\r\n    },\r\n    setSurfaceOptionMap: (state, action) => {\r\n      console.log(\"setSurfaceOptionMap -> action.payload\")\r\n      console.log(action.payload)\r\n      state.surfaceOptionMap = action.payload;\r\n    },\r\n    setSurfaceConfigurationMode: (state, action) => {\r\n      state.surfaceConfigurationMode = action.payload;\r\n    },\r\n    setMaterialNameSegmentMap: (state, action) => {\r\n      console.log(\"setMaterialNameSegmentMap -> action.payload:\")\r\n      console.log(action.payload)\r\n      state.materialNameSegmentMap = action.payload;\r\n    },\r\n    setSurfaceAttributeNameMap: (state, action) => {\r\n      state.surfaceAttributeNameMap = action.payload;\r\n    },\r\n    setGroupingOptions: (state, action) => {\r\n      state.groupingOptions = action.payload;\r\n    },\r\n    setHiddenCategoryConfigurations: (state, action) => {\r\n      state.hiddenCategoryConfigurations = action.payload;\r\n    },\r\n    setAllNodesVisible: (state, action) => {\r\n      for(let i=0; i<Object.keys(state.sceneGraphIsVisible).length; ++i) {\r\n        if(action.payload) {\r\n          state.sketchfabAPI.show(Object.keys(state.sceneGraphIsVisible)[i])\r\n        } else {\r\n          state.sketchfabAPI.hide(Object.keys(state.sceneGraphIsVisible)[i])\r\n        }\r\n        state.sceneGraphIsVisible[Object.keys(state.sceneGraphIsVisible)[i]] = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  resetState,\r\n  setModelId, \r\n  createControl, \r\n  toggleDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n  setSceneGraph,\r\n  setSceneGraphIsVisible,\r\n  setViewMode,\r\n  setGroupingOptions,\r\n  setHiddenCategoryConfigurations,\r\n  setSurfaceOptionMap,\r\n  setSurfaceConfigurationMode,\r\n  setMaterialNameSegmentMap,\r\n  setSurfaceAttributeNameMap,\r\n  setAllNodesVisible,\r\n  setAnimations,\r\n  setMaterials,\r\n  setSketchfabAPI,\r\n} = viewerSlice.actions;\r\n\r\nexport const selectModelId = state => state.modelId;\r\n\r\nexport const selectMaterials = state => state.materials;\r\n\r\nexport const selectAnimations = state => state.animations;\r\n\r\nexport const selectControls = state => state.controls;\r\n\r\nexport const selectDisableButtons = state => state.disableButtons;\r\n\r\nexport const selectSceneGraph = state => state.sceneGraph;\r\n\r\nexport const selectSketchfabAPI = state => state.sketchfabAPI;\r\n\r\nexport const selectSceneGraphIsVisible = state => state.sceneGraphIsVisible;\r\n\r\nexport const selectViewMode = state => state.viewMode;\r\n\r\nexport const selectSurfaceOptionMap = state => state.surfaceOptionMap;\r\n\r\nexport const selectSurfaceConfigurationMode = state => state.surfaceConfigurationMode;\r\n\r\nexport const selectMaterialNameSegmentMap = state => state.materialNameSegmentMap;\r\n\r\nexport const selectSurfaceAttributeNameMap = state => state.surfaceAttributeNameMap;\r\n\r\nexport const selectGroupingOptions = state => state.groupingOptions;\r\n\r\nexport const selectHiddenCategoryConfigurations = state => state.hiddenCategoryConfigurations;\r\n\r\nexport const toggleModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport const toggleOptionChoiceModalDisplay = () => dispatch => {\r\n  const modal = document.getElementById('control-choice-modal');\r\n\r\n  const currentStyle = modal.style.display;\r\n  if (currentStyle === 'block') {\r\n    modal.style.display = 'none';\r\n  } else {\r\n    modal.style.display = 'block';\r\n  }  \r\n}\r\n\r\nexport default viewerSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectModelId, \r\n  setModelId, \r\n  toggleModalDisplay,\r\n  selectDisableButtons,\r\n} from './viewerSlice';\r\nimport initializeViewer from './initializeViewer';\r\n\r\nexport default () => {\r\n  const modelId = useSelector(selectModelId);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n  \r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Configurator Studio - v1.0.5</h1>\r\n      <div className=\"header__buttons\">\r\n        <input id=\"model-id-input\"\r\n          value={modelId}\r\n          onChange={e => dispatch(setModelId(e.target.value))}\r\n        />\r\n        <button \r\n          id=\"displayButton\"    \r\n          className=\"header__button\"      \r\n          onClick={() => dispatch(initializeViewer(modelId))}\r\n        >Load Model\r\n        </button>        \r\n        <button \r\n          id=\"export-javascript\"\r\n          className=\"header__button\"\r\n          disabled={disableButtons}\r\n          onClick={() => dispatch(toggleModalDisplay())}>Export</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import Sketchfab from '@sketchfab/viewer-api';\r\nimport { buildSurfaceOptions } from './utils'\r\nimport {\r\n    setSketchfabAPI,\r\n    setAnimations,\r\n    setControls,\r\n    toggleDisableButtons,\r\n    setSceneGraph,\r\n    setMaterials,\r\n    setMaterialNameSegmentMap,\r\n    setSurfaceOptionMap,\r\n    setSurfaceAttributeNameMap,\r\n} from './viewerSlice';\r\n\r\nexport default modelId => dispatch => {\r\n\r\n    dispatch(setControls([]));\r\n  \r\n    var iframe = document.getElementById('api-frame');\r\n    var version = '1.8.2';\r\n    var DEFAULT_URLID = '66e17931c39e4042ac5aa8764bee7f5a';\r\n    var DEFAULT_PREFIX = 'seat ';\t\t\r\n    \r\n    var CONFIG = {\r\n        urlid: modelId !== '' ? modelId : DEFAULT_URLID,\r\n        prefix: DEFAULT_PREFIX\r\n    };\r\n    var isSeeking;\r\n    var animationsList = [];\r\n    var current_anim;\r\n    var apiSkfb;\r\n    var pollTime, duration;\r\n    var timeSlider;\r\n  \r\n    pollTime = function() {\r\n          apiSkfb.getCurrentTime(function(err, time) {\r\n                if (!isSeeking) {\r\n                    var percentage = (100 * time) / duration;\r\n                    timeSlider.value = percentage;\r\n                                        \r\n                    var timeDisplay = document.getElementById('timeDisplay');\r\n                    timeDisplay.innerHTML = time.toFixed(2);\r\n                    if (time == 2) {\r\n                      apiSkfb.seekTo(1);\r\n                    }\r\n                requestAnimationFrame(pollTime);\r\n              }\r\n          });\r\n    };\r\n  \r\n    var Configurator = {\r\n        api: null,\r\n        config: null,\r\n        options: [],\r\n  \r\n        init: function (config, iframe) {\r\n            this.config = config;\r\n            var client = new Sketchfab(version, iframe);\r\n            client.init(config.urlid, {\r\n                ui_controls: 0,\r\n                graph_optimizer: 0,\r\n                ui_animations: 0,\r\n                ui_watermark: 0,\r\n                ui_inspector: 0,\r\n                ui_stop: 0,\r\n                ui_infos: 0,\r\n  \r\n                success: function onSuccess(api) {\r\n                    var controls = document.getElementById('animationControls');\r\n                    var buttonsText = `\r\n                        <div style=\"display: flex; justify-content: center;\">\r\n                          <p id=\"timeDisplay\"></p>\r\n                          <p id=\"animationName\" style=\"margin-left: 50px;\"></p>\r\n                        </div>\r\n                        <button id=\"play\">Play</button>\r\n                        <button id=\"pause\">Pause</button>\r\n                        <button id=\"previous\">Previous</button>\r\n                        <button id=\"next\">Next</button>\r\n                        <input \r\n                          id=\"timeSlider\" \r\n                          class=\"slider timeSlider\" \r\n                          style=\"width:100%\" \r\n                          type=\"range\" \r\n                          min=\"0\" \r\n                          max=\"100\" \r\n                          step=\"0.1\" \r\n                          value=\"0\"\r\n                        />\r\n                    `;\r\n                \r\n                    controls.innerHTML = buttonsText;\r\n  \r\n                    apiSkfb = api;\r\n                    dispatch(setSketchfabAPI(api));\r\n                    api.start();\r\n                    api.addEventListener('viewerready', function () {\r\n                        this.api = api;\r\n                        api.pause();\r\n  \r\n                        api.getAnimations(function(err, animations) {\r\n                            animationsList = animations;\r\n  \r\n                            dispatch(setAnimations(animations));\r\n  \r\n                            if (animations.length == 0) {                            \r\n                                var controls = document.getElementById('animationControls');\r\n                                controls.innerHTML = \"\";\r\n                            } else {  \r\n                                document.getElementById('pause').addEventListener('click', function() {\r\n                                    api.pause();\r\n                                });\r\n      \r\n                                document.getElementById('play').addEventListener('click', function() {\r\n                                    api.play();\r\n                                });\r\n      \r\n                                document.getElementById('previous').addEventListener('click', function() {\r\n                                    if (current_anim === 0) current_anim = animationsList.length;\r\n                                    current_anim--;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n                    \r\n                                document.getElementById('next').addEventListener('click', function() {\r\n                                    current_anim++;\r\n                                    if (current_anim === animationsList.length) current_anim = 0;\r\n                    \r\n                                    api.setCurrentAnimationByUID(animationsList[current_anim][0]);\r\n                                    api.seekTo(0);\r\n                                    duration = animationsList[current_anim][2];\r\n                                    var animationName = document.getElementById('animationName');\r\n                                    animationName.innerHTML = animationsList[current_anim][1];\r\n                                });\r\n  \r\n                                var animationName = document.getElementById('animationName');\r\n                                animationName.innerHTML = animationsList[0][1];\r\n                                current_anim = 0;\r\n                                api.setCurrentAnimationByUID(animations[current_anim][0]);\r\n                                duration = animations[current_anim][2];\r\n                                isSeeking = false;\r\n                                timeSlider = document.getElementById('timeSlider');\r\n            \r\n                                timeSlider.addEventListener('change', function() {\r\n                                    isSeeking = false;\r\n  \r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                });\r\n            \r\n                                timeSlider.addEventListener('input', function() {\r\n                                    isSeeking = true;\r\n                                    var time = (duration * timeSlider.value) / 100;\r\n                                    var timeDisplay = document.getElementById('timeDisplay');\r\n                                    timeDisplay.innerHTML = time.toFixed(2);\r\n                                    api.pause();\r\n                                    api.seekTo(time);\r\n                                });\r\n                                \r\n                                pollTime();\r\n                            }\r\n                        });\r\n  \r\n                        \r\n                        dispatch(toggleDisableButtons());\r\n                        \r\n                        api.getSceneGraph(function(err, result) {\r\n                            if (err) {\r\n                                console.log('Error getting nodes');\r\n                                return;\r\n                            }                  \r\n                            dispatch(setSceneGraph(result))        \r\n                        });\r\n  \r\n                        api.getMaterialList(function(err, materials) {\r\n                            dispatch(setMaterials(materials));\r\n                            \r\n                            let surfaceOptions = buildSurfaceOptions(materials)\r\n                            \r\n                            dispatch(setMaterialNameSegmentMap(surfaceOptions.materialNameSegmentMap))\r\n                            dispatch(setSurfaceOptionMap(surfaceOptions.surfaceOptionMap))\r\n                            dispatch(setSurfaceAttributeNameMap(surfaceOptions.surfaceAttributeNameMap))\r\n                        });\r\n                    }.bind(this));\r\n                }.bind(this),\r\n                error: function onError() {\r\n                    console.log('Viewer error');\r\n                }\r\n            });\r\n        }\r\n    }\r\n  \r\n    Configurator.init(CONFIG, iframe);\r\n  };\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n\r\n    return (        \r\n        <div class=\"viewer\">\r\n            <iframe \r\n                src=\"\" \r\n                id=\"api-frame\" \r\n                allowfullscreen mozallowfullscreen=\"true\" \r\n                webkitallowfullscreen=\"true\"\r\n            ></iframe>\r\n            <div id=\"animationControls\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n\ttoggleModalDisplay, \r\n\tselectControls, \r\n\tselectModelId,\r\n\tselectSceneGraph, \r\n\tselectMaterials,\r\n\tselectSurfaceOptionMap,\r\n\tselectSurfaceConfigurationMode,\r\n\tselectMaterialNameSegmentMap,\r\n\tselectSurfaceAttributeNameMap,\r\n\tselectGroupingOptions,\r\n\tselectHiddenCategoryConfigurations,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch();\r\n\tconst controls = useSelector(selectControls);\r\n\tconst modelId = useSelector(selectModelId);\r\n\tconst sceneGraph = useSelector(selectSceneGraph);\r\n\tconst materials = useSelector(selectMaterials);\r\n\tconst surfaceOptionMap = useSelector(selectSurfaceOptionMap);\r\n\tconst surfaceConfigurationMode = useSelector(selectSurfaceConfigurationMode)\r\n\tconst materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap)\r\n\tconst surfaceAttributeNameMap = useSelector(selectSurfaceAttributeNameMap)\r\n\tconst groupingOptions = useSelector(selectGroupingOptions);\r\n\tconst hiddenCategoryConfigurations = useSelector(selectHiddenCategoryConfigurations);\r\n\r\n\tconst configurationMaps = {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tmaterials,\r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\tsurfaceAttributeNameMap,\r\n\t\tgroupingOptions,\t\t\r\n\t\thiddenCategoryConfigurations,\r\n\t}\r\n\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal__content\">\r\n                <span class=\"close\"\r\n                    onClick={() => dispatch(toggleModalDisplay())}>&times;</span>\r\n                <div className=\"modal__header\">\r\n                    <h1>Add This To Your Page</h1>\r\n                </div>\r\n                <textarea id=\"js-output\" value={createJSExport(configurationMaps)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst createJSExport = (configurationMaps) => {\r\n\tconst {\r\n\t\tcontrols, \r\n\t\tmodelId, \r\n\t\tsceneGraph, \r\n\t\tmaterials,\r\n\t\tsurfaceOptionMap, \r\n\t\tsurfaceConfigurationMode,\r\n\t\tmaterialNameSegmentMap,\r\n\t\tsurfaceAttributeNameMap,\r\n\t\tgroupingOptions,\t\r\n\t\thiddenCategoryConfigurations,\r\n\t} = configurationMaps;\r\n\r\n\treturn (\r\n`\r\n// Sketchfab Viewer API: Change Texture/material\r\nvar version = '1.8.2';\r\nvar uid = '${modelId === '' ? '66e17931c39e4042ac5aa8764bee7f5a' : modelId}';\r\nvar iframe = document.getElementById('api-frame');\r\nvar client = new window.Sketchfab(version, iframe);\r\n\r\nvar myMaterials = ${JSON.stringify(materials)}\r\n\r\nvar error = function() {\r\n\tconsole.error('Sketchfab API error');\r\n};\r\n\r\nvar controls = ${JSON.stringify(controls)}\r\n\r\nvar sceneGraph = ${JSON.stringify(sceneGraph)}\r\n\r\nvar groupingOptions = ${JSON.stringify(groupingOptions)}\r\nvar hiddenCategoryConfigurations = ${JSON.stringify(hiddenCategoryConfigurations)}\r\n\r\nvar surfaceConfigurationMode = ${surfaceConfigurationMode};\r\nvar surfaceOptionMap = ${JSON.stringify(surfaceOptionMap)};\r\nvar materialNameSegmentMap = ${JSON.stringify(materialNameSegmentMap)};\r\nvar surfaceAttributeNameMap = ${JSON.stringify(surfaceAttributeNameMap)};\r\n\r\nvar animationObjects = {};\r\n\r\nvar controlsContainer = document.getElementById('sketchfab-lower-controls');\r\nvar toggleableItems = {};\r\nvar toggleableGroups = {};\r\n\r\nvar currentAnimation = \"\";\r\nvar currentAnimationEndTime = 0;\r\nvar isElementCategoryControlled = false;\r\nvar firstGroupingControlIndex = -1;\r\nvar appContainer = document.querySelector(\"div.sketchfab__container\")\r\n\r\nvar appWidth = Number(appContainer.style.width.replace(\"px\",\"\"))\r\nappContainer.style.display = \"block\"\r\n\r\nvar apiSkfb, pollTime;\r\n\r\nvar buildNodeNameArray = function(children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n\t\tif(children[i].name == undefined) {\r\n\t\t\tnameArrays.push({name: children[i].type, depth: depth, instanceID: children[i].instanceID});\r\n\t\t} else {\r\n\t\t\tnameArrays.push({name: children[i].name, depth: depth, instanceID: children[i].instanceID});\r\n\t\t}\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildNodeNameArray(children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\npollTime = function() {\r\n\tapiSkfb.getCurrentTime(function(err, time) {\r\n\t\t\r\n\t\tif (currentAnimationEndTime > 0 && time >= currentAnimationEndTime) {\r\n\t\t\tapiSkfb.pause();\r\n\t\t}\r\n\t\trequestAnimationFrame(pollTime);\r\n\t});\r\n};\r\n\r\nvar success = function(api) {\r\n    apiSkfb = api;\r\n\tapi.start(function() {\r\n\t\tapi.addEventListener('viewerready', function() {\r\n\t\t\tcategorySelectObserver = new MutationObserver(function(mutationsList, categorySelectObserver) {\r\n\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tapi.pause();\r\n\t\t\t\r\n\t\t\tvar animations = [];\r\n\t\t\tfor (let i = 0; i < controls.length; ++i) {\t\r\n\t\t\t\tif (controls[i].type == \"animation\") {\r\n\t\t\t\t\tvar animationControls = document.getElementById(\"sketchfab-animation-controls\")\r\n\t\t\t\t\tanimationControls.style.display = \"block\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar animationButtonContainer = document.getElementById(\"sketchfab-animation-buttons\")\r\n\t\t\t\t\tvar animationButton = document.createElement(\"button\")\r\n\t\t\t\t\tanimationButton.id = \"animation-\" + controls[i].id\r\n\t\t\t\t\tanimationButton.textContent = controls[i].name;\r\n\t\t\t\t\tanimationButton.addEventListener('click', function(e) {\r\n\t\t\t\t\t\tvar animationId = e.target.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar startTime = animationObjects[animationId].startTime;\r\n\t\t\t\t\t\tvar endTime = animationObjects[animationId].endTime;\r\n\t\t\t\t\t\tvar animationUID = animationObjects[animationId].uid;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcurrentAnimationEndTime = endTime;\r\n\t\t\t\t\t\tapi.setCurrentAnimationByUID(animationUID);\r\n\t\t\t\t\t\tapi.seekTo(startTime);\r\n\t\t\t\t\t\tapi.play();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tanimationButtonContainer.appendChild(animationButton)\r\n\t\t\t\t\t\r\n\t\t\t\t\tanimations.push(controls[i]);\r\n\t\t\t\t\tanimationObjects[controls[i].id] = {name: controls[i].name, startTime: Number(controls[i].configuration.startTime), endTime: Number(controls[i].configuration.endTime), uid: controls[i].configuration.animationUID}; \r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (controls[i].type == \"surfaceConfiguration\") {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\");\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\tif (controls[i].type == \"color\") {\r\n\t\t\t\t\tvar resetBut = document.createElement(\"button\");\r\n\t\t\t\t\tresetBut.innerHTML = \"Reset\";\r\n\t\t\t\t\tresetBut.onclick = function(e) {\t\r\n\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\tm = JSON.parse(JSON.stringify(controls[i].entity));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(resetBut);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let j = 0; j < controls[i].additionalColors.length; ++j) {\r\n\t\t\t\t\t\tvar colorBut = document.createElement(\"button\");\r\n\r\n\t\t\t\t\t\tcolorBut.innerHTML = controls[i].additionalColors[j].name;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcolorBut.id = controls[i].id + \"-\" + controls[i].name\r\n\t\t\t\t\t\tcolorBut.onclick = function(e) {\t\r\n\t\t\t\t\t\t\tvar m = myMaterials[controls[i].entityIndex];\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.enable = true;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.AlbedoPBR.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.factor = 1;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.enable = true;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffuseColor.texture = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.color = controls[i].additionalColors[j].colorRGB;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.enable = false;\r\n\t\t\t\t\t\t\tm.channels.DiffusePBR.factor = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tapi.setMaterial(m);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsingleControlContainer.appendChild(colorBut);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else if (controls[i].type == \"toggle\") {\r\n\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\tvar toggleBut = document.createElement(\"button\");\r\n\t\t\t\t\ttoggleBut.innerHTML = \"Toggle \" + controls[i].name;\r\n\t\t\t\t\ttoggleBut.id = controls[i].entity.instanceID;\r\n\t\t\t\t\ttoggleBut.onclick = function(e) {\r\n\t\t\t\t\t\tvar isVisible = toggleableItems[e.target.id];\r\n\t\t\t\t\t\tif (isVisible == \"visible\") {\r\n\t\t\t\t\t\t\tapi.hide(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"hidden\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tapi.show(e.target.id);\r\n\t\t\t\t\t\t\ttoggleableItems[String(controls[i].entity.instanceID)] = \"visible\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsingleControlContainer.appendChild(toggleBut);\r\n\t\t\t\t} else if (controls[i].type === \"category\") {\t\r\n\t\t\t\t\tisElementCategoryControlled = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar wrapper = generateSelect(i);\r\n\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var j=0; j<Object.keys(controls[i].configuration.designations).length; ++j) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\tif (j===0) {\r\n\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar name = Object.keys(controls[i].configuration.designations)[j];\r\n\t\t\t\t\t\tvar humanReadable = Object.values(controls[i].configuration.designations)[j]\r\n\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\tcustomOption.id = name + \"-\" + j + \"-\" + i;\r\n\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\tcustomOption.addEventListener('click', function(e) {\r\n\t\t\t\t\t\t\thandleUpdateSelect(e);\r\n\t\t\t\t\t\t\tvar optionName = e.target.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\thandleHidingOptions(optionName);\r\n\t\t\t\t\t\t\tvar allCategoryOptions = document.querySelectorAll(\".sketchfab-category .sketchfab-option\")\r\n\t\t\t\t\t\t\tfor (var k=0; k<allCategoryOptions.length; ++k) {\r\n\t\t\t\t\t\t\t\tallCategoryOptions[k].style.visibility = \"visible\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar currentCategorySelections = Array.from(document.querySelectorAll(\".sketchfab-category .sketchfab-select\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(select => !select.classList.contains(\"sketchfab-select-open\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(select => select.querySelector(\".sketchfab-select-value\").textContent)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcurrentCategorySelections.push(optionName)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<currentCategorySelections.length; ++k) {\r\n\t\t\t\t\t\t\t\tvar selectionName = currentCategorySelections[k];\r\n\t\t\t\t\t\t\t\tif (hiddenCategoryConfigurations[selectionName] !== undefined) {\r\n\t\t\t\t\t\t\t\t\tfor (var l=0; l<hiddenCategoryConfigurations[selectionName].length; ++l) {\r\n\t\t\t\t\t\t\t\t\t\tvar nameToHide = hiddenCategoryConfigurations[selectionName][l]\r\n\t\t\t\t\t\t\t\t\t\tvar optionToHide = document.querySelector(\"[data-value='\" + nameToHide + \"']\")\r\n\t\t\t\t\t\t\t\t\t\toptionToHide.style.visibility = \"hidden\"\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tdisableAnimations();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//show/hide to OG specification\r\n\t\t\tif (isElementCategoryControlled) {\r\n\t\t\t\twindow.addEventListener('click', function(e) {\r\n\t\t\t\t\tfor (const select of document.querySelectorAll('.sketchfab-select')) {\r\n\t\t\t\t\t\tif (!select.contains(e.target)) {\r\n\t\t\t\t\t\t\tselect.classList.remove('sketchfab-select-open');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tsetVisibleNodes(api);\r\n\t\t\t\thandleHidingOptions();\r\n\t\t\t\tdisableAnimations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (animations.length > 0) {\r\n\t\t\t\tpollTime();\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (surfaceConfigurationMode) {\r\n\t\t\t\t\r\n\t\t\t\tfor (var i=0; i<Object.keys(surfaceOptionMap).length; ++i) {\r\n\t\t\t\t\tvar surfaceName = Object.keys(surfaceOptionMap)[i]\r\n\t\t\t\t\tvar primaryInitialValue = Object.keys(surfaceOptionMap[surfaceName])[0]\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (j=0; j<surfaceAttributeNameMap[surfaceName].length; ++j) {\r\n\t\t\t\t\t\tif(j === 0) {\r\n\t\t\t\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar wrapper = generateSurfaceSelect(surfaceName, i, j)\r\n\t\t\t\t\t\t\tvar customOptions = wrapper.querySelector(\".sketchfab-options\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<Object.keys(surfaceOptionMap[surfaceName]).length; ++k) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\tif (k===0) {\r\n\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar name = Object.keys(surfaceOptionMap[surfaceName])[k]\r\n\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + surfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', function(e) {\r\n\t\t\t\t\t\t\t\t\thandleUpdateSelect(e)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar nameCode = this.id.split(\"-\")[0]\r\n\t\t\t\t\t\t\t\t\tvar currentSurfaceName = this.id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\tvar surfaceElementIndex = this.id.split(\"-\")[2]\r\n\t\t\t\t\t\t\t\t\tvar subPrimaryOptionArrays = document.getElementsByClassName(currentSurfaceName + \"-options\")\r\n\t\t\t\t\t\t\t\t\tvar primaryAttributeName = surfaceAttributeNameMap[currentSurfaceName][0]\r\n\t\t\t\t\t\t\t\t\tfor(var l=0; l<subPrimaryOptionArrays.length; ++l) {\r\n\t\t\t\t\t\t\t\t\t\tvar subPrimaryOptionElementName = subPrimaryOptionArrays[l].id.split(\"-\")[1]\r\n\t\t\t\t\t\t\t\t\t\tsubPrimaryOptionArrays[l].innerHTML = \"\";\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tvar selectTitle = document.createElement(\"h3\")\r\n\t\t\t\t\t\t\t\t\t\tselectTitle.classList.add(\"sketchfab-title\")\r\n\t\t\t\t\t\t\t\t\t\tselectTitle.textContent = currentSurfaceName + \" - \" + surfaceAttributeNameMap[currentSurfaceName][surfaceElementIndex];\r\n\t\t\t\t\t\t\t\t\t\tsubPrimaryOptionArrays[l].appendChild(selectTitle)\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tvar triggerSpan = document.getElementById(\"triggerSpan\" + \"-\" + currentSurfaceName + \"-\" + surfaceAttributeNameMap[currentSurfaceName][l+1] + \"-\" + (l+1))\r\n\t\t\t\t\t\t\t\t\t\ttriggerSpan.textContent = surfaceOptionMap[currentSurfaceName][nameCode][l][0]\r\n\t\t\t\t\t\t\t\t\t\tfor (var m=0; m<surfaceOptionMap[currentSurfaceName][nameCode][l].length; ++m) {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\t\t\t\tif (m===0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvar name = surfaceOptionMap[currentSurfaceName][nameCode][l][m]\r\n\t\t\t\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + currentSurfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', e => setNonPrimarySurfaceConfiguration(e, api))\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tsubPrimaryOptionArrays[l].appendChild(customOption)\r\n\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconfigureMaterials(currentSurfaceName, primaryAttributeName, api)\r\n\t\t\t\t\t\t\t\t})\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar singleControlContainer = document.createElement(\"div\");\r\n\t\t\t\t\t\t\tsingleControlContainer.classList.add(\"sketchfab-single-control-container\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar wrapper = document.createElement(\"div\")\r\n\t\t\t\t\t\t\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\t\t\t\t\t\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar select = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselect.classList.add(\"sketchfab-select\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar selectTrigger = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar triggerSpan = document.createElement(\"span\")\r\n\t\t\t\t\t\t\ttriggerSpan.textContent = surfaceOptionMap[surfaceName][primaryInitialValue][j-1][0]\r\n\t\t\t\t\t\t\ttriggerSpan.id = \"triggerSpan-\" + surfaceName + \"-\" + surfaceAttributeNameMap[surfaceName][j] + \"-\" + j;\r\n\t\t\t\t\t\t\ttriggerSpan.classList.add(surfaceName + \"-triggerSpan\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(triggerSpan)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar arrow = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\t\t\t\t\t\t\tselectTrigger.appendChild(arrow)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar customOptions = document.createElement(\"div\")\r\n\t\t\t\t\t\t\tcustomOptions.id = surfaceName + \"-\" + surfaceAttributeNameMap[surfaceName][j] + \"-options\";\r\n\t\t\t\t\t\t\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\t\t\t\t\t\t\tcustomOptions.classList.add(surfaceName + \"-options\")\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar selectTitle = document.createElement(\"h3\")\r\n\t\t\t\t\t\t\tselectTitle.classList.add(\"sketchfab-title\")\r\n\t\t\t\t\t\t\tselectTitle.textContent = surfaceName + \" - \" + surfaceAttributeNameMap[surfaceName][j];\r\n\t\t\t\t\t\t\tcustomOptions.appendChild(selectTitle)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tselect.appendChild(selectTrigger)\r\n\t\t\t\t\t\t\tselect.appendChild(customOptions)\r\n\t\t\t\t\t\t\twrapper.appendChild(select)\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor (var k=0; k<surfaceOptionMap[surfaceName][primaryInitialValue][j-1].length; ++k) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet customOption = document.createElement(\"span\")\r\n\t\t\t\t\t\t\t\tcustomOption.classList.add(\"sketchfab-option\");\r\n\t\t\t\t\t\t\t\tif (k===0) {\r\n\t\t\t\t\t\t\t\t\tcustomOption.classList.add(\"selected\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar name = surfaceOptionMap[surfaceName][primaryInitialValue][j-1][k]\r\n\t\t\t\t\t\t\t\tvar humanReadable = materialNameSegmentMap[name];\r\n\t\t\t\t\t\t\t\tcustomOption.setAttribute(\"data-value\", name)\r\n\t\t\t\t\t\t\t\tcustomOption.id = name + \"-\" + surfaceName + \"-\" + j + \"-\" + k + \"-\" + i;\r\n\t\t\t\t\t\t\t\tcustomOption.innerHTML = name + \" - \" + humanReadable;\r\n\t\t\t\t\t\t\t\tcustomOption.addEventListener('click', e => setNonPrimarySurfaceConfiguration(e, api))\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcustomOptions.appendChild(customOption)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\twrapper.addEventListener('click', function() {\r\n\t\t\t\t\t\t\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsingleControlContainer.appendChild(wrapper);\t\t\r\n\t\t\t\t\t\t\tcontrolsContainer.appendChild(singleControlContainer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\nclient.init(uid, {\r\n\tsuccess: success,\r\n\terror: error,\r\n\tautostart: 0,\r\n\tpreload: 0,\r\n\tui_animations: 0,\r\n\tui_watermark: 0,\r\n\tui_inspector: 0,\r\n\tui_stop: 0,\r\n\tui_infos: 0,\r\n});\r\n\r\nvar configureMaterials = function(currentSurfaceName, currentElementName, api) {\r\n\t\t\t\t\t\t\t\r\n\t//get array of selected values\r\n\tvar relevantSelects = document.getElementsByClassName(currentSurfaceName + \"-triggerSpan\")\r\n\t\r\n\t//build name string via accessing selected values\r\n\tvar materialNameString = currentSurfaceName;\r\n\t\r\n\tfor (var k=0; k<relevantSelects.length; ++k) {\r\n\t\tmaterialNameString += \"-\" + relevantSelects[k].textContent;\r\n\t}\r\n\t\r\n\tvar newMaterial;\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name.startsWith(materialNameString)) {\r\n\t\t\tnewMaterial = JSON.parse(JSON.stringify(myMaterials[k]));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\tif (myMaterials[k].name === currentSurfaceName) {\r\n\t\t\tmyMaterials[k].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\tmyMaterials[k].reflection = newMaterial.reflection;\r\n\t\t\tmyMaterials[k].reflector = newMaterial.reflector;\r\n\t\t\tmyMaterials[k].shadeless = newMaterial.shadeless;\r\n\t\t\tapi.setMaterial(myMaterials[k], function() {console.log(\"material updated\")})\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar configureInitialSurfaces = function(api) {\r\n\t\r\n\tvar surfaceNames = Object.keys(surfaceOptionMap)\t\t\t\t\r\n\t\r\n\tfor (var i=0; i<surfaceNames.length; ++i) {\r\n\t\tvar currentSurfaceName = surfaceNames[i];\r\n\r\n\t\tvar firstPrimaryOption = Object.keys(surfaceOptionMap[currentSurfaceName])[0]\r\n\t\tvar optionsArray = surfaceOptionMap[currentSurfaceName][firstPrimaryOption]\r\n\t\tvar materialNameString = currentSurfaceName + \"-\" + firstPrimaryOption;\r\n\t\t\r\n\t\t\r\n\t\tfor (var k=0; k<optionsArray.length; ++k) {\r\n\t\t\tmaterialNameString += \"-\" + optionsArray[k][0];\r\n\t\t}\r\n\t\t\r\n\t\tvar newMaterial;\r\n\t\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\t\tif (myMaterials[k].name.startsWith(materialNameString)) {\r\n\t\t\t\tnewMaterial = JSON.parse(JSON.stringify(myMaterials[k]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var k=0; k<myMaterials.length; ++k) {\r\n\t\t\tif (myMaterials[k].name === currentSurfaceName) {\r\n\t\t\t\tmyMaterials[k].channels = JSON.parse(JSON.stringify(newMaterial.channels));\r\n\t\t\t\tmyMaterials[k].reflection = newMaterial.reflection;\r\n\t\t\t\tmyMaterials[k].reflector = newMaterial.reflector;\r\n\t\t\t\tmyMaterials[k].shadeless = newMaterial.shadeless;\r\n\t\t\t\tapi.setMaterial(myMaterials[k], function() {console.log(\"material updated\")})\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\t\t\r\n}\r\n\r\nvar setVisibleNodes = function(api) {\r\n\t\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-category span.sketchfab-select-value\")\r\n\tvar selectedPrefixes = [];\r\n\t\r\n\tfor (var j=0; j<allCategorySelects.length; ++j) {\r\n\t\tselectedPrefixes.push(allCategorySelects[j].textContent);\r\n\t}\r\n\t\r\n\tvar allLetters = [];\r\n\tvar relevantNodes = [];\r\n\t\r\n\tfor (var j=0; j<sceneGraph.length; ++j) {\r\n\t\tvar indexContainingCodes = j;\r\n\t\tvar isMatrixTransform = false;\r\n\t\tif (sceneGraph[j].name === \"MatrixTransform\") {\r\n\t\t\tindexContainingCodes = j - 1;\r\n\t\t\tisMatrixTransform = true;\r\n\t\t}\r\n\t\t\r\n\t\tvar nodeNameArray = sceneGraph[indexContainingCodes].name.split(\"-\")\r\n\t\tvar currentNodeDesignation = nodeNameArray[0];\r\n\t\tvar currentNodeLetterCode = nodeNameArray[1];\r\n\t\tapi.hide(sceneGraph[indexContainingCodes].instanceID);\r\n\t\tif(selectedPrefixes.includes(\"SGBCC\")) {\r\n\t\t\tif (sceneGraph[indexContainingCodes].name == \"JBXCC-C-Housing\") {\r\n\t\t\t\tapi.show(sceneGraph[indexContainingCodes].instanceID)\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t}\t\t\r\n\t\t\r\n\t\tif (selectedPrefixes.includes(currentNodeDesignation)) {\r\n\t\t\tfor (var k=0; k<currentNodeLetterCode.length; ++k) {\r\n\t\t\t\tallLetters.push(currentNodeLetterCode[k]);\r\n\t\t\t\trelevantNodes.push({letterCode: currentNodeLetterCode[k], instanceID: sceneGraph[j].instanceID})\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\t\r\n\t\r\n\tvar commonLetter = mode(allLetters)[0]\r\n\t\r\n\tfor (var j=0; j<relevantNodes.length; ++j) {\r\n\t\tif (relevantNodes[j].letterCode.indexOf(commonLetter) != -1) {\r\n\t\t\tapi.show(relevantNodes[j].instanceID);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar mode = function(arr) { \r\n\tif(arr.filter((x,index) => arr.indexOf(x) == index).length == arr.length) {\r\n\t\treturn arr; \r\n\t} else {\r\n\t\treturn mode(arr.sort((x,index)=>x-index).map((x,index)=>arr.indexOf(x)!=index ? x : null ).filter(x=>x!=null))\r\n\t}\t\t\r\n}\r\n\r\nvar setNonPrimarySurfaceConfiguration = function(e, api) {\r\n\thandleUpdateSelect(e);\r\n\tvar currentSurfaceName = e.target.id.split(\"-\")[1]\r\n\tvar attributeIndex = e.target.id.split(\"-\")[2]\r\n\tvar attributeName = surfaceAttributeNameMap[currentSurfaceName][attributeIndex]\r\n\tconfigureMaterials(currentSurfaceName, attributeName, api)\r\n}\r\n\r\nvar handleUpdateSelect = function(e) {\r\n\tvar nameCode = e.target.id.split(\"-\")[0]\r\n\t\r\n\tif (!e.target.classList.contains('selected')) {\r\n\t\t\r\n\t\te.target.parentNode.querySelector('.sketchfab-option.selected').classList.remove('selected');\r\n\t\te.target.classList.add('selected');\r\n\t\te.target.closest('.sketchfab-select').querySelector('.sketchfab-select__trigger span').textContent = nameCode;\t\t\t\t\t\t\t\t\r\n\t}\r\n}\r\n\r\n\r\nvar handleHidingOptions = function(optionName=\"\") {\r\n\tvar allCategoryOptions = document.querySelectorAll(\".sketchfab-category .sketchfab-option\")\r\n\tfor (var k=0; k<allCategoryOptions.length; ++k) {\r\n\t\tallCategoryOptions[k].style.visibility = \"visible\";\r\n\t}\r\n\t\r\n\tvar currentCategorySelections = Array.from(document.querySelectorAll(\".sketchfab-category .sketchfab-select\"))\r\n\t\t\t\t\t\t\t.filter(select => !select.classList.contains(\"sketchfab-select-open\"))\r\n\t\t\t\t\t\t\t.map(select => select.querySelector(\".sketchfab-select-value\").textContent)\r\n\t\t\t\t\t\t\t\r\n\tcurrentCategorySelections.push(optionName)\r\n\t\r\n\tfor (var k=0; k<currentCategorySelections.length; ++k) {\r\n\t\tvar selectionName = currentCategorySelections[k];\r\n\t\tif (hiddenCategoryConfigurations[selectionName] !== undefined) {\r\n\t\t\tfor (var l=0; l<hiddenCategoryConfigurations[selectionName].length; ++l) {\r\n\t\t\t\tvar nameToHide = hiddenCategoryConfigurations[selectionName][l]\r\n\t\t\t\tvar optionToHide = document.querySelector(\"[data-value='\" + nameToHide + \"']\")\r\n\t\t\t\toptionToHide.style.visibility = \"hidden\"\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar disableAnimations = function() {\t\t\r\n\tvar allCategorySelects = document.querySelectorAll(\".sketchfab-category span.sketchfab-select-value\")\r\n\tvar allowAnimations = true;\r\n\tfor (var k=0; k<allCategorySelects.length; ++k) {\r\n\t\tvar controlIndex = allCategorySelects[k].id.split(\"-\")[1]\r\n\t\tvar currentNameCode = allCategorySelects[k].textContent;\r\n\t\tif (controls[controlIndex].configuration.allowsAnimation.indexOf(currentNameCode) == -1) {\r\n\t\t\tallowAnimations = false;\r\n\t\t}\r\n\t}\r\n\tvar animationButtons = document.querySelectorAll(\"#sketchfab-animation-buttons button\")\r\n\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\tanimationButtons[k].disabled = true;\r\n\t}\r\n\tif (allowAnimations) {\r\n\t\tfor (var k=0; k<animationButtons.length; ++k) {\r\n\t\t\tanimationButtons[k].disabled = false;\r\n\t\t}\t\t\t\t\t\t\r\n\t}\r\n}\r\n\r\nvar generateSelect = function(controlIndex) {\r\n\t\t\t\t\t\r\n\tvar wrapper = document.createElement(\"div\")\r\n\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\twrapper.classList.add(\"sketchfab-category\")\r\n\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\r\n\tvar select = document.createElement(\"div\")\r\n\tselect.classList.add(\"sketchfab-select\")\r\n\t\r\n\tvar selectTrigger = document.createElement(\"div\")\r\n\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\t\r\n\tvar triggerSpan = document.createElement(\"span\")\r\n\ttriggerSpan.textContent = Object.keys(controls[controlIndex].configuration.designations)[0]\r\n\ttriggerSpan.id = \"triggerSpan-\" + controlIndex;\r\n\ttriggerSpan.classList.add(\"sketchfab-select-value\")\r\n\tselectTrigger.appendChild(triggerSpan)\r\n\t\r\n\tvar arrow = document.createElement(\"div\")\r\n\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\tselectTrigger.appendChild(arrow)\t\t\t\t\t\r\n\tselect.appendChild(selectTrigger)\r\n\t\r\n\tvar customOptions = document.createElement(\"div\")\r\n\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\tvar selectTitle = document.createElement(\"h3\")\r\n\tselectTitle.classList.add(\"sketchfab-title\")\r\n\tselectTitle.textContent = controls[controlIndex].name;\r\n\tcustomOptions.appendChild(selectTitle)\r\n\tselect.appendChild(customOptions)\r\n\twrapper.appendChild(select)\t\r\n\r\n\twrapper.addEventListener('click', function() {\r\n\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t})\r\n\r\n\tcategorySelectObserver.observe(triggerSpan, {characterData: false, childList: true, attributes: false});\r\n\t\r\n\treturn wrapper;\r\n}\r\n\r\nvar generateSurfaceSelect = function(surfaceName, surfaceIndex, attributeIndex) {\r\n\tvar wrapper = document.createElement(\"div\")\r\n\twrapper.classList.add(\"sketchfab-select-wrapper\")\r\n\t\r\n\twrapper.style.width = (appWidth/4) + \"px\";\r\n\t\r\n\tvar select = document.createElement(\"div\")\r\n\tselect.classList.add(\"sketchfab-select\")\r\n\tvar selectTrigger = document.createElement(\"div\")\r\n\tselectTrigger.classList.add(\"sketchfab-select__trigger\")\r\n\tvar triggerSpan = document.createElement(\"span\")\r\n\ttriggerSpan.id = \"primarySurfaceElement-\" + surfaceName;\r\n\ttriggerSpan.textContent = Object.keys(surfaceOptionMap[surfaceName])[0]\r\n\ttriggerSpan.id = \"triggerSpan-\" + surfaceIndex;\r\n\ttriggerSpan.classList.add(surfaceName + \"-triggerSpan\")\r\n\tselectTrigger.appendChild(triggerSpan)\r\n\tvar arrow = document.createElement(\"div\")\r\n\tarrow.classList.add(\"sketchfab-select-arrow\")\r\n\tselectTrigger.appendChild(arrow)\r\n\t\r\n\tvar customOptions = document.createElement(\"div\")\r\n\tcustomOptions.classList.add(\"sketchfab-options\")\r\n\tvar selectTitle = document.createElement(\"h3\")\r\n\tselectTitle.classList.add(\"sketchfab-title\")\r\n\tselectTitle.textContent = surfaceName + \" - \" + surfaceAttributeNameMap[surfaceName][attributeIndex];\r\n\tcustomOptions.appendChild(selectTitle)\r\n\t\r\n\tselect.appendChild(selectTrigger)\r\n\tselect.appendChild(customOptions)\r\n\twrapper.appendChild(select)\t\r\n\r\n\twrapper.addEventListener('click', function() {\r\n\t\tthis.querySelector('.sketchfab-select').classList.toggle('sketchfab-select-open');\t\r\n\t})\r\n\t\r\n\treturn wrapper;\r\n}\r\n\r\n`\r\n)\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createControl, toggleOptionChoiceModalDisplay } from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"control-choice-modal\">\r\n            <div className=\"control-choice-content\">\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"color\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}\r\n                >Color</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"toggle\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Toggle</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"category\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Element Category</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"surfaceConfiguration\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Surface Configuration</div>\r\n                <div className=\"control-choice\" onClick={() => {\r\n                    dispatch(createControl(\"animation\"));\r\n                    dispatch(toggleOptionChoiceModalDisplay());\r\n                }}>Animation</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectMaterials, \r\n  updateControl,\r\n} from './viewerSlice';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch(); \r\n    const { option } = props\r\n    const materials = useSelector(selectMaterials); \r\n\r\n    return (\r\n    <div>\r\n      <div className=\"input__container\">\r\n        <label htmlFor=\"materials\">Material:</label>\r\n        {renderColorsOption(option, materials, dispatch)}\r\n      </div>\r\n      <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n        {renderAdditionalColors(option.id, option.additionalColors, dispatch)}\r\n      </div>\r\n      <div className=\"input__container\">\r\n        <button \r\n          id=\"addColor\"\r\n          className=\"add__button\"\r\n          onClick={() => {\r\n            if(option.additionalColors == undefined || option.additionalColors == null) {\r\n                const transferObject = {\r\n                  id: option.id, \r\n                  key: \"additionalColors\", \r\n                  value: [{color:\"#ffffff\", name: \"white\", colorRGB: [1,1,1]}]\r\n                };\r\n                \r\n                dispatch(updateControl(transferObject));\r\n            } else {\r\n              let newColors = [];\r\n              for (let i = 0; i<option.additionalColors.length; ++i) {\r\n                newColors[i] = option.additionalColors[i];\r\n              }\r\n              newColors.push({color: \"#ffffff\", name: \"default\", colorRGB: [1,1,1]});\r\n              dispatch(updateControl({id: option.id, key: \"additionalColors\", value: newColors}));\r\n            }\r\n          }}\r\n        >+ Add Color</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst renderAdditionalColors = (id, additionalColors, dispatch) => {\r\n    if (additionalColors == null || additionalColors == undefined) {\r\n      return <div></div>\r\n    } else {\r\n      return additionalColors.map((color, index, array) => (\r\n        <div className=\"input__container\">\r\n          <label htmlFor=\"defaultColor\">Alternate Color:</label>\r\n          <input \r\n            type=\"color\" \r\n            name=\"additionalColor\" \r\n            id={`${id}-${index}-additionalColor`} \r\n            value={additionalColors[index].color}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = e.target.value;\r\n                  newColor.colorRGB = hexRgb(e.target.value, {format: 'array'}).map(num => num/255);\r\n                  newColor.name = array[i].name;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={additionalColors[index].name}\r\n            onChange={(e) => {\r\n              const newArray = [];\r\n              for (let i=0; i<array.length; ++i) {\r\n                const newColor = {};\r\n                if (i === index) {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = e.target.value;\r\n                } else {\r\n                  newColor.color = array[i].color;\r\n                  newColor.colorRGB = array[i].colorRGB;\r\n                  newColor.name = array[i].name;\r\n                }\r\n                newArray[i] = newColor;\r\n              }\r\n              dispatch(updateControl({id: id, key: \"additionalColors\", value: newArray}));\r\n            }}      \r\n          />\r\n        </div>\r\n      ))\r\n    }\r\n  }\r\n  \r\nconst renderColorsOption = (option, materials, dispatch) => {\r\n  \r\n    const materialsHtml = materials.map((material, index) => <option value={index}>{material.name}</option>)\r\n    materialsHtml.unshift(<option value=\"none\">Select a Material</option>)\r\n\r\n    return (\r\n      <select \r\n        name=\"materials\" \r\n        id=\"materials\"\r\n        onChange={(e) => {\r\n          dispatch(updateControl({id: option.id, key: \"entityIndex\", value: e.target.value }));\r\n          dispatch(updateControl({id: option.id, key: \"entity\", value: materials[e.target.value] }));\r\n        }}\r\n        value={option.entityIndex}\r\n      >\r\n        {materialsHtml}\r\n      </select>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => <option value={node.instanceID}>{addDashes(node.depth)}{node.name}</option>)\r\n    sceneGraphHtml.unshift(<option value={0}>Select a Node</option>)\r\n  \r\n    return (\r\n      <select \r\n        name=\"nodes\" \r\n        id=\"nodes\"\r\n        className=\"material__select\"\r\n        value={option.entity.instanceID}\r\n        onChange={e => dispatch(updateControl({id: option.id, key: \"entity\", value: {instanceID: e.target.value}}))}\r\n      >\r\n        {sceneGraphHtml}\r\n      </select>\r\n    )\r\n}\r\n  \r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectGroupingOptions,\r\n  selectHiddenCategoryConfigurations,\r\n  setGroupingOptions,\r\n  setHiddenCategoryConfigurations,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const categoryElements = useSelector(selectGroupingOptions);\r\n    const hiddenCategoryConfigurations = useSelector(selectHiddenCategoryConfigurations);\r\n\r\n    const renderDesignationMultiselect = () => {     \r\n\r\n      return categoryElements.map((categoryElement, index) => {\r\n        \r\n        let categoryContainsCurrentElement = option.configuration.designations[categoryElement.designation] != undefined\r\n\r\n        if (categoryElement.isAvailable || categoryContainsCurrentElement) {\r\n        \r\n          return (\r\n            <div key={`element-${option.id}-${index}`}>\r\n              <div style={{display: \"flex\"}}>\r\n                <div style={{display: \"flex\", flex: \"1 1 auto\"}}>\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    checked={categoryContainsCurrentElement}\r\n                    onChange={() => {                 \r\n                      let newCategoryElements = JSON.parse(JSON.stringify(categoryElements))\r\n                      let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                      let newConfiguration = {};\r\n                      \r\n                      if (newDesignations[categoryElement.designation] != undefined) {\r\n                        delete newDesignations[categoryElement.designation];\r\n                        newConfiguration = {\r\n                          designations: newDesignations,\r\n                          allowsAnimation: option.configuration.allowsAnimation.filter(a => a != categoryElement.designation)\r\n                        }\r\n                        newCategoryElements[index].isAvailable = true;\r\n                      } else {\r\n                        newDesignations[categoryElement.designation] = \"\";\r\n                        let newDisablesAnimation = option.configuration.allowsAnimation.map(a => a)\r\n                        newDisablesAnimation.push(categoryElement.designation)\r\n                        newConfiguration = {\r\n                          designations: newDesignations,\r\n                          allowsAnimation: newDisablesAnimation,\r\n                        }\r\n                        newCategoryElements[index].isAvailable = false;\r\n                      }\r\n                      dispatch(setGroupingOptions(newCategoryElements))\r\n                      dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                    }}\r\n                  />\r\n                  <div>{categoryElement.designation}</div>\r\n                </div>\r\n                <div>Animation:</div>\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={option.configuration.allowsAnimation.includes(categoryElement.designation)}\r\n                  disabled={option.configuration.designations[categoryElement.designation] == undefined}\r\n                  onChange={() => {\r\n                    let newConfiguration = {};                  \r\n                    let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                    if (option.configuration.allowsAnimation.includes(categoryElement.designation)) {\r\n                      newConfiguration = {\r\n                        designations: newDesignations,\r\n                        allowsAnimation: option.configuration.allowsAnimation.filter(a => a != categoryElement.designation)\r\n                      }\r\n                    } else {\r\n                      let newDisablesAnimation = option.configuration.allowsAnimation.map(a => a)\r\n                      newDisablesAnimation.push(categoryElement.designation)\r\n                      newConfiguration = {\r\n                        designations: newDesignations,\r\n                        allowsAnimation: newDisablesAnimation,\r\n                      }\r\n                    }\r\n                    dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n                  }}\r\n                />\r\n              </div>\r\n              <div style={{display: \"flex\"}}>\r\n                <div>Readable Name:</div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter human readable name\"\r\n                  disabled={option.configuration.designations[categoryElement.designation] == undefined}\r\n                  value={option.configuration.designations[categoryElement.designation]}\r\n                  onChange={e => {\r\n                    let newDesignations = JSON.parse(JSON.stringify(option.configuration.designations));\r\n                    newDesignations[categoryElement.designation] = e.target.value;\r\n                    let newConfiguration = {\r\n                      designations: newDesignations,\r\n                      allowsAnimation: option.configuration.allowsAnimation.map(a => a),\r\n                    }\r\n                    dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))                  \r\n                  }}\r\n                />\r\n              </div>\r\n              {renderDisableMultiSelect(index)}\r\n            </div>\r\n          )\r\n\r\n        }\r\n        return null;\r\n      })\r\n    }\r\n\r\n    const renderDisableMultiSelect = (index) => {\r\n    \r\n      let currentElementDesignation = categoryElements[index].designation\r\n      let categoryContainsCurrentElement = option.configuration.designations[currentElementDesignation] != undefined\r\n      \r\n      let otherSelectedElements = categoryElements.filter(element => !element.isAvailable && option.configuration.designations[element.designation] == undefined)\r\n      if (categoryContainsCurrentElement && otherSelectedElements.length > 0) {\r\n        console.log(\"otherSelectedElements:\")\r\n        console.log(otherSelectedElements)\r\n        return (\r\n          <div style={{textAlign: \"left\", marginLeft: 16}}>\r\n            <div style={{marginLeft: 4}}>Disable when selected:</div>\r\n            {otherSelectedElements.map(element => {\r\n              let showChecked = false;\r\n              if (hiddenCategoryConfigurations[currentElementDesignation] != undefined) {\r\n                if (hiddenCategoryConfigurations[currentElementDesignation].includes(element.designation)) {\r\n                  showChecked = true;\r\n                }\r\n              }\r\n              return(\r\n              <div style={{display: \"flex\"}}>\r\n                <input \r\n                  type=\"checkbox\" \r\n                  checked={showChecked}\r\n                  onChange={() => {        \r\n                    let newHiddenCategoryConfigurations = JSON.parse(JSON.stringify(hiddenCategoryConfigurations))\r\n                    if(showChecked) {\r\n                      newHiddenCategoryConfigurations[currentElementDesignation] = newHiddenCategoryConfigurations[currentElementDesignation].filter(hiddenConfigElement => hiddenConfigElement.designation != element.designation)\r\n                      newHiddenCategoryConfigurations[element.designation] = newHiddenCategoryConfigurations[currentElementDesignation].filter(hiddenConfigElement => hiddenConfigElement.designation != currentElementDesignation)\r\n                    } else {\r\n                      if (newHiddenCategoryConfigurations[currentElementDesignation] === undefined) {\r\n                        newHiddenCategoryConfigurations[currentElementDesignation] = [];\r\n                      }\r\n                      newHiddenCategoryConfigurations[currentElementDesignation].push(element.designation)\r\n                      if(newHiddenCategoryConfigurations[element.designation] === undefined) {\r\n                        newHiddenCategoryConfigurations[element.designation] = [];\r\n                      }\r\n                      newHiddenCategoryConfigurations[element.designation].push(currentElementDesignation);\r\n                    }\r\n\r\n                    dispatch(setHiddenCategoryConfigurations(newHiddenCategoryConfigurations))\r\n                  }}\r\n                />\r\n                <div>{element.designation}</div>\r\n              </div>\r\n            )})}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n        <div className=\"additional-color__container\" id={`${option.id}-additionalColors`}>\r\n          {renderDesignationMultiselect()}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  setSurfaceConfigurationMode,\r\n  setSurfaceAttributeNameMap,\r\n  setMaterialNameSegmentMap,\r\n  selectMaterialNameSegmentMap,\r\n  selectSurfaceAttributeNameMap,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const materialNameSegmentMap = useSelector(selectMaterialNameSegmentMap);\r\n    const surfaceAttributeNameMap = useSelector(selectSurfaceAttributeNameMap);\r\n    dispatch(setSurfaceConfigurationMode(true))\r\n\r\n    const renderMaterialNameSegmentMap = () => Object.keys(materialNameSegmentMap).map(segment => (\r\n      <div>\r\n        {segment}\r\n        <input \r\n          value={materialNameSegmentMap[segment]} \r\n          onChange={(e) => {\r\n            let newMaterialSegmentMap = JSON.parse(JSON.stringify(materialNameSegmentMap))\r\n            newMaterialSegmentMap[segment] = e.target.value;\r\n            dispatch(setMaterialNameSegmentMap(newMaterialSegmentMap))\r\n          }}\r\n        />\r\n      </div>\r\n    ))\r\n\r\n    const renderAttributeName = surfaceName => surfaceAttributeNameMap[surfaceName].map((name, index) => (\r\n      <div>\r\n        Attribute {index}\r\n        <input\r\n          value={name}\r\n          onChange={(e) => {\r\n            let newSurfaceAttributeNames = JSON.parse(JSON.stringify(surfaceAttributeNameMap))\r\n            newSurfaceAttributeNames[surfaceName][index] = e.target.value;\r\n            dispatch(setSurfaceAttributeNameMap(newSurfaceAttributeNames))\r\n          }}\r\n        />\r\n      </div>\r\n    ))\r\n\r\n    const renderAttributeNames = () => Object.keys(surfaceAttributeNameMap).map(surfaceName => (\r\n      <div>\r\n        {surfaceName}\r\n        {renderAttributeName(surfaceName)}\r\n      </div>\r\n    ))\r\n  \r\n    return (\r\n      <div className=\"grouping__container\">\r\n          <div>\r\n            <h4>Surfaces & Attributes</h4>\r\n            {renderAttributeNames()}\r\n          </div>\r\n          <div>\r\n            <h4>Code Name Map:</h4>\r\n            {renderMaterialNameSegmentMap()}\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectAnimations,\r\n  updateControl,\r\n} from './viewerSlice';\r\n\r\nexport default props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { option } = props;\r\n    const animations = useSelector(selectAnimations);\r\n\r\n    const animationOptions = animations.map(animation => <option value={animation[0]}>{animation[1]}</option>)\r\n    animationOptions.unshift(<option value=\"none\">Select an Animation</option>)\r\n\r\n    return (\r\n      <div style={{display: \"flex\", alignItems: \"flex-start\", flexDirection: \"column\"}}>\r\n        <div>\r\n          <label>Animation:</label>\r\n          <select \r\n            name=\"animationSelect\"\r\n            value={option.configuration.animationUID}\r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                animationUID: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))\r\n            }}\r\n          >\r\n            {animationOptions}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"start\">Start Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"start\"\r\n            value={option.configuration.startTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                startTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"end\">End Time:</label>\r\n          <input \r\n            type=\"number\" \r\n            name=\"end\"\r\n            value={option.configuration.endTime} \r\n            onChange={(e) => {\r\n              let newConfiguration = {\r\n                ...option.configuration,\r\n                endTime: e.target.value,\r\n              }\r\n              dispatch(updateControl({id: option.id, key: \"configuration\", value: newConfiguration}))}\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  toggleOptionChoiceModalDisplay, \r\n  selectControls, \r\n  selectDisableButtons,\r\n  updateControl,\r\n  setControls,\r\n} from './viewerSlice';\r\nimport ColorPanel from './ColorPanel';\r\nimport TogglePanel from './TogglePanel';\r\nimport ElementCategoryPanel from './ElementCategoryPanel'\r\nimport SurfaceConfiguration from './SurfaceConfigurationPanel';\r\nimport AnimationPanel from './AnimationPanel';\r\nimport { ReactSortable } from 'react-sortablejs';\r\n\r\nexport default () => {  \r\n  \r\n  const options = useSelector(selectControls);\r\n  const disableButtons = useSelector(selectDisableButtons);\r\n\r\n  const dispatch = useDispatch();\r\n\r\nconst renderPanel = (option) => {\r\n  if (option.type === \"color\") {\r\n    return <ColorPanel option={option} />;\r\n  } else if (option.type === \"toggle\") {\r\n    return <TogglePanel option={option} />;\r\n  } else if (option.type === \"animation\") {\r\n    return <AnimationPanel option={option} />;\r\n  } else if (option.type === \"category\") {\r\n    return <ElementCategoryPanel option ={option} />;\r\n  } else if (option.type === \"surfaceConfiguration\") {\r\n    return <SurfaceConfiguration />;\r\n  }\r\n}\r\n\r\nconst renderOptions = (options, dispatch) => {\r\n  \r\n  let optionsHtml = options.map((option, index, array) => (\r\n    <div className=\"single-option__panel\" key={`option-${index}`}>\r\n      <div className=\"single-option__header\">\r\n        <h3 className=\"single-option__title\">{option.id}. {option.type}</h3>\r\n        <button \r\n          id={`collapseButton${option.id}`}\r\n          className=\"collapse__button\"\r\n          onClick={(e) => dispatch(updateControl({\r\n            id: option.id,\r\n            key: \"isExpanded\",\r\n            value: !option.isExpanded\r\n          }))}\r\n        >\r\n          {option.isExpanded ? \"Collapse\" : \"Expand\"}\r\n        </button>\r\n        <button \r\n          title=\"Remove option\"\r\n          onClick={() => {\r\n            const newArray = array.filter(control => control.id !== option.id);\r\n            dispatch(setControls(newArray));\r\n          }}\r\n        >\r\n          <svg \r\n            fill=\"currentColor\" \r\n            preserveAspectRatio=\"xMidYMid meet\" \r\n            height=\"1em\" \r\n            width=\"1em\" \r\n            viewBox=\"0 0 40 40\" \r\n            style={{verticalAlign: \"middle\"}}\r\n          >\r\n            <g>\r\n              <path d=\"m15.9 30.7v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 \r\n              0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.7 0v-15.7q0-0.3-0.2-0.5t-0.5-0.2h-1.4q-0.3 0-0.5 \r\n              0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 0.2h1.4q0.3 0 0.5-0.2t0.2-0.5z m5.8 \r\n              0v-15.7q0-0.3-0.2-0.5t-0.6-0.2h-1.4q-0.3 0-0.5 0.2t-0.2 0.5v15.7q0 0.3 0.2 0.5t0.5 \r\n              0.2h1.4q0.4 0 0.6-0.2t0.2-0.5z m-12.2-22.1h10l-1.1-2.6q-0.1-0.2-0.3-0.3h-7.1q-0.2 \r\n              0.1-0.4 0.3z m20.7 0.7v1.4q0 0.3-0.2 0.5t-0.5 0.2h-2.1v21.2q0 1.8-1.1 3.2t-2.5 \r\n              1.3h-18.6q-1.4 0-2.5-1.3t-1-3.1v-21.3h-2.2q-0.3 0-0.5-0.2t-0.2-0.5v-1.4q0-0.3 \r\n              0.2-0.5t0.5-0.2h6.9l1.6-3.8q0.3-0.8 1.2-1.4t1.7-0.5h7.2q0.9 0 1.8 0.5t1.2 1.4l1.5 \r\n              3.8h6.9q0.3 0 0.5 0.2t0.2 0.5z\"></path>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div style={{display: option.isExpanded ? \"block\" : \"none\"}}>\r\n        <div style={{display:\"flex\"}}>\r\n          <p className=\"nameFieldTitle\">Name:</p>\r\n          <input \r\n            type=\"text\" \r\n            name=\"colorName\" \r\n            id=\"colorName\" \r\n            value={option.name} \r\n            onChange={(e) => dispatch(updateControl({id: option.id, key: \"name\", value: e.target.value}))}\r\n          />\r\n        </div>\r\n        {renderPanel(option)}\r\n      </div>\r\n    </div>\r\n  ))\r\n\r\n  return optionsHtml;\r\n}\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\", display: \"flex\", flexDirection: \"column\"}}>\r\n      <button \r\n        className=\"add-option add__button\" \r\n        disabled={disableButtons}\r\n        onClick={() => dispatch(toggleOptionChoiceModalDisplay())}\r\n      >+ Add Option</button>\r\n      <div className=\"single-option__panels__container\">\r\n        <ReactSortable list={options} setList={options => dispatch(setControls(options))}>\r\n          {renderOptions(options, dispatch)}\r\n        </ReactSortable>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  selectSceneGraph,\r\n  selectSketchfabAPI,\r\n  setSceneGraphIsVisible,\r\n  selectSceneGraphIsVisible,\r\n  setAllNodesVisible,\r\n} from './viewerSlice';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch()\r\n    const sceneGraph = useSelector(selectSceneGraph);\r\n    const sketchfabAPI = useSelector(selectSketchfabAPI);\r\n    const sceneGraphIsVisible = useSelector(selectSceneGraphIsVisible);\r\n\r\n    const sceneGraphHtml = sceneGraph.map(node => {\r\n      return (\r\n        <div style={{display: \"flex\"}}>\r\n          <input \r\n            id={node.instanceID}\r\n            type=\"checkbox\" \r\n            checked={sceneGraphIsVisible[node.instanceID]}\r\n            onChange={(e) => {\r\n                if (e.target.checked) {\r\n                    sketchfabAPI.show(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: true}))\r\n                } else {\r\n                    sketchfabAPI.hide(e.target.id)\r\n                    dispatch(setSceneGraphIsVisible({id: e.target.id, value: false}))\r\n                }\r\n            }}\r\n          />\r\n          <div className=\"node-name\">{addDashes(node.depth)}{node.name}</div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    sceneGraphHtml.unshift(\r\n      <div style={{display: \"flex\",borderBottom: \"1px solid black\"}}>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={Object.values(sceneGraphIsVisible).reduce((accum, curr) => accum && curr)}\r\n          onChange={(e) => {\r\n            dispatch(setAllNodesVisible(e.target.checked))\r\n          }}\r\n        />\r\n        <div className=\"node-name\">All Nodes</div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div style={{overflow: \"auto\"}}>\r\n        <div id=\"nodeControls\">\r\n            {sceneGraphHtml}\r\n        </div>\r\n        <div id=\"animationControls\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst addDashes = number => {\r\n    var dashes = \"\";\r\n    for (let i=0; i<number; ++i) {\r\n        dashes += \"--\"\r\n    }\r\n\r\n    return dashes;\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n    setViewMode,\r\n    selectViewMode,\r\n    selectDisableButtons,\r\n} from './viewerSlice';\r\nimport OptionPanel from './OptionPanel';\r\nimport NodePanel from './NodePanel';\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const viewMode = useSelector(selectViewMode);\r\n    const disableButtons = useSelector(selectDisableButtons);\r\n\r\n    let nodesButtonStyles = {\r\n        backgroundColor: viewMode == \"nodes\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    let optionsButtonStyles = {\r\n        backgroundColor: viewMode == \"options\" ? \"white\" : \"gray\"\r\n    }\r\n\r\n    const renderPanel = (viewMode) => {\r\n        if (viewMode === \"options\") {\r\n            return <OptionPanel />\r\n        } else if (viewMode === \"nodes\") {\r\n            return <NodePanel />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"control-menu\">\r\n            <div style={{display: \"flex\"}}>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={nodesButtonStyles}\r\n                    disabled={disableButtons}\r\n                    onClick={() => dispatch(setViewMode(\"nodes\"))}\r\n                >Nodes</button>\r\n                <button \r\n                    className=\"control-menu__button\"\r\n                    style={optionsButtonStyles}\r\n                    onClick={() => dispatch(setViewMode(\"options\"))}\r\n                >Options</button>\r\n            </div>\r\n            {renderPanel(viewMode)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Viewer from './components/Viewer'\r\nimport ExportModal from './components/ExportModal';\r\nimport OptionChoiceModal from './components/OptionChoiceModal';\r\nimport ControlMenu from './components/ControlMenu';\r\nimport './App.css';\r\nimport './globals';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <Viewer />\r\n        <ControlMenu />\r\n        <ExportModal />\r\n        <OptionChoiceModal />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport viewerReducer from '../components/viewerSlice';\r\nimport logger from 'redux-logger';\r\n\r\nexport default configureStore({\r\n  reducer: viewerReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","var buildSceneGraph = function(state, children, depth) {\r\n\tfor (let i=0; i<children.length; ++i) {\r\n    if (children[i].type != \"Group\" && children[i].name != \"RootNode\") {\r\n      if(children[i].name == undefined) {\r\n        state.sceneGraph.push({\r\n          name: children[i].type, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      } else {\r\n        state.sceneGraph.push({\r\n          name: children[i].name, \r\n          depth: depth, \r\n          instanceID: children[i].instanceID,\r\n          materialID: children[i].materialID,\r\n        });\r\n      }\r\n    }\r\n    state.sceneGraphIsVisible[children[i].instanceID] = true\r\n\t\tif (children[i].children != undefined || children[i].children != null) {\t\t\t\r\n\t\t\tbuildSceneGraph(state, children[i].children, depth+1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar buildCategoryOptions = (state) => {   \r\n\r\n  let uniqueStrings = [];\r\n  let categoryOptions = [];\r\n  for (let i=0; i<state.sceneGraph.length; ++i) {\r\n    let nodeNameArray = state.sceneGraph[i].name.split(\"-\").filter(string => string != \"\")\r\n    let mainDesignation = nodeNameArray[0];\r\n    let capitalLetter = nodeNameArray[1];\r\n    let detailedTitle = nodeNameArray[2];\r\n    for (let i=3; i<nodeNameArray.length; ++i) {\r\n      detailedTitle += nodeNameArray[i];\r\n    }\r\n\r\n    const irrelevantStrings = [\"Group\", \"RootNode\", \"MatrixTransform\"];\r\n    if (uniqueStrings.indexOf(mainDesignation) == -1 &&\r\n      irrelevantStrings.indexOf(mainDesignation) == -1) {\r\n      uniqueStrings.push(mainDesignation);\r\n      categoryOptions.push({\r\n        instanceID: state.sceneGraph[i].instanceID,\r\n        designation: mainDesignation,\r\n        capitalLetter: capitalLetter,\r\n        detailedTitle: detailedTitle,\r\n        isAvailable: true,\r\n      })\r\n    }\r\n  }\r\n  categoryOptions.sort(function(a,b){return a.designation.charCodeAt(0)-b.designation.charCodeAt(0)})\r\n  state.groupingOptions = categoryOptions;\r\n}\r\n\r\nvar buildSurfaceOptions = (materials) => {  \r\n    let surfaceOptionMap = {};\r\n    let materialNameSegmentMap = {};\r\n    let surfaceAttributeNameMap = {};\r\n    \r\n    for (let i=0; i<materials.length; ++i) {\r\n      var matches = materials[i].name.match(/[a-zA-Z]*-[A-Z]+-[a-zA-Z]+/g);\r\n    \r\n      if (matches !== null) {\r\n        let materialNameArray = materials[i].name.split(\"-\").filter(string => string != \"\")\r\n        let geometryName = materialNameArray[0];\r\n        let materialOptions = materials[i].name.match(/[A-Z]+-/g).map(option => option.replace(\"-\", \"\"));\r\n        let primaryValue = materialOptions[0];\r\n        \r\n        // generate material name segment map\r\n        for (let j=0; j<materialOptions.length; ++j) {\r\n          materialNameSegmentMap[materialOptions[j]] = materialOptions[j];\r\n        }\r\n        console.log(\"\\n\\nmaterialNameSegmentMap\")\r\n        console.log(materialNameSegmentMap)\r\n\r\n        // generate select display\r\n        let isNewUniqueGeometry = surfaceOptionMap[geometryName] === undefined;\r\n        if (isNewUniqueGeometry) {\r\n          surfaceOptionMap[geometryName] = {}\r\n\r\n          surfaceAttributeNameMap[geometryName] = [\"Attribute Name\"]\r\n          surfaceOptionMap[geometryName][materialOptions[0]] = [];\r\n          for (let j=1; j<materialOptions.length; ++j) {\r\n            surfaceAttributeNameMap[geometryName].push(\"Attribute Name\")\r\n            surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n          }\r\n        } else {\r\n          let isNewUniquePrimaryValue = surfaceOptionMap[geometryName][primaryValue] === undefined\r\n          if (isNewUniquePrimaryValue) {\r\n            surfaceOptionMap[geometryName][primaryValue] = [];\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              surfaceOptionMap[geometryName][primaryValue].push([materialOptions[j]])\r\n            }\r\n          } else {\r\n            for (let j=1; j<materialOptions.length; ++j) {\r\n              let currentAttributeOptions = surfaceOptionMap[geometryName][primaryValue][j-1];\r\n              let isNewUniqueValue = currentAttributeOptions.indexOf(materialOptions[j]) === -1;\r\n              if (isNewUniqueValue) {\r\n                currentAttributeOptions.push(materialOptions[j])\r\n              }\r\n            }                                  \r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n        surfaceOptionMap,\r\n        materialNameSegmentMap,\r\n        surfaceAttributeNameMap,\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    buildSceneGraph,\r\n    buildCategoryOptions,\r\n    buildSurfaceOptions,\r\n}\r\n"],"sourceRoot":""}